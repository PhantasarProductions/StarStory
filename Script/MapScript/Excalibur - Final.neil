// License Information:
// **********************************************
// 
// src/Tricky Script/Script/MapScript/Excalibur - Final.neil
// (c) Jeroen Broks, 2021, All Rights Reserved.
// 
// This file contains material that is related
// to a storyline that is which is strictly
// copyrighted to Jeroen Broks.
// 
// This file may only be used in an unmodified
// form with an unmodified version of the
// software this file belongs to.
// 
// You may use this file for your study to see
// how I solved certain things in the creation
// of this project to see if you find valuable
// leads for the creation of your own.
// 
// Mostly this file comes along with a project
// that is for most part released under an
// open source license and that means that if
// you use that code with this file removed
// from it, you can use it under that license.
// Please check out the other files to find out
// which license applies.
// This file comes 'as-is' and in no possible
// way the author can be held responsible of
// any form of damages that may occur due to
// the usage of this file
// 
// 
// **********************************************
// 
// version: 21.06.12
// End License Information

#use "Libs/xmath"
#use "Script/Use/Anyway"
#use "Script/Use/Map/KickReggie"


#MKL_Version "Star Story - Excalibur - Final.neil" "21.06.12"
#MKL_Lic     "Star Story - Excalibur - Final.neil" "Phantasar Closed License"

#macro JohnsonJoined gv.gbool.AdmiralJohnsonJoinedTheParty
#macro __chats 7
#macro __boss005 gv.gbool.Excalibur_Boss_SuperCyborg_On_Area_005_Defeated
#macro __boss010 gv.gbool.Excalibur_Boss_GoldKillerDroid_On_Area_010_Defeated

QuickMeta Crystal_Reload
	Index
		return gv.gint["EXC_CRYSTAL_RELOAD_"..Map.Layer]
	End
	
	NewIndex
		gv.gint["EXC_CRYSTAL_RELOAD_"..Map.Layer] = value
	End
End

QuickMeta Has_Key
	Index
		Return gv.gbool["EXC_HASKEY_"..(Key:upper()).."_"..Map.Layer]
	End
	
	NewIndex
		gv.gbool["EXC_HASKEY_"..(Key:upper()).."_"..Map.Layer] = Value
	End
End

Void Niks()
	CSay("NIKS!") // DEBUG!
End

QuickMeta QM_Chat
	Index
		If !Done["Excalibur_Chat_"..key]
			MapText("CHAT"..key)
			Party.GiveEXP(key*(3000 div __skill))
		End
		Return Niks
	End
End



QuickMeta Unlocked_Floor
	Index
#if fucked
		If gv.gbool["EXC_UNLOCKED_FLOOR_"..Key]
			Return True
		End
		int KN = Lua.tonumber(right(Key,#key-1)) || 0
		int LN = Lua.tonumber(right(Map.Layer,#Map.Layer-1)) || 0
		//CSayF("KN=%d; LN=%d; Compare=%s; Red:%s",LN,KN,lua.tostring(LN+1==KN),lua.tostring(Has_Key.Red)) // DEBUG ONLY!
		bool u = gv.gbool[sprintf("EXC_HASKEY_RED_%03d",KN-1)]
		//If (LN+1==KN && Has_Key.Red) || Key=="#001"
		If u || Key=="#001"
			gv.gbool["EXC_UNLOCKED_FLOOR_"..Key] = True
			Has_Key.Red = False
			CSayF("Unlocked floor: %s",Key)
			If KN<=10
				Hawk.Add(sprintf("F%03d",KN),"Excalibur",Lua.Neil.Globals.MScript.Names[Map.Layer],"Excalibur - Final",Key)
			Else
				Hawk.Add(sprintf("F%03d",KN),"Excalibur",Lua.Neil.Globals.MScript.Names[Map.Layer],"Excalibur - Final 2",Key)
			End
			Return True
		End
		Return False
	End
#fi
		Return gv.gbool["EXC_UNLOCKED_FLOOR_"..Key] || Key=="#001"
	End
	NewIndex
		gv.gbool["EXC_UNLOCKED_FLOOR_"..Key] = value
	End
End

QuickMeta CONV_BAG
	index
		return Map.ObjInt("CONV_BAG",Key)
	end
	newindex
		Map.SetObj("CONV_BAG",key,value)
	end
end

Group MScript

	ReadOnly Var Yeah = Audio.LoadNew("Audio/SFX/Yeah/Yeah.ogg","EXCALIBUR_YEAH")
	ReadOnly Var Card = Image.LoadNew("GFX/Textures/Excalibur/Keycard.png","EXCALIBUR_KEYCARD")
	
	ReadOnly Var Mouse = Image.Obtain("Mouse")

	Table Names
	ReadOnly Var Fnt = ImageFont.Obtain("BIGTEXT")  
	ReadOnly Var SFt = ImageFont.Obtain("BOXTEXT")
	
	Var Chat

	#region General stuff
	Void ReplaceRolfWithJohnson()
		If JohnsonJoined
			//If !Done.The1stTimeJohnsonBack
			//	MapText("JOHNSON_BACK")
			//End		
			For I=1,6
				If RPGParty[I]=="Rolf"
					RPGParty[I]="Johnson"
				End
			End
			// ReSync needed or Johnson's stats will not be correct if Rolf gained a level in the meantime
			// This is also why Rolf is ReSynced when you leave Excalibur.
			Party.GrabLevel("Johnson",RPGChar.Johnson.Stat.Level)
		Else
			For I,Ch in ipairs{"Wendicka","Crystal","Yirl","Foxy","Xenobi",""}
				RPGParty[I]=Ch
			End
		End
	End		
	
	Void InitNames()
		Names = {}
		Names["#000"] = "Secret Hangar"
		Names["#001"] = "Hidden layer"
		Names["#002"] = "Security department"
		Names["#003"] = "Lady of the Lake - Artificial Park"
		Names["#004"] = "Coder Section - Apollo" // Used to be 'LAURA'
		Names["#005"] = "Residential Area - Galahad"
		Names["#006"] = "Junk collection area - Donald"
		Names["#007"] = "Camelot - Town Square"
		Names["#008"] = "Coder Section - C++" // Used to be 'Blitz'
		Names["#009"] = "Maintenance Deck"
		Names["#010"] = "Residential Area - Guinevere"
		Names["#011"] = "Crystal's bar"
		Names["#012"] = "Junk collection area - Geert"
		Names["#013"] = "Casino"
		Names["#014"] = "Weapon Storage"
		Names["#015"] = "Medical department"
		Names["#016"] = "Coder Section - Neil" // Used to be 'Lua'
		Names["#017"] = "Playground"
		Names["#018"] = "Junk collection area - Marine"
		Names["#019"] = "Staff department"
		Names["#020"] = "High Security Department"
		Names.SECRET1 = "Secret Science Lab"
		Names.SECRET2 = "Secret labyrinth of \"the Mole\""        
    End
    
    Var RL
    Get Int Reloads
    	If !RL
			Switch __Skill
    			Case 1    				
    				RL = RL || {}
    			Case 2 
    				RL = Crystal_Reload
    			Case 3
    				RL = Crystal_Reload
    			Default
    				Lua.error("Skill error on reload")
    		End    				    			
    	End
    	If !Done["EXC_AMMO_INIT_"..Map.Layer]
    		Switch __Skill
    			case 1    				
    				RL = RL || {}
    				RL[Map.Layer] = RL[Map.Layer] || 1000
    			case 2 
    				RL = Crystal_Reload
    				RL[Map.Layer] = math.random(20,250)
    			case 3
    				RL = Crystal_Reload
    				RL[Map.Layer]= math.random(1,5)
    			default
    				Lua.error("Skill error on reload")
    		End    				    			
    	End
    	return RL[Map.Layer]
    End
    
    Set Int Reloads
    	RL[Map.Layer] = value
    End
    
    Void NPC_AMMO()
    	Bool FilledAny
    	If Reloads<=0
    		MapText("CRYSTAL.EMPTY")
    		Return
    	End
    	For AT in RPGChar.Crystal.List.ARM.Each
    		Var Ammo = RPGChar.Crystal.Points["ARM.AMMO."..AT]
    		FilledAny = FilledAny || (Ammo.Have<Ammo.Maximum)
    		Ammo.Have=Ammo.Maximum
    	End
    	If FilledAny
    		MapText("CRYSTAL.REFILL")
    		Reloads--
    		If (Reloads>1)
    			Schedule.Add(sprintf("MSG: %d reloads left at this refill point!",Reloads))
    		ElseIf (Reloads==1) 
    			Schedule.Add("MSG:Warning only one more refill at this point!")
    		Else
    			Schedule.Add("MSG:Warning! This refill point is now empty")
    		End
    	Else
    		MapText("CRYSTAL.FULL")    		
    	End
    End
    
    Get String RandomCyborg
    	Static Var RC
    	If !RC
    		RC = {}
    		For i=1,9 - (__skill * 3)
    			RC += "Cyborg Medic"
    		End
   			RC += "Cyborg Captain"
   			RC += "Cyborg Gunner"
   			RC += "Cyborg Gunner"
   			If Caps.Cycle > (3-__skill)
   				RC += "CyberAstrilopup"
   				RC += "Cyborg Ji"
   			End
   		End
   		Return "Reg/"..RC[math.random(1,#RC)]
   	End
    
    Void StartBoss(string FoeBoss,string CombatMusic)
    	StartCombat.Prepare()
    	String BossFile = "Boss/"..FoeBoss
    	If (FoeBoss=="McLeen")
    		BossFile = "SpecialBoss/McLeen"
    	End
		switch __skill
			case 3
				StartCombat.Foe(RandomCyborg ,Map.Level)				
				StartCombat.Foe(RandomCyborg ,Map.Level)				
				StartCombat.Foe(RandomCyborg ,Map.Level)
				FallThrough
			case 2
				StartCombat.Foe(RandomCyborg,Map.Level div 2)
				StartCombat.Foe(BossFile,Map.Level)
				StartCombat.Foe(RandomCyborg ,Map.Level div 2)				
				StartCombat.Foe(RandomCyborg ,Map.Level div 2)				
				StartCombat.Foe(RandomCyborg ,Map.Level div 2)				
				StartCombat.Foe(RandomCyborg ,Map.Level div 2)				
			case 1
				StartCombat.Foe(RandomCyborg,Map.Level div 3)
				StartCombat.Foe(BossFile,Map.Level)
				StartCombat.Foe(RandomCyborg ,Map.Level div 3)	
			default
				Lua.error("?")
		end
		//StartCombat.Tune = StartCombat.RandomTune
		StartCombat.Tune = CombatMusic
		StartCombat.Boss = true
		StartCombat.Arena = "Excalibur.png"
		StartCombat.Begin()
	End
    #endregion
    
    #region Keys
    Void GetKey(string Color)
    	String Tag = "NPC_"..(Color:upper())
    	Int KeyX = Map.ObjInt(Tag,"X")
    	Int KeyY = Map.ObjInt(Tag,"Y")
    	Int LN
    	Switch Map.Layer
    		Case "SECRET1"
    			LN=2500
    		case "SECRET2"
    			LN=5000
    		Default
    			LN = Lua.tonumber(right(Map.Layer,#Map.Layer-1)) || 0
    	End
    	Number Afstand = xMath.Pythagoras(KeyX,KeyY,Player.X,Player.Y)
    	If Afstand>70
    		CSayF("Player to far away from key (%02.03f). Request rejected",Afstand)
    		Return
    	End
    	Yeah.Play()
    	Party.GiveEXP(LN * 250)
    	Has_Key[Color] = True
    	Map.Kill(Tag,true)
    End
    
    Void NPC_Red()
    	GetKey("Red")
    End
    
    Void NPC_Blue()
    	GetKey("Blue")
    End
    
    Void NPC_Green()
    	GetKey("Green")
    End
    
    Void NPC_Gold()
    	GetKey("Gold")
    End
    #endregion
    
	
	#region 000 - Hangar
	Void EntranceWalkSouth()
		Self.LeftTrans = true
		Int DL = Map.ObjInt("EntranceLeft","X")
		Int DR = Map.ObjInt("EntranceRight","X")
		Map.SetObj("EntranceLeft","X",DL-32)
		Map.SetObj("EntranceRight","X",DR+32)
		Map.SetObj("BlockStart","Impassible",false)
		Map.ReMap()
		Player.WalkTo("BeginDungeon")
		If !Done.Arrival_Excalibur_FinalMission_First_Time
			MapText("WENDICKA_WELCOMEBACK")
		End
		For i=32,0,-1
			Graphics.Cls()
			Map.DrawScreen()
			Graphics.Flip()
			FPS.WaitMinTicks()
			Map.SetObj("EntranceLeft","X",DL-i)
			Map.SetObj("EntranceRight","X",DR+i)
		End
		Map.SetObj("BlockStart","Impassible",true)
		Map.ReMap()
	End
	
	Void ToDungeon()
		Map.GoToLayer("#001","BeginMetNummer1")
	End
	
	Void TerugNaarHangar()
		Map.GoToLayer("#000","From001")
	End
	#endregion
	
	#region 003 - Lady of the Lake - Artificial Park
	Void CreateJohnson()
	gv.gstring.Johnson = "Admiral Johnson"
	// Just use te old when on a new cycle
		if Caps.Cycle>1 || gv.gbool.ImportedJohnson
			CSay("Updating level stuff for Johnson")
			Party.GrabLevel("Johnson",RPGChar.ExHuRU.Stat.Level) // Makes sure the stats are still up to date, as that can be an issue!
			RPGParty[6] = "Johnson"
			return
		end
		// Create raw character record
		CSay("Creating character Johnson!")
		Party.NewChar("Johnson",RPGChar.ExHuRU.Stat.Level,"Admiral Johnson")
		RPGChar.Johnson.Link_Stat("ExHuRU","Level")
		// Inventory sockets
		for i=1,Caps.InventorySockets
			RPGChar.Johnson.Link_Data("ExHuRU","INVITEM"..i)
			RPGChar.Johnson.Link_Stat("ExHuRU","INVAMNT"..i)
			CSayF("Link_ed inventory socket #%03d/%03d",i,Caps.InventorySockets)
		end
		// Statistics
		for st in each {"AP","Accuracy","Agility","Defense","Evasion","HP","Resistance","Strength","Will" }
			CSayF("Linking stat: %s",st)
			for substat in each { "BUFF","POWERUP","UPGRADE" }
				CSayF("= %s (%d)",substat,RPGChar.UniCrystal.Stat[substat.."_"..st])
				RPGChar.Johnson.Link_Stat("ExHuRU",substat.."_"..st)
			end
		end
		// Elemental Resistance
		for el in each { "Dark","Earth","Fire","Frost","Healing","DarkHealing","Light","Lightning","NonElemental","Water","Wind" }
			CSayF("Linking elemental resistance: %s",el)
			if !RPGChar.ExHuRU.HasStat("ER_"..el)
				CSay("= Original base was non-existent. Creating!")
				switch el
					case "Healing"
						RPGChar.ExHuRU.Stat["ER_"..el] = 6
					case "DarkHealing"
						RPGChar.ExHuRU.Stat["ER_"..el] = 0
					default
						RPGChar.ExHuRU.Stat["ER_"..el] = 3
				end
			end
			if !RPGChar.ExHuRU.HasStat("ER_MODIFIER_"..el)
				CSay("= Original modifier was non-existent. Creating!")
				RPGChar.ExHuRU.Stat["ER_MODIFIER_"..el] = 0
			end
			RPGChar.Johnson.Link_Stat("ExHuRU","ER_"..el)
			RPGChar.Johnson.Link_Stat("ExHuRU","ER_MODIFIER_"..el)
		end
		// Status Resistance
		for sr in each { "Block", "Buff", "Damned", "Death", "Debuff", "Disease", "Paralysis", "Poison", "Will" }
			CSayF("Setting Status Change Base Resistance: %s",sr)
			RPGChar.Johnson.Stat["SR_BASE_"..sr] = math.random(15 - (__skill*5),90 div __skill)
			CSayF("Linking Status Change modifiaction Resistance: %s",sr)			
			for subsr in each {"BUFF","EQBF" }
				// TRUE should NOT be linked!
				CSayF("= %s (%d)",subsr,RPGChar.UniCrystal.Stat["SR_"..subsr.."_"..sr])
				RPGChar.Johnson.Link_Stat("ExHuRU","SR_"..subsr.."_"..sr)
			end
		end
		// Experience Points
		CSay("Linking Experience")
		RPGChar.Johnson.Link_Points("ExHuRU","EXP")
		// Updates
		if !RPGChar.ExHuRU.HasStat("UPGRADES")
			RPGChar.ExHuRU.Stats.UPGRADES = 0
		end
		RPGChar.Johnson.Link_Stat("ExHuRU","UPGRADES")
		// Abilities
		RPGChar.Johnson.Link_List("ExHuRU","ABL")
		RPGChar.Johnson.Link_List("ExHuRU","ABL_POWERUP")
		RPGChar.Johnson.Link_List("ExHuRU","LEARN")
		// Ammo
		RPGChar.Johnson.Stat.AMMO_BASE = 16 div __skill 
		// End
		CSay("Johnson Created")
	End
	
	Void Admiraal()
		If JohnsonJoined
			Return
		End
		JohnsonJoined = true
		Map.SetObj("Reggie","Visible",true)
		Kthura.KillAutoVisible()
		PPop.Pop("adm","South")
		MapText("ADMIRAAL1")
		CreateJohnson()
		RPGParty[6]="Johnson"
		Map.Spawn("PartyPopped_Johnson","spawn_admiraal")
		Map.SetObj("PartyPopped_Johnson","Texture","GFX/Actors/Player/Johnson.North.jpbf")
		Map.ObjWalkTo("PartyPopped_Johnson","go_admiraal")
		MapText("ADMIRAAL2")
		KickReggie("PartyPopped_Foxy","Reggie","East")
		MapText("ADMIRAAL3")
		Kthura.SetAutoVisible()
		Map.Kill("Reggie",true)
		PPop.UnPop()
	End
	#endregion
	
	
	#region 005 - Residential Section Galahad
	Void Boss005()
		If __boss005
			Return
		End
		Player.StopWalking()
		MapTextLeader("BOSS005")
		Schedule.Add("PostBoss005")
		StartBoss("SuperCyborg","Music/SpecialBoss/Exit the Premises.ogg")
	End
	
	Void PostBoss005()
		__boss005 = true
		Party.GiveEXP(2500)
		Map.Kill("SuperCyborg",true)
		Ach.Award("BOSS_SUPERCYBORG")
	End
	
	Void GoHome()
		gv.gstring.Situatie_In_Het_Huis_Van_Wendicka="Final"
		Map.GoToMap("Excalibur - Home","LAYERLESS","Voordeur")
		If !Done.Excalibur_EnterHome_During_Final_Mission
			Ach.Award("BONUS_HOME")
			Party.GiveEXP(1500)
		End
	End
	#endregion
	
	#region 007 - Camelot - Town Square
	Void HideSecret()
		Map.HideByLabel("SECRET")
	End
	
	Void ShowSecret()
		Map.ShowByLabel("SECRET")
	End
	
	Void OPEN_SECRET_1()
		CSay("Check to open secret")
		If Has_Key.Red || Unlocked_Floor["#008"]
			CSay("= Should open if not opened yet")
			If Map.HasTag("OPEN_RED")
				CSay("= Open Sesame")
				Party.GiveEXP(9000 div __skill)
				Map.Kill("OPEN_RED",true)
			End
		End
	End
	
	Void ToSecret1()
		Self.LeftTrans=False
		Beam.Quick("PLAYER",False,True)
		Map.GoToLayer("SECRET1","Start")		
	End		
	#endregion
	
	#region Secret Area 1
	Void BossSecret1()
		gv.gbool.CombatMusicForcedSet = true
		StartCombat.Foe("Boss/HWSNBN",math.floor(Map.Level*({0.50,0.95,1})[__skill]))
		StartCombat.Tune = "Music/specialboss/Back to Darkness.ogg"
	End
	
	Void Nova()
		If Done.GOT_RISING_NOVA
			Return 
		End
		Ach.Award("BONUS_NOVA")
		If __skill!=3 
			Party.GiveEXP(6000/__skill)
		End
	End
	#endregion
	
	#region 010 - Guinevere
	Void ToU()
		//Player.StopMoving()
		Player.Reloc("PlayU")
		Map.SetObj("PLAYER","Dominance",75)
		Map.SetObj("UBD","Impassible",True)
		Map.SetObj("UBU","Impassible",True)
		Map.SetObj("UB","ForcePassible",True)
		Map.ReMap()
	End
	
	Void ToD()
		//Player.StopMoving()
		Player.Reloc("PlayD")
		Map.SetObj("PLAYER","Dominance",20)
		Map.SetObj("UBD","Impassible",False)
		Map.SetObj("UBU","Impassible",False)
		Map.SetObj("UB","ForcePassible",False)
		Map.ReMap()
	End
	
	Void Boss10()
		If __boss010
			Return
		End
		Player.StopWalking()
		Schedule.Add("PostBoss010")
		StartBoss("Gold Killer Droid","Music/Dungeon/Spiedkiks_-_05_-_Freak_Boutique.ogg")	
	End
	
	Void PostBoss010()
		Map.Kill("Boss10Obj",True)
		Party.GiveEXP(10000 div ((__skill * Caps.Cycle) * 25))
		Aurina.Rate += (120/__skill)
	End
	#endregion
	
	#region 014 - Weapon Storage
	Void ToSecret2()
		Player.StopWalking()
		Player.WalkTo("Geheimpje")
		Beam.Quick("PLAYER",False,True)
		Map.GoToLayer("SECRET2","Start")
	End
	
	Void Show_KRed()
		Map.ShowByLayer("K_RED")
	End
	#endregion
	
	#region Secret 2 - The secret labyrinth of "The Mole"
	Void TalkLab()
		If !Done.Discovered_LabOfTheMole_Excalibur
			PPop.Pop("LAB","South")
			MapText("LAB")
			PPop.UnPop()
			Party.GiveEXP(6000 div __skill)
			// Unlock Black Hole Dweller
			Hawk.Add("Start","Black Hole","Core","BlackHoleDweller","BLACKHOLEDWELLER")
		End
	End
	#endregion
	
	#region 015 - Medical Department
	Void HideDead015()
		Map.HideByLabel("DEAD")
	End
	
	Void FightMcLeen()
		PPop.Pop("Mac","West")
		MapText("MCLEEN1")
		Schedule.Add("McLeen_Post")
		//Lua.error("Fight McLeen not yet implemented")
		gv.gstring.Johnson = "Ashley"
		RPGChar.Johnson.Name = "Ashley"
		StartBoss("McLeen","Music/Combat/SpecialBoss/GeorgeMcLeen.ogg")		
	End	
	
	Void McLeen_Post()
		// If the fight ended because Crystal was the last one standing
		If gv.gbool.CrystalMcLeenBeamOut
			Music.PopVoid()
			gv.gbool.CrystalMcLeenBeamOut=False
			For ch in each {"Wendicka","Yirl","Xenobi","Foxy","Johnson"}
				Map.Kill("PartyPopped_"..ch)
			End
			Map.ShowByLabel("DEAD")
			MapText("MCLEEN.CRYSTALALONE1")
			Beam.Quick("PartyPopped_Crystal",true,true)
			MapText("MCLEEN.CRYSTALALONE2")
			Spawn.Wipe()
			Return
		End
		MapText("MCLEEN2")
		PPop.UnPop()
		Party.GiveEXP(6000)
		Ach.Award("BOSS_MCLEEN")
		__hawk="MCLEENDEAD"
		Map.Kill("FightMcLeen",True)
		Map.Kill("McLeen",True)
	End
	#endregion
	
	#region 020 - High Security
	Void Goddess()
		Party.GiveEXP(3500)
		Map.GoToMap("Excalibur - Final Boss","#020","Start")
	End
	#endregion
	
	#region Transporter	
	Get Bool MR
		Return Events.MouseHitRight()
	End

	Get Bool ML
		Return Events.MouseHitLeft()
	End
	
	Get Int MX
		Return Events.MouseX()
	End
	
	Get Int MY
		Return Events.MouseY()
	End
	
	Bool LeftTrans = False
	
	Void LeaveTrans()
		LeftTrans=true
	End
		
	Void Transporter()
		Static Table XTRA = {"Save Game","Back to Hawk","Cancel"}
		String Lay = Map.Layer
		Int ILay = Lua.tonumber(right(Lay,#Lay-1)) || 0
		Int XW = Screen.W Div (#XTRA + 1)		
		if !LeftTrans
			If JohnsonJoined && gv.gbool.The1stTimeJohnsonLeave &&  (!Done.The1stTimeJohnsonBack)
				MapText("JOHNSON_BACK")
			End		
			Return
		End
		Switch Map.Layer
			Case "SECRET1"
				Player.Reloc("Start")
			Case "SECRET2"
				Player.Reloc("Trans.Spot.FET2")
				//Lua.error("Exit for secret 2 not yet scripted")
			Default
				Player.Reloc("Trans.Spot.F"..right(Map.Layer,#(Map.Layer)-1))
			End
		Player.Wind="South"
		LeftTrans=true
		If !Done.Excalibur_FirstFloor_Hawk_Set
			Hawk.Add("F001","Excalibur",Lua.Neil.Globals.MScript.Names["#001"],"Excalibur - Final","#001")
		End
		If Has_Key.Red && Map.Layer!="#020" && Map.Layer!="SECRET1" && Map.Layer!="SECRET2"
			CSay("Red Card Used To Unlock Next Floor")
			Int L = Lua.tonumber(right(Lay,#Lay-1)) || 0
			Lua.assert(L>0,"Layer number catchup failed!")
			Int NL = L+1
			String NLS = sprintf("#%03d",NL)
			Unlocked_Floor[sprintf("#%03d",NL)]=True
			If NL<=10
				Hawk.Add(sprintf("F%03d",NL),"Excalibur",Lua.Neil.Globals.MScript.Names[NLS],"Excalibur - Final",NLS)
			Else
				Hawk.Add(sprintf("F%03d",NL),"Excalibur",Lua.Neil.Globals.MScript.Names[NLS],"Excalibur - Final - 2",NLS)
			End			
			CSayF("Floor %d has been unlocked",NL)
			Has_Key.Red = False
		Else
			CSayF("Unlock new rejected: Red Card: %s; Floor: %s ",lua.tostring(Has_Key.Red),Map.Layer)			
		End
		Events.Flush()
		Repeat
			Events.Poll()
			Graphics.Cls()
			__Ember
			Fnt.Text("Navigation system Hawk",Screen.W div 2,1,2,0)
			If MR || Events.KeyHit(27)
				Return
			End
			For i=1,20
				String Tag = sPrintF("#%03d",i)
				Static Int W = (Screen.W div 2)
				Static Int H = 30
				Int X = (((i-1) div 10))*W
				Int Y = (((i-1) % 10)*30)+75
				If Unlocked_Floor[Tag]
					__SkyBlue
					If i==ILay
						__Ember
					ElseIf MX>X && MX<X+Sft.TextWidth(Names[Tag]) && MY>Y && MY<Y+H
						__Cyan
						If ML
							Beam.Quick("PLAYER",false,true)
							Map.HideObj("PLAYER")
							If (ILay<=10 && i<=10) || (ILay>10 && i>10)
								Map.GoToLayer(sprintf("#%03d",i),sprintf("Trans.Spot.F%03d",i))
							Elseif (i<=10)
								Map.GoToMap("Excalibur - Final",sprintf("#%03d",i),sprintf("Trans.Spot.F%03d",i))
							Else
								Map.GoToMap("Excalibur - Final - 2",sprintf("#%03d",i),sprintf("Trans.Spot.F%03d",i))
							End
							Events.Flush()
							Return
						End
					End
					SFt.Text(Names[Tag],X,Y)
				Else
					__Red
					SFt.Text(sprintf("<< Locked:%s >>",Tag),X,Y)
				End
			End
			For i,feat In iPairs(XTRA)
				//If (MY>SCREEN.H-50) && (MX>((i-1)*XW)-(XW div 4)) && (MX<((i+1)*XW)-(XW div 4))
				Int TW = Fnt.TextWidth(feat)
				If (MY>SCREEN.H-50) && (MX>(i*XW)-(TW div 2)) && (MX<(i*XW)+(TW div 2))
					__Cyan
					If ML
						Switch i
							Case 1
								MSave.ToSave()
								Return
						    Case 2
						    	If JohnsonJoined
						    		If !Done.The1stTimeJohnsonLeave
						    			MapText("JOHNSON_LEAVE")
						    		End
						    		For I=1,6
						    			If RPGParty[I]=="Johnson"	
						    				RPGParty[I]="Rolf"
						    			End
						    			Party.GrabLevel("Rolf",RPGChar.Rolf.Stat.Level)
						    		End
						    	Else
						    		For I,Ch in ipairs{"Wendicka","Crystal","Yirl","Foxy","Xenobi","Rolf"}
						    			RPGParty[I]=Ch
						    		End
						    	End
						    	Beam.Quick("PLAYER",false,true)
						    	Map.GoToMap("Hawk","BRIDGE","Scotty")
						    	//Map.MCall("Trans.Scotty","nil")
						    	//Lua.error("Beaming back to Hawk not yet properly scripted")
						    	Return
						    Case 3
						    	Return
						    Default
						    	Lua.error("Unknown XPick: "..i)
						End
					End
				Else
					__SkyBlue
				End
				Fnt.Text(feat,i*XW,Screen.H,2,1)
			End
			__White
			Mouse.Draw(MX,MY)
			Graphics.Flip()
			FPS.WaitMinTicks()
		Forever
	End
	#endregion
	
	#region Doors
	Table GetDoors(string Color)
		// Should have used a class, but I was a bit lazy this time.
		CSayF("Checking layer %s for door %s",Map.Layer,Color)
		Color = Color:upper()
		Table Ret 
		Ret = {}
		If Map.HasTag(Color.."_LINKS") && Map.HasTag(Color.."_RECHTS")
			Ret.Available = True
			Ret.Color = Color
			Ret.IniL = Map.ObjInt(Color.."_LINKS" ,"X")
			Ret.IniR = Map.ObjInt(Color.."_RECHTS","X")
			Ret.Open = !Map.HasTag("OPEN_"..Color)
			If Ret.Open
				Ret.Pos = 30
				Map.SetObj(Color.."_LINKS" ,"Impassible",False)
				Map.SetObj(Color.."_RECHTS","Impassible",False)
				Map.RemAp()
				CSay("= Door open by default!")
			Else
				Map.HideByLabel("K_"..Color)
				Ret.Pos = 0				
			End
			Map.ShowByLabel("BASE")
			CSay("= Door activated")
		Else
			Ret.Available = False
			CSay("= Door NOT available!")
		End
		Return Ret
	End
	
	Void OPEN_RED()
		If Has_Key.Red
			Map.Kill("OPEN_RED",true)
			Has_Key.Red = False
			If Map.Layer=="SECRET1"
				Map.ShowByLabel("K_RED")
			End
			Party.GiveEXP(10000)
		End
	End

	Void OPEN_GREEN()
		If Has_Key.Green
			Map.Kill("OPEN_GREEN",true)
			Has_Key.Green = False
			Map.ShowByLabel("K_GREEN")
			Party.GiveEXP(250)
		End
	End

	Void OPEN_BLUE()
		if Has_Key.Blue
			Map.Kill("OPEN_BLUE",true)
			Has_Key.Blue = False
			Map.ShowByLabel("K_BLUE")
			Party.GiveEXP(250)
		End
	End
	
	Void OPEN_GOLD()
		if Has_Key.Gold
			Map.Kill("OPEN_GOLD",true)
			Has_Key.Gold = False
			Map.ShowByLabel("K_GOLD")
			Party.GiveEXP(250)
		End
	End
	
	Void Update()
		Static Table Cards = {"RED","GREEN","BLUE","GOLD"}
		Static Table UpdatedDoors = {}
		Static Int Teller
		//UpdatedDoors[Map.Layer] = UpdatedDoors[Map.Layer] || {}
		If !UpdatedDoors[Map.Layer]
			CSayF("Create Door Table for layer %s",Map.Layer)
			UpdatedDoors[Map.Layer] = {}
			For i,C in iPairs(Cards)
				UpdatedDoors[Map.Layer][i] = GetDoors(C)
			End
		End
		Teller = (Teller+1) % 50
		For Deur In Each(UpdatedDoors[Map.Layer])
			If Deur.Available
				If Teller==0
					Deur.Open = !Map.HasTag("OPEN_"..Deur.Color)				
					End
				If Deur.Open
					If Deur.Pos<31
						Deur.Pos++
						Map.SetObj(Deur.Color.."_LINKS" ,"Impassible",False)
						Map.SetObj(Deur.Color.."_RECHTS","Impassible",False)
						Map.SetObj(Deur.Color.."_LINKS" ,"X",Deur.IniL-Deur.Pos)
						Map.SetObj(Deur.Color.."_RECHTS" ,"X",Deur.IniR+Deur.Pos)
						Map.Remap()
					End
				End	
			End
		End		
	End
	#endregion

	Void Draw()
		Static Table Cards = {"Red","Green","Blue","Gold"}
		Static Int CSX = (Screen.W div 2) - 40
		__SkyBlue
		Fnt.DarkText(Names[Map.Layer] || "???",Screen.W div 2,5,2,0)
		For i,c In Pairs(Cards)
			If Has_Key[c]
				Switch i
					Case 1
						Graphics.Color(255,0,0)
					Case 2
						Graphics.Color(0,255,0)
					Case 3
						Graphics.Color(0,0,255)
					Case 4
						Graphics.Color(255,180,0)
					Default
						Lua.error("Key color error")
				End
			Else
				Graphics.Color(64,64,64)
			End
			Card.Draw(CSX+(i*20),80)
		End
		Switch Map.Layer
			Case "#006"
				Map.SetObj("Conveyor","InsertY",(Map.ObjInt("Conveyor","InsertY")+1)%300)
			Case "#012"
				Static Int Jerry = 0
				Jerry = (Jerry+1) % 40
				Map.SetObj("JerrycanTrack","InsertX",40-Jerry)
			case "#014"
				If Has_Key.Red && Map.HasTag("OPEN_RED")
					Map.Kill("OPEN_RED",True)
				End
			case "#018"
				// Reference from original Lua code in LAURA II
				// -- Define quick refs
				//        local o = Maps.Obj.Obj('CONV_BAG')
				//       local mt = 'Coordinate Marker Up'
				//       local mrk = Maps.Obj.Obj(mt)
				//       local lt = 'Len'
				//       local lnm = Maps.Obj.Obj(lt)
                //            -- Corrections
                //            local hx,hy = -5,5
                //            local exy = 100
                //            local maxy = lnm.Y + lnm.H + exy
                //            local miny = mrk.Y
                //            local minx = mrk.X
                //            -- Animate
                //            if o.Y<miny then o.X = minx + maxy + hx; o.Y = miny + maxy + hy end -- Yes, x is set with maxy too. After all we got a perfect 45 degree angle.
                //            o.X = o.X - 1
                //            o.Y = o.Y - 1
                // Since Apollo has a completely different set up the stuff above will NOT work, so let's not even try!
                // But it does point me the way to go, eh?
                //string mt = "Coordinate Marker Up"
				//string lt = "Len"
				//static int hx  = -5
				//static int hy  = 5
				//static int exy = 100
				//int maxy = Map.ObjInt(lt,"Y") + Map.ObjInt(lt,"H") + exy
				//int miny = Map.ObjInt(mt,"Y")
				//int minx = Map.ObjInt(mt,"X")
                var o = CONV_BAG
                __white
                //Fnt.Text(sprintf("min(%d,%d), max:%d",minx,miny,maxy),5,40)
                if o.Y<0 
                	//miny 
                	//o.X = minx + maxy + hx
                	//o.Y = miny + maxy + hy
                	O.X = 400 - 16
                	O.Y = 288
                end
                O.X--
                O.Y--
			Default
		End
		__White
	End
	
	Void Load()
	End
	
	CONSTRUCTOR	
		CSay("Excalibur!")
		InitNames()
		ReplaceRolfWithJohnson()
		ZA.TabEnter{"Transporter","EntranceWalkSouth","ToDungeon","TerugNaarHangar","OPEN_RED","OPEN_GREEN","OPEN_BLUE","OPEN_GOLD","Admiraal","Boss005","GoHome"}
		ZA.TabEnter{"HideSecret","ShowSecret","OPEN_SECRET_1","ToSecret1","NOVA","ToU","ToD","Boss10","ToSecret2","TalkLab","HideDead015","FightMcLeen", "Goddess","Show_KRED"}
		ZA.Leave("Transporter","LeaveTrans")
		Map.AllowQuitSave=false
		Chat = QM_Chat
		For c=1,__chats
			String Tag = sprintf("Chat[%d]",c)
			ZA.Enter("Chat"..c,Tag)
			ZA.Enter("CHAT"..c,Tag)
		End
	End

end