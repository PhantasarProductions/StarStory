// License Information:
// **********************************************
// 
// src/Tricky Script/Script/MapScript/Excalibur - Final.neil
// (c) Jeroen Broks, 2021, All Rights Reserved.
// 
// This file contains material that is related
// to a storyline that is which is strictly
// copyrighted to Jeroen Broks.
// 
// This file may only be used in an unmodified
// form with an unmodified version of the
// software this file belongs to.
// 
// You may use this file for your study to see
// how I solved certain things in the creation
// of this project to see if you find valuable
// leads for the creation of your own.
// 
// Mostly this file comes along with a project
// that is for most part released under an
// open source license and that means that if
// you use that code with this file removed
// from it, you can use it under that license.
// Please check out the other files to find out
// which license applies.
// This file comes 'as-is' and in no possible
// way the author can be held responsible of
// any form of damages that may occur due to
// the usage of this file
// 
// 
// **********************************************
// 
// version: 21.05.04
// End License Information

#use "Libs/xmath"
#use "Script/Use/Anyway"


#MKL_Version "Star Story - Excalibur - Final.neil" "21.05.04"
#MKL_Lic     "Star Story - Excalibur - Final.neil" "Phantasar Closed License"

#macro JohnsonJoined gv.gbool.AdmiralJohnsonJoinedTheParty

QuickMeta Crystal_Reload
	Index
		return gv.gint["EXC_CRYSTAL_RELOAD_"..Map.Layer]
	End
	
	NewIndex
		gv.gint["EXC_CRYSTAL_RELOAD_"..Map.Layer] = value
	End
End

QuickMeta Has_Key
	Index
		Return gv.gbool["EXC_HASKEY_"..(Key:upper()).."_"..Map.Layer]
	End
	
	NewIndex
		gv.gbool["EXC_HASKEY_"..(Key:upper()).."_"..Map.Layer] = Value
	End
End

QuickMeta Unlocked_Floor
	Index
#if fucked
		If gv.gbool["EXC_UNLOCKED_FLOOR_"..Key]
			Return True
		End
		int KN = Lua.tonumber(right(Key,#key-1)) || 0
		int LN = Lua.tonumber(right(Map.Layer,#Map.Layer-1)) || 0
		//CSayF("KN=%d; LN=%d; Compare=%s; Red:%s",LN,KN,lua.tostring(LN+1==KN),lua.tostring(Has_Key.Red)) // DEBUG ONLY!
		bool u = gv.gbool[sprintf("EXC_HASKEY_RED_%03d",KN-1)]
		//If (LN+1==KN && Has_Key.Red) || Key=="#001"
		If u || Key=="#001"
			gv.gbool["EXC_UNLOCKED_FLOOR_"..Key] = True
			Has_Key.Red = False
			CSayF("Unlocked floor: %s",Key)
			If KN<=10
				Hawk.Add(sprintf("F%03d",KN),"Excalibur",Lua.Neil.Globals.MScript.Names[Map.Layer],"Excalibur - Final",Key)
			Else
				Hawk.Add(sprintf("F%03d",KN),"Excalibur",Lua.Neil.Globals.MScript.Names[Map.Layer],"Excalibur - Final 2",Key)
			End
			Return True
		End
		Return False
	End
#fi
		Return gv.gbool["EXC_UNLOCKED_FLOOR_"..Key] || Key=="#001"
	End
	NewIndex
		gv.gbool["EXC_UNLOCKED_FLOOR_"..Key] = value
	End
End

Group MScript

	ReadOnly Var Yeah = Audio.LoadNew("Audio/SFX/Yeah/Yeah.ogg","EXCALIBUR_YEAH")
	ReadOnly Var Card = Image.LoadNew("GFX/Textures/Excalibur/Keycard.png","EXCALIBUR_KEYCARD")
	
	ReadOnly Var Mouse = Image.Obtain("Mouse")

	Table Names
	ReadOnly Var Fnt = ImageFont.Obtain("BIGTEXT")  
	ReadOnly Var SFt = ImageFont.Obtain("BOXTEXT")

	#region General stuff
	Void ReplaceRolfWithJohnson()
		If JohnsonJoined
			If !Done.The1stTimeJohnsonBack
				MapText("JOHNSON_BACK")
			End		
			For I=1,6
				If RPGParty[I]=="Rolf"
					RPGParty[I]="Johnson"
				End
			End
		Else
			For I,Ch in ipairs{"Wendicka","Crystal","Yirl","Foxy","Xenobi",""}
				RPGParty[I]=Ch
			End
		End
	End		
	
	Void InitNames()
		Names = {}
		Names["#000"] = "Secret Hangar"
		Names["#001"] = "Hidden layer"
		Names["#002"] = "Security department"
		Names["#003"] = "Lady of the Lake - Artificial Park"
		Names["#004"] = "Coder Section - Apollo" // Used to be 'LAURA'
		Names["#005"] = "Residential Area - Galahad"
		Names["#006"] = "Junk collection area - Donald"
		Names["#007"] = "Camelot - Town Square"
		Names["#008"] = "Coder Section - C++" // Used to be 'Blitz'
		Names["#009"] = "Maintenance Deck"
		Names["#010"] = "Residential Area - Guinevere"
		Names["#011"] = "Crystal's bar"
		Names["#012"] = "Junk collection area - Geert"
		Names["#013"] = "Casino"
		Names["#014"] = "Weapon Storage"
		Names["#015"] = "Medical department"
		Names["#016"] = "Coder Section - Neil" // Used to be 'Lua'
		Names["#017"] = "Playground"
		Names["#018"] = "Junk collection area - Marine"
		Names["#019"] = "Staff department"
		Names["#020"] = "High Security Department"
		Names.SECRET1 = "Secret Science Lab"
		Names.SECRET2 = "Secret labyrinth of \"the Mole\""        
    End
    
    Var RL
    Get Int Reloads
    	If !Done["EXC_AMMO_INIT_"..Map.Layer]
    		Switch __Skill
    			case 1    				
    				RL = RL || {}
    				RL[Map.Layer] = RL[Map.Layer] || 1000
    			case 2 
    				RL = Crystal_Reload
    				RL[Map.Layer] = math.random(20,250)
    			case 3
    				RL = Crystal_Reload
    				RL[Map.Layer]= math.random(1,5)
    			default
    				Lua.error("Skill error on reload")
    		End    				    			
    	End
    	return RL[Map.Layer]
    End
    
    Set Int Reloads
    	RL[Map.Layer] = value
    End
    
    Void NPC_AMMO()
    	Bool FilledAny
    	If Reloads<=0
    		MapText("CRYSTAL.EMPTY")
    		Return
    	End
    	For AT in RPGChar.Crystal.List.ARM.Each
    		Var Ammo = RPGChar.Crystal.Points["ARM.AMMO."..AT]
    		FilledAny = FilledAny || (Ammo.Have<Ammo.Maximum)
    		Ammo.Have=Ammo.Maximum
    	End
    	If FilledAny
    		MapText("CRYSTAL.REFILL")
    		Reloads--
    		If (Reloads>1)
    			Schedule.Add(sprintf("MSG: %d reloads left at this refill point!",Reloads))
    		ElseIf (Reloads==1) 
    			Schedule.Add("MSG:Warning only one more refill at this point!")
    		Else
    			Schedule.Add("MSG:Warning! This refill point is now empty")
    		End
    	Else
    		MapText("CRYSTAL.FULL")    		
    	End
    End    
    #endregion
    
    #region Keys
    Void GetKey(string Color)
    	String Tag = "NPC_"..(Color:upper())
    	Int KeyX = Map.ObjInt(Tag,"X")
    	Int KeyY = Map.ObjInt(Tag,"Y")
    	Int LN = Lua.tonumber(right(Map.Layer,#Map.Layer-1)) || 0
    	If xMath.Pythagoras(KeyX,KeyY,Player.X,Player.Y)>64
    		CSay("Player to far away from key. Request rejected")
    		Return
    	End
    	Yeah.Play()
    	Party.GiveEXP(LN * 250)
    	Has_Key[Color] = True
    	Map.Kill(Tag,true)
    End
    
    Void NPC_Red()
    	GetKey("Red")
    End
    
    Void NPC_Blue()
    	GetKey("Blue")
    End
    
    Void NPC_Green()
    	GetKey("Green")
    End
    
    Void NPC_Gold()
    	GetKey("Gold")
    End
    #endregion
    
	
	#region 000 - Hangar
	Void EntranceWalkSouth()
		Self.LeftTrans = true
		Int DL = Map.ObjInt("EntranceLeft","X")
		Int DR = Map.ObjInt("EntranceRight","X")
		Map.SetObj("EntranceLeft","X",DL-32)
		Map.SetObj("EntranceRight","X",DR+32)
		Map.SetObj("BlockStart","Impassible",false)
		Map.ReMap()
		Player.WalkTo("BeginDungeon")
		If !Done.Arrival_Excalibur_FinalMission_First_Time
			MapText("WENDICKA_WELCOMEBACK")
		End
		For i=32,0,-1
			Graphics.Cls()
			Map.DrawScreen()
			Graphics.Flip()
			FPS.WaitMinTicks()
			Map.SetObj("EntranceLeft","X",DL-i)
			Map.SetObj("EntranceRight","X",DR+i)
		End
		Map.SetObj("BlockStart","Impassible",true)
		Map.ReMap()
	End
	
	Void ToDungeon()
		Map.GoToLayer("#001","BeginMetNummer1")
	End
	
	Void TerugNaarHangar()
		Map.GoToLayer("#000","From001")
	End
	#endregion
	
	
	#region Transporter	
	Get Bool MR
		Return Events.MouseHitRight()
	End

	Get Bool ML
		Return Events.MouseHitLeft()
	End
	
	Get Int MX
		Return Events.MouseX()
	End
	
	Get Int MY
		Return Events.MouseY()
	End
	
	Bool LeftTrans = False
	
	Void LeaveTrans()
		LeftTrans=true
	End
		
	Void Transporter()
		Static Table XTRA = {"Save Game","Back to Hawk","Cancel"}
		String Lay = Map.Layer
		Int ILay = Lua.tonumber(right(Lay,#Lay-1)) || 0
		Int XW = Screen.W Div (#XTRA + 1)		
		if !LeftTrans
			Return
		End
		Player.Reloc("Trans.Spot.F"..right(Map.Layer,#(Map.Layer)-1))
		Player.Wind="South"
		LeftTrans=true
		If !Done.Excalibur_FirstFloor_Hawk_Set
			Hawk.Add("F001","Excalibur",Lua.Neil.Globals.MScript.Names["#001"],"Excalibur - Final","#001")
		End
		If Has_Key.Red && Map.Layer!="#020"
			CSay("Red Card Used To Unlock Next Floor")
			Int L = Lua.tonumber(right(Lay,#Lay-1)) || 0
			Lua.assert(L>0,"Layer number catchup failed!")
			Int NL = L+1
			String NLS = sprintf("#%03d",NL)
			Unlocked_Floor[sprintf("#%03d",NL)]=True
			If NL<=10
				Hawk.Add(sprintf("F%03d",NL),"Excalibur",Lua.Neil.Globals.MScript.Names[NLS],"Excalibur - Final",NLS)
			Else
				Hawk.Add(sprintf("F%03d",NL),"Excalibur",Lua.Neil.Globals.MScript.Names[NLS],"Excalibur - Final 2",NLS)
			End			
			CSayF("Floor %d has been unlocked",NL)
			Has_Key.Red = False
		Else
			CSayF("Unlock new rejected: Red Card: %s; Floor: %s ",lua.tostring(Has_Key.Red),Map.Layer)			
		End
		Events.Flush()
		Repeat
			Events.Poll()
			Graphics.Cls()
			__Ember
			Fnt.Text("Navigation system Hawk",Screen.W div 2,1,2,0)
			If MR || Events.KeyHit(27)
				Return
			End
			For i=1,20
				String Tag = sPrintF("#%03d",i)
				Static Int W = (Screen.W div 2)
				Static Int H = 30
				Int X = (((i-1) div 10))*W
				Int Y = (((i-1) % 10)*30)+75
				If Unlocked_Floor[Tag]
					__SkyBlue
					If i==ILay
						__Ember
					ElseIf MX>X && MX<X+Sft.TextWidth(Names[Tag]) && MY>Y && MY<Y+H
						__Cyan
						If ML
							Beam.Quick("PLAYER",false,true)
							Map.HideObj("PLAYER")
							If (ILay<=10 && i<=10) || (ILay>10 && i>10)
								Map.GoToLayer(sprintf("#%03d",i),sprintf("Trans.Spot.F%03d",i))
							Elseif (i<=10)
								Map.GoToMap("Excalibur - Final",sprintf("#03d",i),sprintf("Trans.Spot.F%03d",i))
							Else
								Map.GoToMap("Excalibur - Final - 2",sprintf("#03d",i),sprintf("Trans.Spot.F%03d",i))
							End
							Events.Flush()
							Return
						End
					End
					SFt.Text(Names[Tag],X,Y)
				Else
					__Red
					SFt.Text(sprintf("<< Locked:%s >>",Tag),X,Y)
				End
			End
			For i,feat In iPairs(XTRA)
				//If (MY>SCREEN.H-50) && (MX>((i-1)*XW)-(XW div 4)) && (MX<((i+1)*XW)-(XW div 4))
				Int TW = Fnt.TextWidth(feat)
				If (MY>SCREEN.H-50) && (MX>(i*XW)-(TW div 2)) && (MX<(i*XW)+(TW div 2))
					__Cyan
					If ML
						Switch i
							Case 1
								MSave.ToSave()
								Return
						    Case 2
						    	If JohnsonJoined
						    		If !Done.The1stTimeJohnsonLeave
						    			MapText("JOHNSON_LEAVE")
						    		End
						    		For I=1,6
						    			If RPGParty[I]=="Johnson"	
						    				RPGParty[I]="Rolf"
						    			End
						    		End
						    	Else
						    		For I,Ch in ipairs{"Wendicka","Crystal","Yirl","Foxy","Xenobi","Rolf"}
						    			RPGParty[I]=Ch
						    		End
						    	End
						    	Beam.Quick("PLAYER",true,true)
						    	Map.GoToMap("Hawk","BRIDGE","Scotty")
						    	//Map.MCall("Trans.Scotty","nil")
						    	//Lua.error("Beaming back to Hawk not yet properly scripted")
						    	Return
						    Case 3
						    	Return
						    Default
						    	Lua.error("Unknown XPick: "..i)
						End
					End
				Else
					__SkyBlue
				End
				Fnt.Text(feat,i*XW,Screen.H,2,1)
			End
			__White
			Mouse.Draw(MX,MY)
			Graphics.Flip()
			FPS.WaitMinTicks()
		Forever
	End
	#endregion

	Void Update()		
	End

	Void Draw()
		Static Table Cards = {"Red","Green","Blue","Gold"}
		Static Int CSX = (Screen.W div 2) - 40
		__SkyBlue
		Fnt.DarkText(Names[Map.Layer] || "???",Screen.W div 2,5,2,0)
		For i,c In Pairs(Cards)
			If Has_Key[c]
				Switch i
					Case 1
						Graphics.Color(255,0,0)
					Case 2
						Graphics.Color(0,255,0)
					Case 3
						Graphics.Color(0,0,255)
					Case 4
						Graphics.Color(255,180,0)
					Default
						Lua.error("Key color error")
				End
			Else
				Graphics.Color(64,64,64)
			End
			Card.Draw(CSX+(i*20),80)
		End
		__White
	End
	
	Void Load()
	End
	
	CONSTRUCTOR	
		CSay("Excalibur!")
		InitNames()
		ReplaceRolfWithJohnson()
		ZA.TabEnter{"Transporter","EntranceWalkSouth","ToDungeon","TerugNaarHangar"}
		ZA.Leave("Transporter","LeaveTrans")
	End

end