// License:
// 	  src/Script/Script/Subs/SubParty.scyndi
// 
// 	  Version: 25.01.04 I
// 	
// 	  Copyright (C) 2020, 2021, 2024, 2025 Jeroen Petrus Broks
// 	
// 	  ===========================
// 	  This file is part of a project related to the Phantasar Chronicles or another
// 	  series or saga which is property of Jeroen P. Broks.
// 	  This means that it may contain references to a story-line plus characters
// 	  which are property of Jeroen Broks. These references may only be distributed
// 	  along with an unmodified version of the game.
// 
// 	  As soon as you remove or replace ALL references to the storyline or character
// 	  references, or any termology specifically set up for the Phantasar universe,
// 	  or any other univers a story of Jeroen P. Broks is set up for,
// 	  the restrictions of this file are removed and will automatically become
// 	  zLib licensed (see below).
// 
// 	  Please note that doing so counts as a modification and must be marked as such
// 	  in accordance to the zLib license.
// 	  ===========================
// 
// 
// 	  zLib license terms:
// 	
// 	  This software is provided 'as-is', without any express or implied
// 	  warranty.  In no event will the authors be held liable for any damages
// 	  arising from the use of this software.
// 
// 	  Permission is granted to anyone to use this software for any purpose,
// 	  including commercial applications, and to alter it and redistribute it
// 	  freely, subject to the following restrictions:
// 	
// 	  1. The origin of this software must not be misrepresented; you must not
// 	     claim that you wrote the original software. If you use this software
// 	     in a product, an acknowledgment in the product documentation would be
// 	     appreciated but is not required.
// 	  2. Altered source versions must be plainly marked as such, and must not be
// 	     misrepresented as being the original software.
// 	  3. This notice may not be removed or altered from any source distribution.
// End License

Script

#use "Libs/SCI/Sys"
#use "Libs/SCI/JCR6"
#use "Libs/SCI/Audio"
#use "Libs/SCI/Events"
#use "Libs/SCI/SString"
#use "Libs/SCI/Graphics"

#use "Script/Use/Link"
#use "Script/Use/Anyway"
#use "script/use/misc/classbox"
#use "Script/Use/Convert/RPG2Stat"
#use "Script/Use/Convert/ViesBah"
#use "Script/Use/Convert/Flow"

#use "libs/xmath"

#macro lvupend 315

group SubParty

	readonly table StatSubs = NewArray("BASE","POWERUP","UPGRADE","BUFF","END")
	readonly table Stats = NewArray("AP","Accuracy","Agility","Defense","Evasion","HP","Resistance","Strength","Will" )	
	readonly var Fnt = ObtainFont("BOXTEXT")
	readonly var LevelUp = ObtainImage("LEVEL_UP")
	readonly var AudioLevelUp = Audio.Obtain("AUDIO_LEVELUP")
	table ScLvUp = NewArray(0,0,0)
	int scrw = -1
	int scrh = -1
	
	get int bw
		return Graphics.w Div 4
	end
	
	get delegate ToNumber
		return Lua.tonumber
	end
	
	get delegate Error
		return Lua.error
	end
	
	void MakeBoxes()
		Box.Clear()		
		for i=0,3
			var t := new Box(i*bw,Graphics.H-100,bw,100,true)
			cout("Box created: (",t.x,",",t.y,")\t",t.w,"x",t.h,"\n")
		end
	end

	
	void GrabLevel(string tag,int level)
		string n := tag
		if tag == "UniWendicka"
			n = "Wendicka"
		end
		string dat := JCR6.GetString(sprintf("Data/LvStats/%s/%d",n,math.floor(level/100)))
		table tdat := XSplit(dat,"\n")
		int lvl = -100
		for line in each(tdat)
			if line!="" 
				// CSayF("%d:%d - Line: %s",lvl,level,line) // DEBUG ONLY!
				table ins := xsplit(line," ")
				switch ins[0]
					case "REM"
						// DO NOTHING!
					case "LEVEL"
						lvl = lua.tonumber(ins[1])
					default
						if prefixed(ins[0],"STAT.") 
							if lvl==level
								string st := right(ins[0],len(ins[0])-5)
								print("\t= "..st.." for "..tag.." is "..ins[1])
								RPGChar[Tag].Stat["BASE_"..st] = tonumber(ins[1])								
							end
						else
							error("Unknown instruction! >> "..line)
						end
				end
			end
		end
		RPGChar[tag].Points.HP.Have = RPGChar[tag].Points.HP.Maximum
	end

	void NewChar(string Tag,int level=1,string Name="")
		// Todo: Make sure all this is skipped if the character already exists!
		if (Name=="") 
			Name=Tag
		end
		print("Creating character:",Tag,Name)
		RPGChar.Create(Tag,Name)
		// Shoot?
		CSay("= Can this character shoot?")
		RPGChar[Tag].Data.CanShoot = Lua.tostring(prefixed(tag,"Uni") or tag=="Briggs" or tag=="Yirl")
		if tag=="Briggs"
			print("= Briggs is a guest")
			RPGChar.Briggs.Data.Guest = "true"
		else
			print("= "..Name.." is NOT a guest!")
			RPGChar[Tag].Data.Guest = "false"
		end
		// Inventory slots
		print("= Setting up inventory")
		for i=1,Caps.InventorySockets
			RPGChar[Tag].Data[sprintf("INVITEM%d",i)]=""
			RPGChar[Tag].Stat[sprintf("INVAMNT%d",i)]=0
		end
		// Statistics
		Print("= Setting the basic stat values")
		for st in Each(Stats)
			for sb in Each(StatSubs)
				RPGChar[Tag].Stat[sb.."_"..st] = 0
			end
			string formscript := "SUM:"..Tag
			for sb in Each(StatSubs)
				if sb!="END" 
					formscript += "."..sb.."_"..st
				end
				RPGChar[Tag].StatScript["END_"..st] = formscript
			end
		end
		RPGChar[Tag].Stat.AMMO = 0
		RPGChar[Tag].Stat.Level = level
		// A few basic lists
		table lists = { "ABL","LEARN","ABL_POWERUP","STATUSCHANGE" }
		if Tag=="Crystal"
			lists += "ARMS"
		end
		for lst in Each(lists)
			CSayF("= List checkup %s, should have no members: %d!",lst,RPGChar[Tag].List[lst].len)
		end
		// TODO: Script "END" stat!
		// Basis Points
		Print("= Setting the basic points")
		//RPGChar[Tag].Points.HP.MaxCopy = "END_HP"
		//RPGChar[Tag].Points.AP.MaxCopy = "END_AP"
		RPGChar[Tag].Points.HP.MaxCopy = "HP"
		RPGChar[Tag].Points.AP.MaxCopy = "AP"
		RPGChar[Tag].Points.AMMO.MaxCopy = "AMMO"		
		RPGChar[Tag].Points.EXP.Max = Caps.NeedEXP
		print("= Grabbing level: "..level)
		Lua.Scyndi.Class.SubParty.GrabLevel(Tag,level)
		print("= NEXT comes later!")
	end
	
	readonly table Portretten
	
	var GetPortret(string Tag)
		if not Portretten[Tag]			
			string File
			switch Tag
				case "UniWendicka"
					File = "GFX/PORTRET/Wendicka/Uniform.png"
				case "UniCrystal"
					File = "GFX/PORTRET/Crystal/Uniform.png"
				default
					File = "GFX/PORTRET/"..Tag.."/General.png"
			end
			Portretten[Tag] = LoadNewImage(File,"PORTRET_"..Tag)
			Portretten[Tag].Hot(5,Portretten[Tag].Height)
		end
		return Portretten[Tag]
	end
	
	var GetSmallPortrait(string sTag)
		string Tag := "MINI__"..sTag
		if not Portretten[Tag]			
			string File
			File = "GFX/Combat/GaugeIcons/"..sTag..".png"
			Portretten[Tag] = LoadNewImage(File,"GAUGEICON_HERO_"..sTag)
			//Portretten[Tag].Hot(5,Portretten[Tag].Height)
		end
		return Portretten[Tag]
	end

	Void CheckMaxLevel(String Tag,Int nlv)
		If nlv==10000
			String atg
			Switch Tag
				Case "UniWendicka"
					atg = "WENDICKA"
				Case "UniCrystal"
					atg = "CRYSTAL"
				Case "ExHuRU" "Rolf" "Johnson"
					atg = "EXHURU"
				Default
					atg = Tag:upper()
			End
			CSay("Max level: "..atg)
			Ach.Award("MAXLVL_"..atg)
		End	
	End
	
	void Boxes(string char)
		locextern self "Scyndi.Class.SubParty"
		if scrw!=Graphics.W && scrh!=Graphics.H
			Self.MakeBoxes()
			scrw = Graphics.W 
			scrh = Graphics.H
		end
		SetAlpha(255)
		Box.DrawAll()
		// Front row
		for i=0,2 //for i=1,3		
			if RPGParty[i]!=""
				string tag = RPGParty[i]
				int x:=i*bw //int x := (i-1)*bw
				int y := Graphics.H-100
				if char==tag
					plua alf = math.abs(math.floor(xmath.sin(Sys.Ticks/50)*255))
					//CSayF("Alpha: %03d / Tricks: %05d",alf,FPS.Ticks)
					Graphics.SetAlpha(alf)
				end
				self.GetPortret(tag).Draw(x,Graphics.h)
				Graphics.SetAlpha(255)
				Lua.assert(RPGChar[Tag].Points.HP.Maximum>0,sprintf("%d>%s's Hitpoints have a max of 0!",i,Tag)) 
				int g := math.floor((RPGChar[Tag].Points.HP.Have/RPGChar[Tag].Points.HP.Maximum)*255)
				// print(255-g,g,0," HP ",RPGChar[Tag].Points.HP.Have,RPGChar[Tag].Points.HP.Maximum)
				Graphics.Color((255-g),g,0)
				StatBar(x+150,y+30,(bw)-160,3,RPGChar[Tag].Points.HP.Have,RPGChar[Tag].Points.HP.Maximum)
				Fnt.Text("HP",x+100,y+10)
				Fnt.Text(RPGChar[Tag].Points.HP.Have,(x+bw)-10,y+10,1,0)
				if RPGChar[Tag].Points.AP.Maximum>0
					g = math.floor((RPGChar[Tag].Points.AP.Have/RPGChar[Tag].Points.AP.Maximum)*100)
					graphics.Color(0,g+80,g+155)
					StatBar(x+150,y+60,(bw)-160,3,RPGChar[Tag].Points.AP.Have,RPGChar[Tag].Points.AP.Maximum)
					Fnt.Text("AP",x+100,y+40)
					Fnt.Text(RPGChar[Tag].Points.AP.Have,(x+bw)-10,y+40,1,0)
				end
				__white
				if Tag!="Briggs" &&  RPGChar[Tag].Stat.Level<Caps.LevelCap
					StatBar(x+150,y+90,(bw)-160,3,RPGChar[Tag].Points.EXP.Have,RPGChar[Tag].Points.EXP.Maximum)
				end
				Fnt.Text("Lv",x+100,y+70)
				Fnt.Text(RPGChar[Tag].Stat.Level,(x+bw)-10,y+70,1,0)
				for j=1,3
					if Events.MouseHit(j)
						if Events.MouseX()>x and Events.MouseY()>y and Events.MouseX()<x+bw
							CSayF("CallBack(%s)::%s(%s)",Flow.Current,"Party.CallBack",lua.tostring(j),Tag)
							State.Call(Flow.Current,"Party.CallBack",""..j..",\""..Tag.."\"")
						end
					end
				end
				if ScLvUp[i]>0
					//Image.Rotate = math.min(lvupend,ScLvUp[i])
					Rotate := math.min(lvupend,ScLvUp[i])
					number scale = math.min(1,(ScLvUp[i]/lvupend))
					Graphics.Scale(scale,scale)
					//LevelUp.XDraw(x+100,y+30)
					LevelUp.DrawR(x+100,y+30)
					Graphics.Scale(1,1)
					//Image.Rotate = 0
					ScLvUp[i] = math.min(1000,ScLvUp[i]+2)%1000
				elseif (RPGChar[Tag].Points.EXP.Have>=RPGChar[Tag].Points.EXP.Maximum) && Tag!="Briggs" && RPGChar[Tag].Stat.Level<Caps.LevelCap
					int nlv := RPGChar[Tag].Stat.Level+1
					RPGChar[Tag].Stat.Level = nlv
					Self.GrabLevel(Tag,nlv)
					Self.CheckMaxLevel(Tag,nlv)
					RPGChar[Tag].Points.EXP.Have=0
					ScLvUp[i]=1
					AudioLevelUp.Play()
				end
			end
		end
		// Backrow
		int bx := 3*bw
		int y  := Graphics.H-70
		//for i=4,6
		for i=3,5
			if RPGParty[i]!=""
				string tag = RPGParty[i]
				//int x   := bx+((bw/4)*(i-3))
				int x   := bx+((bw/4)*i)
				var img := Self.GetSmallPortrait(tag)
				// Mini border
				__ember
				Graphics.Line(x-2,y+2,x-2,y+40)
				Graphics.Line(x+1,y-1,x-1,y+1)
				Graphics.Line(x+2,y-2,x+40,y-2)
				// Mini face
				__white
				if char==tag
					plua alf = math.abs(math.floor(xmath.sin(Sys.Ticks/50)*255))
					//CSayF("Alpha: %03d / Tricks: %05d",alf,FPS.Ticks)
					Graphics.SetAlpha(alf)
				end				
				img.Draw(x+10,y+10)
				Graphics.SetAlpha(255)
				// Level up
				if (RPGChar[Tag].Points.EXP.Have>=RPGChar[Tag].Points.EXP.Maximum) && Tag!="Briggs" && RPGChar[Tag].Stat.Level<Caps.LevelCap
					int nlv := math.min(10000,RPGChar[Tag].Stat.Level+1)
					RPGChar[Tag].Stat.Level = nlv
					Self.GrabLevel(Tag,nlv)
					RPGChar[Tag].Points.EXP.Have=0
					// No "LEVEL UP" mark or music box jingle. This happens in silence now!
					// The little debug line below will help me to see this happens though.
					CSayF("%s went level up and is now level %d",Tag,nlv)
					Self.CheckMaxLevel(Tag,nlv)
				end
				// Open/Close menu
				for j=1,3
					if Events.MouseHit(j)
						if Events.MouseX>x && Events.MouseY>y && Events.MouseX<x+40 && Events.MouseY<y+40
							CSayF("CallBack(%s)::%s(%s)   <<MINI>>",Flow.Current,"Party.CallBack",lua.tostring(j),Tag)
							State.Call(Flow.Current,"Party.CallBack",""..j..",\""..Tag.."\"")
						end
					end
				end
			end
		end
	end
	
	//CONSTRUCTOR	
	//	LevelUp.HotCenter()		
	//end


end

Init
	SubParty.LevelUp.HotCenter()
End
