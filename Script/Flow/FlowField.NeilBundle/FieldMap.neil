// License Information:
// src/Tricky Script/Script/Flow/FlowField.NeilBundle/FieldMap.neil
// Version: 20.10.14
// Copyright (C) 2020 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

#MKL_Version "Star Story - FieldMap.neil" "20.10.14"
#MKL_Lic     "Star Story - FieldMap.neil" "Phantasar zLib License"


class Clickable
	static readonly var List = new TLinkedList()
	static readonly var Buzz = Audio.Obtain("BUZZ")
	static int sid = 0
	static var Map	
	
	readonly delegate func
	readonly string param
	readonly int walkx
	readonly int walky
	readonly int id
	readonly string otag
	readonly string ltag
	
	static void TakeTreasure(string Tag)
		CSayF("%s should pick up item named %s",Map.Leader,Tag)
		// TODO: Actual Code
		var O = Map.CurLayer.Obj(tag)
		string Name = RPGChar[Map.Leader].Name
		bool Ok = Item.Give(O.GetData("ITEM_S"),Map.Leader)
		if Ok
			TMM.NewMsg(sprintf("%s picks up '%s'",Name,Item[O.GetData("ITEM_F")].Name),0,180,255)
			Map.Kill(Tag)
		else
			Buzz.Play()
			CSayF("%s is overstocked: %s > %s (%s)",Map.Leader,O.GetData("ITEM_S"),O.GetData("ITEM_F"),O.Tag)
			TMM.NewMsg(sprintf("%s is overstocked and cannot pick up '%s'",Name,Item[O.Data("ITEM_F")].Name),255,0,0)
		end
	end

	
	get var CLay
		return Map.KthuraMap.Layer(ltag)
	end
	
	get var CObj
		return CLay.Obj(otag)
	end
	
	CONSTRUCTOR(string ot,string lt,int wx, int wy,delegate af,string ap)
		sid++
		id = sid
		walkx=wx
		walky=wy
		func = af
		param = ap
		otag = ot
		ltag = lt
		CSayF("Clickable created %s::%s",ltag,otag)
	end
	
	bool Clicked(int x, int y)
		if Map.Layer!=ltag
			return false
		end
		if !CLay.HasTag(otag)
			return false
		end
		return CObj.PixInObj(x,y)
	end
	
	static void Create(string ot,string lt,a,b,c,d)
		static delegate t = Lua.type
		static delegate e = Lua.error
		static delegate ts = Lua.tostring
		if t(a) == "number" && t(b) == "number" 
			if t(c)=="string"
				List.AddLast(new Clickable(ot,lt,a,b,MapScript[c],d or ""))
			elseif t(c)=="function"
				List.AddLast(new Clickable(ot,lt,a,b,c,d or ""))
			else
				e("Create("..a..","..b..",<Invalid function reference>,"..tostring(d)..") Syntax error")
			end
		elseif t(a) == "string"
			var o = Map.CurLayer.Obj(a)
			Create(ot,lt,o.x,o.y,b,c)
		else
			e(sprintf("Clickable::Create(%s,%s,%s,%s,%s,%s): Illegal function call!",ot,lt,ts(a),ts(b),ts(c),ts(d)))
		end
	end
	
	static var Spot(var L,string tag)
		if L.HasTag(tag.."_SPOT")
			var o = Map.CurLayer.Obj(tag.."_SPOT")
			return {o.x,o.y}
		else
			var o = L.Obj(tag)
			return {o.x,o.y+32}
		end
	end
	
	static void Automate()
		static int M_id = -1
		List.Clear()
		for L in each(Map.KthuraMap.Layers)
			var Lay = Map.KthuraMap.Layer(L)
			table rItems = Map.LRItems
			for T in each(LAY.TagListArray)
				if prefixed(T,"NPC_MT_")
					var fuck = Spot(Lay,T)
					Create(T,L,fuck[1],fuck[2],MapText,T)
					CSayF("NPC: %s (MAPTEXT)",T)
				elseif prefixed(T,"NPC_")
					var fuck = Spot(Lay,T)
					Create(T,L,fuck[1],fuck[2],MapScript[T],T)
					CSayF("NPC: %s",T)
				elseif Prefixed(T,"Item ")
					CSayF("Item: %s",T)
					if math.random(1,(__skill+1)^2)!=1
						CSay("- SKIPPED!")
					else
						M_id++
						string ctag = sprintf("RANDOM_TREASURE_%08x",M_id)
						CSayF("- Tagged: %s",ctag)
						var O = Lay.NewObject("Obstacle",ctag)
						var S = Lay.Obj(T)
						Map.KthuraMap.Remap()
						string shTag = rItems[math.random(1,#rItems)]
						string itTag = "ITM_"..shtag
						//O.Data["ITEM_F"] = itTag
						//O.Data["ITEM_S"] = shTag
						O.SetData("ITEM_F",itTag)
						O.SetData("ITEM_S",shTag)
						o.Texture = Item[itTag].IconFile
						O.X = S.X
						O.Y = S.Y
						O.Dominance = S.Dominance
						O.Labels = S.Labels
						Map.KthuraMap.Remap()
						CSayF("F: %s; S: %s;  OTag: %s",O.Data["ITEM_F"],O.Data["ITEM_S"],O.Tag)
						Create(ctag,L,O.X,O.Y,TakeTreasure,ctag)
					end
				end
			end
		end
	end
	
	static bool All(int x, int y)
		for CLK in List.Each
			if Clk.Clicked(x,y)
				//Map.WalkTo(CLK.walkx,CLK.Walky)
				Map.CurLayer.Obj("PLAYER").WalkTo(CLK.walkx,CLK.Walky)
				Map.ArriveFunc=CLK.func 
				Map.ArriveParam=Clk.param
				return true
			end
		end
		return false
	end
	
end

// module
group FldMap

	var KthuraMap
	int ScrollX
	int ScrollY
	string Layer
	bool AutoScroll = false
	table kills
	string LoadedMap
	delegate ArriveFunc = nil
	string ArriveParam = ""
	
	// This property is only meant for the auto clickable generator
	// Generating random items
	get table LRitems
		table ret
		for i = 1 , math.min(gv.vint.Cycle,5)
			string l = KthuraMap.Meta[sprintf("PT %2d Items",i)]
			table ketting = Split(l,";")
			for it in each (ketting)
				table thisitem = Split(it,",")
				switch #thisitem
					case 1
						ret += thisitem[1]
					case 2
						for j=1,(lua.tonumber(thisitem[2]) or 1)
							ret += thisitem[1]
						end
					default
						lua.error("Item chain syntax error in map meta field: "..i)
				end
			end
		end
		return ret
	end

	
	void SaveGame(Jaren70)
		if Jaren70
			lua.Error("Antique version of savegame manager not yet present")
		else
			State.LoadNew("FLOW_SAVEGAME","Script/Flow/FlowSaveGame.neil")
			Flow.Current="SAVEGAME"
		end		
	end
	
	void LoadMapText()
		if !JCR6.EntryExists("Scenario/"..__lang.."/maps/"..gvStr.LoadedMap)
			CSay("No mapfile for: "..gvStr.LoadedMap)
			return
		end
		BoxText.Load("MAPTEXT","Maps/"..gvStr.LoadedMap)
	end

	void LoadMap(string Map)
		// Begin
		Loading()
		LoadedMap = Map:upper()
		CSayF("Loading Kthura Map: %s",Map)
		KthuraMap = Kthura.Load("Kthura/"..Map)
		CSay("Remapping")
		KthuraMap.Remap()
		Layer = KthuraMap.Layers[1]
		if State.Has("MAPSCRIPT")
			State.Kill("MAPSCRIPT")
		end
		CSayF("Map '%s' loaded. Tag='%s'; ID='%d'",Map,KthuraMap.Tag,KthuraMap.ID)
		gvStr.LoadedMap = Map
		// Only needed so the savegame manager can generate the header more easily!
		gvStr.MapTitle = KthuraMap.Meta["Title"]
		string MapScriptFile = "Script/MapScript/"..Map..".Neil"
		// Map Script
		if !JCR6.EntryExists(MapScriptFile)
			CSay("WARNING! No file named: "..Mapscriptfile..", so resorting to the basis 'None' script in stead!")
			MapScriptFile = "Script/MapScript/None.Neil"
		end
		CSayF("Loading MapScript: %s",MapScriptFile)
		State.Load("MAPSCRIPT",MapScriptFile)
		State.Call("MAPSCRIPT","MScript.Load","nil")
		// debug
		//for k in each(KthuraMap.MetaFields)
		//	CSayF("%s = %s",k,KthuraMap.Meta[k])
		//end
		// Music (must always be after the mapscript is loaded, in case of scripted music)
		if prefixed(KthuraMap.Meta["Music"],"*")
			switch KthuraMap.Meta["Music"]:upper()
				case "*MAPSCRIPT" "*MAP" "*SCRIPT"
					MapScript.Music()
				default
					Lua.error("Unknown alternate music instruction!")
			end
		else
			CSayF("= Loading Map Music: %s",KthuraMap.Meta["Music"])
			Music.Play(KthuraMap.Meta["Music"])
		end
		LoadMapText()
		Clickable.Automate()
	end
		
	void ReMap()
		KthuraMap.ReMap()
	end
	
	void SetMember(string key, value)
		if key:upper()=="LAYER"
			gvStr.MapLayer = value
		end
		self[key] = value
	end
	
	get var CurLayer
		return KthuraMap.Layer(Layer)
	end
	
	get var CurrentLayer
		return CurLayer
	end
	
	void SetObjField(string o,string key,value)
		CurLayer.Obj(o)[key]=value
	end
	
	void ActorMoveTo(string Tag,a,b)
		CurLayer.Obj(tag).MoveTo(a,b)
	end
	
	void SetAutoScroll(bool value)
		autoscroll = value
	end
	
	void Kill(string ObjTag,bool perma)
		if perma
			Kills[LoadedMap] = Kills[LoadedMap] or {}
			Kills[LoadedMap] += {["Tag"]=ObjTag,["Layer"] = Layer}
		end
		CurLayer.Kill(ObjTag)
	end
	
	get string Leader
		if gv.vStr.Leader==""
			CSay("Leader not set! Autosetting to character #1!")
			gv.vStr.Leader = RPGParty[1]
		end
		return gv.vStr.Leader
	end
	
	set string Leader
		gv.vStr.Leader = value
	end
	
	void SetLeader(string v)
		Leader = v
	end
	
	void AutoTexPlayer()
		if !CurLayer.HasTag("PLAYER")
			return
		end
		var PL=CurLayer.Obj("PLAYER")
		if Leader=="UniWendicka"
			PL.Texture = "GFX/Actors/Uniform/Wendicka.".. PL.Wind .. ".jpbf"
		else
			PL.Texture = "GFX/Actors/Player/".. Leader .. "." .. PL.Wind .. ".jpbf"
		end
	end
	
	void WalkClick(int mx,int my)
		int x = mx + ScrollX
		int y = my + ScrollY
		CSayF("Request to walk to (%4d,%4d)",x,y)
		if !CurLayer.HasTag("PLAYER")
			CSay("But there is no player available now, so the request will be ignored!")
			return
		end
		// Check for clickables
		// TODO! Clickables
		if !Clickable.All(x,y)
			CurLayer.Obj("PLAYER").WalkTo(x,y)
			ArriveFunc = nil
			ArriveParam = ""
		end
	end
	
	void ObjWalkTo(string tag,a,b)
		// CSayF("Actor %s must walk to: %s %s",tag,tostring(a),tostring(b)) // DEBUG!
		CurLayer.Obj(Tag).WalkTo(a,b)
	end
	
	void ObjSet(string otag,string vtag,value)
		CurLayer.Obj(OTag)[vtag]=value
	end
	
	void ShowPlayer()
		if !CurLayer.HasTag("PLAYER")
			return
		end
		FldMap.CurLayer.Obj("PLAYER").Visible = true
	end
	
	bool Walking()
		if !CurLayer.HasTag("PLAYER")
			return false
		end		
		bool ret = CurLayer.Obj("PLAYER").Walking
		if (!ret) && ArriveFunc
			ArriveFUNC(ArriveParam)
			ArriveFunc = nil
		end
		return ret
	end
	
	CONSTRUCTOR
		CSay("FieldMap loaded!")
	end

end

quickmeta GrPlayer
	index
		return FldMap.CurLayer.Obj("PLAYER")[key]
	end
	
	newindex
		FldMap.CurLayer.Obj("PLAYER")[key] = value
	end

end

global void SGMap()
	SaveGame.Data["PermaKills.lua"] = "local ret\n"..Serialize("ret",FLDMAP.Kills).."\n\nreturn ret"
	string r = "// Mapstuff\nInit\n"
	r += "\tFldMap.ScrollX = "..tostring(FldMap.ScrollX).."\n"
	r += "\tFldMap.ScrollY = "..tostring(FldMap.ScrollY).."\n"
	r += "\tFldMap.AutoScroll = "..tostring(FLDmap.AutoScroll).."\n"
	r += "\tFldMap.Layer = \""..FldMap.Layer.."\"\n"
	r += "\tGrPlayer.X = "..tostring(GrPlayer.X).."\n"
	r += "\tGrPlayer.Y = "..tostring(GrPlayer.Y).."\n"
	r += "\tGrPlayer.Wind = \""..GrPlayer.Wind.."\"\n"
	r += "end"
	SaveGameData["Map.neil"] = r
end

global void LGMap()
	CSayF("Loading map: %s",gv.vstring["LOADEDMAP"])
	FldMap.LoadMap(gv.vstring["LOADEDMAP"])
	CSayF("Let's go to layer: %s",gv.vstring["MAPLAYER"])
	FldMap.CurLayer.Spawn("PLAYER",0,0)
	NeilDoString(SaveGame.Data["MAP.NEIL"],"SG:Map.Neil")
	FldMap.Kills = LuaDoString(SaveGame.Data["PERMAKILLS.LUA"])
	FldMap.AutoTexPlayer()
end

init
	print("FieldMap Init Executed!")
	print(GlobalDump())
	Clickable.Map = FldMap
end

return FldMap
