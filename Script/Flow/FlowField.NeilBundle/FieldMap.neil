// License Information:
// src/Tricky Script/Script/Flow/FlowField.NeilBundle/FieldMap.neil
// Version: 20.09.28
// Copyright (C) 2020 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

#MKL_Version "Star Story - FieldMap.neil" "20.09.28"
#MKL_Lic     "Star Story - FieldMap.neil" "Phantasar zLib License"

// module
group FldMap

	var KthuraMap
	int ScrollX
	int ScrollY
	string Layer
	bool AutoScroll = false
	table kills
	string LoadedMap
	
	void SaveGame(Jaren70)
		if Jaren70
			lua.Error("Antique version of savegame manager not yet present")
		else
			State.LoadNew("FLOW_SAVEGAME","Script/Flow/FlowSaveGame.neil")
			Flow.Current="SAVEGAME"
		end		
	end

	void LoadMap(string Map)
		// Begin
		Loading()
		LoadedMap = Map:upper()
		CSayF("Loading Kthura Map: %s",Map)
		KthuraMap = Kthura.Load("Kthura/"..Map)
		CSay("Remapping")
		KthuraMap.Remap()
		Layer = KthuraMap.Layers[1]
		if State.Has("MAPSCRIPT")
			State.Kill("MAPSCRIPT")
		end
		CSayF("Map '%s' loaded. Tag='%s'; ID='%d'",Map,KthuraMap.Tag,KthuraMap.ID)
		gvStr.LoadedMap = Map
		// Only needed so the savegame manager can generate the header more easily!
		gvStr.MapTitle = KthuraMap.Meta["Title"]
		string MapScriptFile = "Script/MapScript/"..Map..".Neil"
		// Map Script
		if !JCR6.EntryExists(MapScriptFile)
			CSay("WARNING! No file named: "..Mapscriptfile..", so resorting to the basis 'None' script in stead!")
			MapScriptFile = "Script/MapScript/None.Neil"
		end
		CSayF("Loading MapScript: %s",MapScriptFile)
		State.Load("MAPSCRIPT",MapScriptFile)
		State.Call("MAPSCRIPT","MScript.Load","nil")
		// debug
		//for k in each(KthuraMap.MetaFields)
		//	CSayF("%s = %s",k,KthuraMap.Meta[k])
		//end
		// Music (must always be after the mapscript is loaded, in case of scripted music)
		if prefixed(KthuraMap.Meta["Music"],"*")
			switch KthuraMap.Meta["Music"]:upper()
				case "*MAPSCRIPT" "*MAP" "*SCRIPT"
					MapScript.Music()
				default
					Lua.error("Unknown alternate music instruction!")
			end
		else
			CSayF("= Loading Map Music: %s",KthuraMap.Meta["Music"])
			Music.Play(KthuraMap.Meta["Music"])
		end		
	end
		
	void ReMap()
		KthuraMap.ReMap()
	end
	
	void SetMember(string key, value)
		if key:upper()=="LAYER"
			gvStr.MapLayer = value
		end
		self[key] = value
	end
	
	get var CurLayer
		return KthuraMap.Layer(Layer)
	end
	
	void SetObjField(string o,string key,value)
		CurLayer.Obj(o)[key]=value
	end
	
	void ActorMoveTo(string Tag,a,b)
		CurLayer.Obj(tag).MoveTo(a,b)
	end
	
	void SetAutoScroll(bool value)
		autoscroll = value
	end
	
	void Kill(string ObjTag,bool perma)
		if perma
			Kills[LoadedMap] = Kills[LoadedMap] or {}
			Kills[LoadedMap] += {["Tag"]=ObjTag,["Layer"] = Layer}
		end
		CurLayer.Kill(ObjTag)
	end
	
	get string Leader
		if gv.vStr.Leader==""
			CSay("Leader not set! Autosetting to character #1!")
			gv.vStr.Leader = RPGParty[1]
		end
		return gv.vStr.Leader
	end
	
	set string Leader
		gv.vStr.Leader = value
	end
	
	void SetLeader(string v)
		Leader = v
	end
	
	void AutoTexPlayer()
		var PL=CurLayer.Obj("PLAYER")
		if Leader=="UniWendicka"
			PL.Texture = "GFX/Actors/Uniform/Wendicka.".. PL.Wind .. ".jpbf"
		else
			PL.Texture = "GFX/Actors/Player/".. Leader .. "." .. PL.Wind .. ".jpbf"
		end
	end
	
	void WalkClick(int mx,int my)
		int x = mx + ScrollX
		int y = my + ScrollY
		CSayF("Request to walk to (%4d,%4d)",x,y)
		// Check for clickables
		bool ClickablesFound
		// TODO! Clickables
		if !ClickablesFound
			CurLayer.Obj("PLAYER").WalkTo(x,y)
		end
	end
	
	CONSTRUCTOR
		CSay("FieldMap loaded!")
	end

end

quickmeta GrPlayer
	index
		return FldMap.CurLayer.Obj("PLAYER")[key]
	end
	
	newindex
		FldMap.CurLayer.Obj("PLAYER")[key] = value
	end

end

global void SGMap()
	SaveGame.Data["PermaKills.lua"] = "local ret\n"..Serialize("ret",FLDMAP.Kills).."\n\nreturn ret"
	string r = "// Mapstuff\nInit\n"
	r += "\tFldMap.ScrollX = "..tostring(FldMap.ScrollX).."\n"
	r += "\tFldMap.ScrollY = "..tostring(FldMap.ScrollY).."\n"
	r += "\tFldMap.AutoScroll = "..tostring(FLDmap.AutoScroll).."\n"
	r += "\tFldMap.Layer = "..FldMap.Layer.."\n"
	r += "\tGrPlayer.X = "..tostring(GrPlayer.X).."\n"
	r += "\tGrPlayer.Y = "..tostring(GrPlayer.Y).."\n"
	r += "\tGrPlayer.Wind = \""..GrPlayer.Wind.."\"\n"
	r += "end"
	SaveGameData["Map.neil"] = r
end

global void LGMap()
	CSayF("Loading map: %s",gv.vstring["LOADEDMAP"])
	FldMap.LoadMap(gv.vstring["LOADEDMAP"])
	CSayF("Let's go to layer: %s",gv.vstring["MAPLAYER"])
	FldMap.CurLayer.Spawn("PLAYER",0,0)
	NeilDoString(SaveGame.Data["MAP.NEIL"],"SG:Map.Neil")
	FldMap.Kills = LuaDoString(SaveGame.Data["PERMAKILLS.LUA"])
	FldMap.AutoTexPlayer()
end

init
	print("FieldMap Init Executed!")
	print(GlobalDump())
end

return FldMap
