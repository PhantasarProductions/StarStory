// License Information:
// src/Tricky Script/Script/Flow/FlowField.NeilBundle/FieldMonstersOnTheMap.neil
// Version: 21.02.24
// Copyright (C) 2020, 2021 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

class MonRec
	readonly string Foe
	readonly int level
	
	CONSTRUCTOR(string F,int L)
		Foe = F
		level = L
	end
end

class FieldMonster
	
	readonly static var Map = FldMap
	static table Lijst 
	static int crcnt = -1
	static readonly var Error = Lua.error
	static readonly var Assert = Lua.assert
	
	readonly var spawnspot
	readonly var spotname
	readonly int retX
	readonly int retY
	readonly table Recs
	readonly var Actor
	readonly string ActorTag
	readonly string move
	readonly string nLayer
	readonly bool Boss = false
	readonly string BossScript = ""
	readonly string BossBarrier = ""
	bool Killed
	// Initial Skill is only needed for debugging
	readonly int InitialSkill
	
	int radius
	int chaseradius
	static bool Engaged = false
	static int EngageCount = 0
	
	
	get var Layer
		return Map.KthuraMap.Layer(nlayer)
	end
	
	bool Returning = false
	bool chasing = false
	int mv = 1
	
	bool FInrange(int r)
		int dx = math.abs(Actor.X-Player.X)
		int dy = math.abs(Actor.Y-Player.Y)
		return dx<=r and dy<=r and (math.sqrt( (dx*dx) + (dy*dy) ) <= r)
	end
	
	get bool InChaseRange
		int dx = math.abs(Actor.X-retX)
		int dy = math.abs(Actor.Y-retY)
		// When either the player OR the return point is too far away, return to return point
		return FInRange(chaseradius) and dx<=chaseradius and dy<=chaseradius and (math.sqrt( (dx*dx) + (dy*dy) ) <= chaseradius)
	end
	
	get bool InRange
		// When player is too close... chase them
		return FInRange(radius)
	end

	int _level=-1
	get int Level
		if _level<0
			int tot
			if #Recs==0
				Lua.error("Cannot calculate level. Monster record empty")
			end
			for R in each(Recs)
				tot += R.level
			end
			_level = tot div #Recs
		end
		return _level
	end
	
	get int PartyLevel
		int tot
		int num
		for i = 1,3
			if RPGParty[i] && RPGParty[i]!=""
				num++
				tot+=RPGChar[RPGParty[i]].Stat.Level
			end
		end
		return tot div num
	end
	
	
	get bool Visible
		return Actor.Visible
	end
	
	void CheckToChase()
		if InRange
			chasing = true
		end
	end
	
	get bool EngageRange
		return FInrange(16)
	end
	
	void Engage()
		StartCombat.Prepare()
		CSayF("Engage with %d Enem(y)(ies)",#Recs)
		for foe in each(Recs)
			// FFF = Foe Full File 
			string FFF = foe.Foe	
			if (JCR6.ExtractDir(FFF)=="") 
				FFF = "Reg/"..FFF 		
			end
			CSayF("Adding %s level %d",foe.foe,foe.level)
			StartCombat.Foe(FFF,foe.level)
		end
		StartCombat.Boss = Boss
		StartCombat.Arena = Map.KthuraMap.Meta.Arena
		if Map.KthuraMap.Meta.AltEncounterTune!=""
			StartCombat.Tune = Map.KthuraMap.MetaFields.AltEncounterTune
		elseif Boss
			StartCombat.Tune = StartCombat.RandomBossTune
		else
			StartCombat.Tune = StartCombat.RandomTune
		end
		StartCombat.Begin()
		Engaged = true
		Killed = true
	end
	
	void DoMove()
		if !Visible
			return
		end
		if Actor.X>=FldMap.ScrollX && Actor.Y>=FldMap.ScrollY && Actor.X<=FldMap.ScrollX+Screen.W && Actor.Y<=FldMap.ScrollY+Screen.H && EngageRange
			Engage()
			return
		end
		if returning
			if math.abs(Actor.X-retX)<40 and math.abs(Actor.Y-rety)<40 
				returning=false
				chasing=false
			end
		elseif chasing
			if (InChaseRange)
				//Actor.WalkTo(Player.X,Player.Y)
				if !Actor.Walking
					Actor.WalkTo("PLAYER")
				end
			else
				returning = true
				chasing = false
				Actor.WalkTo(retX,retY)
			end
		elseif Actor.X>=FldMap.ScrollX && Actor.Y>=FldMap.ScrollY && Actor.X<=FldMap.ScrollX+Screen.W && Actor.Y<=FldMap.ScrollY+Screen.H
			switch move
				case "VT"
					Actor.Y += mv
					if Map.CurLayer.Blocked(Actor.X,Actor.Y+32)
						mv=-1
					elseif Map.CurLayer.Blocked(Actor.X,Actor.Y-32)
						mv=1
					end
					CheckToChase()
				case "HZ"
					Actor.X += mv
					if Map.CurLayer.Blocked(Actor.X+32,Actor.Y)
						mv=-1
					elseif Map.CurLayer.Blocked(Actor.X-32,Actor.Y)
						mv=1
					end
					CheckToChase()
				case "SS" 
					CheckToChase()
				case "AS"
					// Do nothing, but at least this prevents an error
				default
					Lua.error("Unknown enemy movement code: "..move)
			end			
		end
	end
	
	void Check()
		// Return immediately on invisibility
		if !Visible
			Actor.X = retX
			Actor.Y = retY
			Chasing = false
			Returning = false
			return
		end
		// Color and range
		//int mapdiflevel = Map.maxlevel - Map.MinLevel
		int diflevel = Level-PartyLevel
		DoMove()
		
		if diflevel<-10 
			Actor.R = 0
			Actor.G = 255
			Actor.B = 0
			radius = 50
			chaseradius = 100 * __skill
		elseif diflevel<=0 
			Actor.R = 180
			Actor.G = 255
			Actor.B = 0
			radius = 150
			chaseradius = 150 * __skill
			//CSay("  = Easy")
		elseif diflevel<10 
			Actor.R = 255
			Actor.G = 180
			Actor.B = 0
			radius = 300
			chaseradius = 250 * __skill
			//CSay("  = Hard")
		else
			Actor.R = 255
			Actor.G = 0
			Actor.B = 0
			radius = 600
			chaseradius = 400 * __skill
			//CSay("  = Too Hard")
		end   
		
	end
	
	
	CONSTRUCTOR(string slayer,string spot,int minl,int maxl,table enemies,string mov,int IniLevel)
		//LAsset.C("GFX/Field/Encounter.png","FLDFOE",wh_image)
		//LAsset.C("GFX/Field/Boss.png","FLDBOSS",wh_image)
		nlayer = slayer
		spotname = spot
		spawnspot = layer.Obj(spot)
		retx = spawnspot.X
		rety = spawnspot.Y
		//int n = 1
		//repeat
		//	n = math.random(1,9)
		//until n<__skill*2 || math.random(1,__skill*3)>2
		Lua.assert(#enemies>0,"No enemies!")
		Recs={}
		CSayF("Adding enemies: %d",#enemies)
		for foe in each(enemies)
			Recs += new MonRec(foe,math.random(map.minlevel,map.maxlevel))
		end
		CSayF("Added enemies: %d",#Recs)
		crcnt++
		ActorTag = sprintf("FOE_ACTOR_%09X",crcnt)
		Layer.Spawn(ActorTag,spotname)
		Actor = Layer.Obj(ActorTag)
		if spawnspot.Kind=="$EnemyBoss"
			Boss = true
			Actor.Texture = "GFX/Field/Boss.png"
			move = "AS"
			BossScript = SpawnSpot.Data.BOSSSCRIPT
			BossBarrier = SpawnSpot.Data.BOSSBARRIER
		else
			Actor.Texture = "GFX/Field/Encounter.png"
			move = mov
		end
		InitialSkill = IniLevel
	end
	
	static void ScanFoes()
		static int count
		CSayF("ScanFoes(): %05d",count)
		//Lijst.Clear()
		Lijst = {}
		table RF = Map.Foes
		if #RF==0
			return
		end
		for L in each(Map.KthuraMap.Layers)
			Lijst[L] = new TLinkedList()
			var Lay = Map.KthuraMap.Layer(L)
			table TLA = LAY.TagListArray
			CSayF("ScanFoes(): Layer: %s (%d objects)",L,#TLA)
			for T in each(TLA)
				var FObj = Lay.Obj(T)
				string Kind = Lay.Obj(T).Kind
				string Mov = "AS"
				bool allow = prefixed(Kind,"$Enemy")
				bool isboss = false
				if Kind!="$EnemyBoss"
					Mov = Left(Right(Kind,3),2) // Not the best method, but I went for results, not to win the beauty contest!
				end				
				allow = allow && (Lua.tonumber(Right(Kind,1)) || 0) <=__skill
				allow = allow && (Mov=="AS" || math.random(1,2)==1)
				if Kind=="$EnemyBoss" || FObj.Data.Always:upper()=="YES"
					allow = prefixed(Kind,"$Enemy")
					CSayF("Boss, or always set to 'Yes' for %s:%s, so let's force to allow it!",Kind,T) 
					isboss = true
				end
				if prefixed(Kind,"$Enemy")
					CSayF("%s> %s, Always:%s => %s",T,Kind,Lua.tostring(FObj.Data.Always:upper()),Lua.tostring(allow))
				end
				if allow
					table LF
					int n = 1
					repeat
						n = math.random(1,9)
					until n<__skill*2 || (math.random(1,__skill*3)>2 && math.random(1,n)<=__skill^2)
					Lua.assert(#RF>0,"No enemies set for map!") // Safety precaution, as this should never be possible
					LF = {}
					CSayF("MOB Actor should contain %d foes(s)",n)
					for i=1,n
						LF += RF[math.random(1,#RF)]
					end
					CSayF("MOB Actor does contain %d foe(s)",#LF)
					int mini = map.minlevel
					int maxi = map.maxlevel
					// CSayF("Enemy spot: Level range %d-%d",mini,maxi)
					if isboss
						Lijst[L].AddLast(new FieldMonster(L,T,mini,maxi,LF,"AS",1))
					else
						Lijst[L].AddLast(new FieldMonster(L,T,mini,maxi,LF,Mov,Lua.tonumber(Right(Kind,1))))
					end
				end
			end
		end
	end
	
	static void CheckAll()
		//Lua.assert(Lijst[Map.Layer],"No foe list set for layer: "..Map.Layer)
		if (!Lijst[Map.Layer]) || gv.gBool.LeaveMeBe
			return
		end
		if Engaged
			EngageCount = (EngageCount+1) % 30
			Engaged = EngageCount>0
		end
		for foe,lnk in Lijst[Map.Layer].Each
			if foe.Killed
				lnk.Unlink()
				Map.Kill(foe.ActorTag)
			elseif foe.Visible && foe.Actor.X>FldMap.ScrollX && foe.Actor.Y>FldMap.ScrollY
				foe.Check()
			end
		end
	end
	
end