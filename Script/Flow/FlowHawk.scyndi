// License:
// **********************************************
// 
// src/Script/Script/Flow/FlowHawk.scyndi
// (c) Jeroen Broks, 2025, All Rights Reserved.
// 
// This file contains material that is related
// to a storyline that is which is strictly
// copyrighted to Jeroen Broks.
// 
// This file may only be used in an unmodified
// form with an unmodified version of the
// software this file belongs to.
// 
// You may use this file for your study to see
// how I solved certain things in the creation
// of this project to see if you find valuable
// leads for the creation of your own.
// 
// Mostly this file comes along with a project
// that is for most part released under an
// open source license and that means that if
// you use that code with this file removed
// from it, you can use it under that license.
// Please check out the other files to find out
// which license applies.
// 
// This file comes 'as-is' and in no possible
// way the author can be held responsible of
// any form of damages that may occur due to
// the usage of this file
// 
// 
// **********************************************
// 
// 
// version: 25.02.17
// 
// End License


Script

#use "libs/sci/sys"
#use "libs/sci/medals"
#use "libs/sci/events"
#use "libs/sci/sstring"
#use "libs/sci/graphics"
#use "libs/sci/intervar"

#use "Script/Use/Link"
#use "Script/Use/Anyway"
#use "Script/Use/Misc/ClassBox"

#use "Script/Use/Convert/Flow"
#use "Script/Use/Convert/ViesBah"

#undef CleanUp

#macro Always_HouseOfCards True

extern MaxMedal "25000"

Class HData
	string Name
	string Map
	string Layer
	string Spot
		
	Constructor(string N,M,L,S)
		Name  = N
		Map   = M
		Layer = L
		Spot  = S
	end
end

group flHawk

	var Mouse = ObtainImage("MOUSE")
	var ScreenBox = new Box(0,0,Graphics.W,Graphics.H-128,false)
	Var Font = ObtainFont("BOXTEXT")
	
	table HawkData = {}
	String World = ""
	
	String Save()
		//string ret = "Init\n\tflHawk.HawkData = {}\n\n"
		string ret = "local flHawk = Scyndi.Class.flHawk\nflHawk.HawkData= {}\n\n" 
		
		for world,wlist in spairs(HawkData)
			ret += sprintf("\tflHawk.HawkData['%s'] = {}\n",World)
			for node,nd in spairs(wlist)
				switch node
					case "ARRIVE"
						ret += sprintf("\tflHawk.HawkData['%s']['%s'] = '%s'\n",World,node,nd)
					case "DISABLED"
						ret += sprintf("\tflHawk.HawkData['%s']['%s'] = %s\n",World,node, Lua.tostring(nd))
					default
						ret += sprintf("\tflHawk.HawkData['%s']['%s'] = Scyndi.NEW('HData','%s','%s','%s','%s')\n",World,node, Replace(nd.Name,"'","@APOSTROFE@"),nd.Map,nd.Layer,nd.Spot)
				end
			end
		end
		//ret += "end"
		//SaveGame.Data["HAWK.NEIL"] = ret
		return ret
	end
	
	void Load(string src)
		//if SaveGame.HasData("HAWK.NEIL")
		//	NeilDoString(SaveGame.Data["HAWK.NEIL"])
		//else
		//	HawkData = {}
		//end
		//HawkData.Physillium = HawkData.Physillium || { ["ARRIVE"]="ARRIVE_PHYSILLIUM" }
		//HawkData.Physilium = nil // nullifies the effect of an old bug (world misspelling)
		if (src=="")
			HawkData = {}
		else
			plua f
			plua e
			f,e = Lua.load(src)
			Lua.assert(f,sprintf("Hawk data compile fault: %s\n\n%s",e,src))
			f()
		end
		HawkData.Physillium = HawkData.Physillium || { ["ARRIVE"]="ARRIVE_PHYSILLIUM" }
	end
	
	void Add(string spot,string World,string N,string M,string L)
		HawkData[""]=nil // Fix for some data that shouldn't be there.
		if World=="" || Upper(World)=="*IGNORE*"
			CSay("Request to add a transpad to an empty or world to be ignored!")
			Return
		End
		string node := upper(sprintf("%s.%s.%s",M,L,spot))
		HawkData[World] = HawkData[World] or {}
		HawkData[World].ZZZ = HawkData[World].ZZZ || new HData("<- Back","","")  
		HawkData[World][node] = new HData(N,M,L,spot)
	end
	
	Void AllowYsperon(Bool V)
		HawkData.Ysperon.DISABLED = !V
	End
	
	Void ArriveEvent(string World,string E)
		HawkData[World] = HawkData[World] or {}
		HawkData[World].ARRIVE=E
	End
	
	Void TheGreatReset()
		CSay("The Great Reset!")
		HawkData = { ["Physillium"] = { ["ARRIVE"]="ARRIVE_PHYSILLIUM" } }		
	End	
			
	
	
	get int mx
		return Events.MouseX
	end
	
	get int my 
		return Events.MouseY
	end
	
	get bool ml
		return Events.MouseHitLeft
	end
	
	void GoSpace()
		HawkData.ZZZ = HawkData.ZZZ || {}
		int wy=20
		for w,d in spairs(HawkData)			
			if w=="Black Hole"
				d.DISABLED = gBool.BlackHoleDwellerDead
			end
			if d.DISABLED || w==""
				Graphics.Color(0,105,180)
			elseif my>wy && my<wy+25
				__Cyan
				If w == "ZZZ"
					__Yellow
				End
				if ml
					// debug
					// for k,v in spairs(d)
					//	CSayF("%s %s = %s",Lua.type(v),k,Lua.tostring(v))
					// end
					// end debug
					if w == "ZZZ"
						Flow.Current="FIELD"
						Return
					End
					If d.ARRIVE && d.ARRIVE!=""
						CSayF("Schedule: %s",d.ARRIVE)
						Schedule.Add(d.ARRIVE)
						d.ARRIVE=nil
						CSay("Back to field for the scheduled actions!")
						State.GoToFlow("FIELD")
						CSay("Break off the normal event!")
						Return
					End
					World=w
				end
			else
				__SkyBlue
				if W == "ZZZ"
					__Ember
				end
			end
			If W=="ZZZ"
				Font.Text("<-- Exit",40,wy)
			Else
				Font.Text(w,40,wy)
			End
			wy+=30			
		end
	end
	
	void GoWorld()
		int ty = 100
		__red
		Font.Text(World,40,40)
		for node,ndata in spairs(HawkData[World])
			if node!="ARRIVE" && node!="DISABLED"
				if my>ty && my<ty+25
					__Cyan
					if node=="ZZZ"
						__Yellow
					// Node ZZZ
					end
					if ml
						if node=="ZZZ"
							World=""
						// Node ZZZ
						else
							Map.GoToMap(StripDir(NData.Map),NData.Layer,"Trans.Spot."..NData.Spot)
							State.GoToFlow("FIELD")
						// Node ZZZ Else
						end
					// ML
					end
				// Else Mouse Check
				else
					if node=="ZZZ"
						__Ember						
					else
						__SkyBlue
					// ZZZ
					end
				// Mouse Check
				end
				Font.Text(Replace(ndata.Name,"@APOSTROFE@","'"),40,ty)
				ty+=30
			// Node check
			end
		// For loop
		end
	// Method
	end
	
	Void ForceSpace()
		World=""
	End
	
	void MFlow()		
		//Dev.ToConsole()
		ScreenBox.Draw()
		if World==""
			flHawk.GoSpace()
		else
			flHawk.GoWorld()
		end
		// Party
		Party.Boxes()
		// Mouse
		Mouse.Draw(mx,my)		
	end

end

Global Delegate MainFlow 

//#if CleanUp
//Global Void CONSOLE_OnlyLostPlanet()
//	Table Kill = {}
//	For k,_ in pairs(flHawk.HawkData)
//		CSayF(Lua.type(k).." "..Lua.tostring(k))
//		if k!="The Lost Planet"
//			Kill += k
//			CSay("Gonna kill: "..k)
//		end
//	end
//	For victim in Each(Kill)
//		CSayF("Killing: "..Lua.tostring(victim))
//		flHawk.HawkData[victim]=nil
//	End
//End
//#fi

Global Void CheckMedals()
	If gbool.AllowMedalDungeons && Medals.Active
		CSayF("Medal Rate: %d/%d",Medals.FullScore,MaxMedal)
		breuk:=Medals.FullScore/MaxMedal
		int ratio:=math.min(100,breuk*100)
		CSayF("Breuk %f -> %3d%%",breuk,ratio)
		if ratio<25
			return
		end
		flHawk.HawkData["Medal Dungeons"] = flHawk.HawkData["Medal Dungeons"] || {}
		MDungs:=flHawk.HawkData["Medal Dungeons"]
		// World,node, nd.Name,nd.Map,nd.Layer,nd.Spot
		CSay(" 25% -> Shroom Forest should now be added!")
		// 25%
		MDungs["A"]=MDungs["A"] || New HData("Shroom Forest","Medals - Shroom","#001","Start")
		If Always_HouseOfCards || ratio>=50
			CSay(" 50% -> House of Cards should now be added!")
			MDungs["B"]=MDungs["B"] || New HData("House Of Cards","Medals - House Of Cards","#000","Start")
		End
		MDungs["ZZZ"]=MDungs["ZZZZ"] || New HData("<- Back","","",nil)
	End
End

Init
	flHawk.HawkData.Physilium = nil
	flHawk.HawkData.Physillium = flHawk.HawkData.Physilium || { ["ARRIVE"]="ARRIVE_PHYSILLIUM" }	
	MainFlow = flHawk.MFlow
	// Medal
	CheckMedals()
End
