// License:
// 	  src/Script/Script/Flow/FlowSaveGame.scyndi
// 
// 	  Version: 25.01.04 VI
// 	
// 	  Copyright (C) 2020, 2021, 2024, 2025 Jeroen Petrus Broks
// 	
// 	  ===========================
// 	  This file is part of a project related to the Phantasar Chronicles or another
// 	  series or saga which is property of Jeroen P. Broks.
// 	  This means that it may contain references to a story-line plus characters
// 	  which are property of Jeroen Broks. These references may only be distributed
// 	  along with an unmodified version of the game.
// 
// 	  As soon as you remove or replace ALL references to the storyline or character
// 	  references, or any termology specifically set up for the Phantasar universe,
// 	  or any other univers a story of Jeroen P. Broks is set up for,
// 	  the restrictions of this file are removed and will automatically become
// 	  zLib licensed (see below).
// 
// 	  Please note that doing so counts as a modification and must be marked as such
// 	  in accordance to the zLib license.
// 	  ===========================
// 
// 
// 	  zLib license terms:
// 	
// 	  This software is provided 'as-is', without any express or implied
// 	  warranty.  In no event will the authors be held liable for any damages
// 	  arising from the use of this software.
// 
// 	  Permission is granted to anyone to use this software for any purpose,
// 	  including commercial applications, and to alter it and redistribute it
// 	  freely, subject to the following restrictions:
// 	
// 	  1. The origin of this software must not be misrepresented; you must not
// 	     claim that you wrote the original software. If you use this software
// 	     in a product, an acknowledgment in the product documentation would be
// 	     appreciated but is not required.
// 	  2. Altered source versions must be plainly marked as such, and must not be
// 	     misrepresented as being the original software.
// 	  3. This notice may not be removed or altered from any source distribution.
// End License

Module

#use "Libs/SCI/Sys"
#use "Libs/SCI/Audio"
#use "Libs/SCI/Events"
#use "Libs/SCI/SGFile"
#use "Libs/SCI/Graphics"

#use "Script/Use/Anyway"
#use "Script/Use/Link"
#use "Script/Use/Convert/Flow"
#use "Script/Use/Misc/ClassBox"
#use "Script/Use/Misc/PSaveGame"


#macro maxsg 999
#macro sloth 50
#macro slotm 5

#macro starty 100
#macro Endy Graphics.H-228

Var Mouse = ObtainImage("MOUSE")
Var ScreenBox = new Box(0,0,Graphics.W,Graphics.H-128,False)
Var BigFont = ObtainFont("BIGTEXT")
Var SysFont = ObtainFont("SYSFONT")
Var Buzz = Audio.Obtain("BUZZ")
Var ButtonUp = ObtainImage("UP")
Var ButtonDown = ObtainImage("DOWN")


ReadOnly Int slotsonscreen = math.floor((Endy-starty)/(sloth+slotm))
Int scroll = 0
Table slots

Table SaveIconsF
Table SaveIcons

Init	
	SaveIconsF += "GFX/Portret/WEndicka/General.png"
	SaveIconsF += "GFX/Portret/Crystal/General.png"
	SaveIconsF += "GFX/Portret/ExHuRU/General.png"
	SaveIconsF += "GFX/Portret/Yirl/General.png"
	SaveIconsF += "GFX/Portret/Foxy/General.png"
	SaveIconsF += "GFX/Portret/Xenobi/General.png"
	SaveIconsF += "GFX/Portret/Rolf/General.png"
	SaveIconsF += "GFX/Portret/Lovejoy/General.png"
	SaveIconsF += "GFX/Portret/Briggs/General.png"
	SaveIconsF += "GFX/Portret/Astrilopup/West.png"
	SaveIconsF += "GFX/Portret/Doctor/General.png"
	SaveIconsF += "GFX/Portret/Johnson/UniForm.png"
	SaveIconsF += "GFX/Portret/Reggie/General.png"
	SaveIconsF += "GFX/Portret/Banika/General.png"
	SaveIconsF += "GFX/Portret/Sue/General.png"
	SaveIconsF += "GFX/Portret/Kota/General.png"
	SaveIconsF += "GFX/Portret/Goddess/General.png"
	Var s
	//s = SaveGame.LoadIndieString("Star Story - Scroll")
	s = (SGFile.FileExists("Star Story - Scroll") && SGFile.LoadString("Star Story - Scroll")) || "0"
	CSayF("Getting scroll: %s",lua.tostring(s))
	scroll = lua.tonumber(s || "0") || 0
End

Void SaveScroll()
	CSay("Saving scroll data")
	//SaveGame.SaveIndieString("Star Story - Scroll",tostring(scroll))
	SGFile.SaveString("Star Story - Scroll",tostring(scroll))
End


Table GetSlot(Int i)
	If !slots[i]
		Table h  := GetHeader(i)
		Table nr := {}
		nr.have = h && h.Map!=nil
		nr.header = h
		slots[i] = nr
		//print(Serialize("SaveGameSlots",slots))
	End
	Return slots[i]
End




string Action = "Save"

Global Void SetActionLoad()
	Action = "Load"
End

Void Cancel()
	SaveScroll()
	Switch Action
		Case "Save"
			Flow.Current="FIELD"
			return
		Case "Load"
			Flow.Current="MAINMENU"
			Action="Save"
			return
		Default
			Lua.error( "I do not know how to cancel action: "..Action)
			// Should never happen, but just in Case
	End
End

Global Void MainFlow()
	//Dev.ToConsole()
	// Mouse coordiniates
	Int mx = Events.MouseX
	Int my = Events.MouseY
	Bool AlUp := scroll>0
	Bool AlDown = true
	
	// ScreenBox
	ScreenBox.Draw()
	
	// Head
	__red
	BigFont.Text(Action.." game",45,10)
	
	// Slots
	
	For i=scroll,math.min(scroll+slotsonscreen,maxsg)
		AlDown=AlDown && i<maxsg		
		Table slot := GetSlot(i)
		Int y := starty+((i-scroll)*(sloth+slotm))
		__white
		If slot.have
			Int iconi := (i%len(SaveIconsF)) //+1
			SaveIcons[iconi] = SaveIcons[iconi] || LoadImage(SaveIconsF[iconi])
			SaveIcons[iconi].Stretch(10,y,sloth,math.floor( SaveIcons[iconi].Width * ( sloth / SaveIcons[iconi].Height) ))
		End
		__skyblue
		If mx>100 && my>=y && my<=y+sloth && mx<Graphics.W-100
			Graphics.Color(0,200,255)
			If Events.MouseHitLeft
				SaveScroll()
				switch Action
					Case "Save"
						PerFormSaveGame(GetSGFileName(i))
						// Force to update the data, next time
						slots[i] = nil
						Flow.Current="FIELD"
						Return
					Case "Load"
						If !slot.have
							Buzz.Play()
						Else
							Loading()
							If PerFormLoadGame(GetSGFileName(i))
								// Link to field If succesful
								Flow.Current="FIELD"
								Action="Save"
								Return
							End
						End
					Default
						Lua.error("Unknown action: "..Action)
				End
			End
		End
		If slot.have
			// TODO: Data			
			BigFont.Text(slot.header.Map,100,y)
			SysFont.Text(slot.header.Protagonist.." lv "..slot.header.ProtaLevel,100,y+40)
			SysFont.Text(slot.header.Difficulty.." mode",Graphics.W/2,y+40,2)
			SysFont.Text("Cycle: "..slot.header.Cycle.."; Saved: "..slot.header.Saved,Graphics.W-100,y+40,1)
		Else
			BigFont.Text("== Empty slot ==",100,y)
		End
	End
	__white
	Static Bool clk = false
	If AlDown
		ButtonDown.Draw(Graphics.W-100,Graphics.H-228)
		If (!clk) && Events.MouseHitLeft && mx>Graphics.W-100 && my>Graphics.H-228 && my<Graphics.H-128
			Scroll++
			CSayF("Scrolled down to: %04d",Scroll)
			clk=true
		Else
			clk=false
		End
	End
	If AlUp
		ButtonUp.Draw(Graphics.W-100,100)
		If (!clk) && Events.MouseHitLeft && mx>Graphics.W-100 && my>100 && my<128
			Scroll = math.max(0,Scroll-1)
			CSayF("Scrolled up to: %04d",Scroll)
			clk=true
		Else
			clk=false
		End
	End
	
	// Cancel by Escape key or right mouse button
	If Events.KeyHit(27) || Events.MouseHitRight
		Cancel()
		Return
	End
	// Cancel by Icon
	__Red	
	BigFont.Text("X",Graphics.W-100,160)
	If Events.MouseHitLeft && mx>Graphics.W-100 && my>160 && my<200
		Cancel()
		Return
	End
	// Party
	__white
	If Action=="Save"
		Party.Boxes()
	End
	// Mouse Pointer: Must be very last
	Graphics.Color(255,255,255)
	Mouse.Draw(mx,my)
End
