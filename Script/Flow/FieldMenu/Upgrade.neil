// License Information:
// src/Tricky Script/Script/Flow/FieldMenu/Upgrade.neil
// Version: 21.03.08
// Copyright (C) 2021 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
class UChar

	static Table Loaded = {}
	
	static var Obtain(ubox,string Tag)
		Loaded[Tag] = Loaded[Tag] || new UChar(ubox,Tag)
		return Loaded[Tag]
	end
	
	ReadOnly String Tag
	ReadOnly Var Img
	ReadOnly Table Upgrade
	
	Readonly int StrW
	ReadOnly int StrH
	readonly var boxf
	
	
	void DImg()
		Img.Stretch(boxf.x+10,boxf.y+10,StrW,StrH)
	end
	
	get var Char
		return RPGChar[Tag]
	end
	
	get Int Upgrades
		return Char.Stats.UPGRADES
	end
	Set Int Upgrades
		Char.Stats.UPGRADES = value
	end
	
	static get int Up
		return 10-(__skill*__skill)
	end
	
	int Upgraded(string key)
		return Upgrade[key] div Up
	end
	
	int Price(string key)
		switch __skill
			case 1
				if Upgraded(Key)==0
					return 5
				else
					return Upgraded(Key) * 10
				end
			case 2
				if Upgraded(Key)==0
					return 100
				elseif Upgraded(Key)>100
					return 250000
				else
					int price = 25
					int cd = Upgraded(Key) - 1
					Repeat
						price += price div 4
						cd --
					LoopWhile cd>0
					return price
				end
			case 3
				int Price = 50
				int cd = 0
				for i=1,Upgraded(Key)
					Price += Price
					if Price>500000
						return 500000
					end
				end
				return price
			default
				return 123456789
		end
	end
	
	static get Int MaxUpgrades
		switch __skill
		case 1
			return math.min(2500,Caps.Cycle * 25)
		case 2
			return math.min(1000,Caps.Cycle * 10)
		case 3
			return math.min(250,Caps.Cycle * 5)
		default
			return 0
		end
	end
					
			
	
	Constructor(ubox,String aTag)		
		Tag = aTag
		Img = Image.LoadNew("GFX/Upgrade/_"..Tag..".png","WUPGRADE_"..Tag)
		void USetIndex(onzin,string key,int value)
			Char.Stats["UPGRADE_"..key] = value
		end 
		int UGetIndex(onzin,string key)
			return Char.Stats["UPGRADE_"..key]
		end
		Upgrade = Lua.setmetatable({},{["__index"]=UGetIndex, ["__newindex"]=USetIndex})
		StrH = ubox.H-20
		StrW = math.min(ubox.w,math.floor( (StrH/Img.H) * Img.W))
		boxf = ubox
	end
end
	
// Pretty amateur, but who fucking cares!?
group UStat
	ReadOnly String Strength = "Increase damage phyiscal attacks performed by %s will do"
	ReadOnly String Defense = "Decrease damage %s will receive from physical attacks"
	ReadOnly String Will = "Increase damage mental attacks performed by %s will do"
	ReadOnly String Resistance = "Decrease damage %s will receive from mental attacks"
	ReadOnly String Accuracy = "Increases the chance an attack performed by %s will hit its target"
	ReadOnly String Evasion = "Increases the chance an attack on %s will miss"
	ReadOnly String Agility = "Speeds %s up on the time gauge in combat"
	
	
	Get Var Each()
		int i = 0
		Var Ret()
			i++
			switch i
				case 1
					return "Strength"
				case 2
					return "Defense"
				case 3
					return "Will"
				case 4
					return "Resistance"
				case 5
					return "Accuracy"
				case 6
					return "Evasion"
				case 7
					return "Agility"
				default
					return nil
			end
		end
		return Ret
	end
	
	string Explain(string Name,string Stat)
		return sprintf(self[Stat],Name)
	end
end

module
	
	readonly var sfont = ImageFont.Obtain("SYSFONT")
	readonly var afont = ImageFont.Obtain("BOXTEXT")
	readonly var bfont = ImageFont.Obtain("BIGTEXT")
	
	void Flow(uBox,string CharTag,string situation)
		static int tab = ubox.w div 6
		var UCH=UChar(ubox,CharTag)
		__white
		UCH.DIMG()
		__Red
		bfont.DarkText(sprintf("Upgrades %04d/%04d",UCH.Upgrades,UCH.MaxUpgrades),ubox.x+(ubox.w div 2),ubox.y+25,2,2)
		int Y=ubox.y+105
		__Ember
		afont.DarkText("Upgrades",(tab*3)+ubox.x,100,1,0)
		afont.DarkText("Stat Inc",(tab*4)+ubox.x,100,1,0)
		afont.DarkText("Price",(tab*5)+ubox.x,100,1,0)
		string floattext = ""
		for st in UStat.Each
			Y+=25
			bool H = Events.MouseX()>ubox.x && Events.MouseX()<ubox.x+ubox.w && Events.MouseY()>y && Events.MouseY()<y+25
			if H
				__Cyan
			else
				__SkyBlue
			end
			aFont.DarkText(st,ubox.x+tab,y)
			sFont.DarkText(sprintf("%04d",UCH.Upgraded(st)),ubox.x+(tab*3),y,1,0)
			sFont.DarkText(sprintf("+%5d",UCH.Upgrade[st]),ubox.x+(tab*4),y,1,0)
			if UCH.Upgrades<UCH.MaxUpgrades
				sFont.DarkText(sprintf("%6d credits",UCH.Price(st)),ubox.x+(tab*5),y,1,0)
				if H
					floattext = Ustat.Explain(RPGChar[CharTag].name,st)
					if Events.MouseHitLeft() && UCH.Upgrades<UCH.MaxUpgrades && Aurina.Cash>=UCH.Price(st)
						CSayF("Upgrading %s for %s!",st,chartag)
						Aurina.Pay(UCH.Price(st))
						UCH.Upgrade[st]+=UCH.Up
						UCH.Upgrades++
					end
				end
			else
				__red
				sFont.DarkText("--",ubox.x+(tab*5),y,1,0)
			end
		end
		__Ember
		afont.DarkText(sprintf("Credits: %9d",Aurina.Cash),ubox.x+20,(ubox.h+ubox.y)-20,0,1)
		__white
		FitText.Dark(sFont,floattext,Events.MouseX()+20,Events.MouseY()+20)
	end

end