// License:
// 	  src/Script/Script/Flow/FieldMenu/Shop.scyndi
// 
// 	  Version: 25.01.25 XXV
// 	
// 	  Copyright (C) 2021, 2025 Jeroen Petrus Broks
// 	
// 	  ===========================
// 	  This file is part of a project related to the Phantasar Chronicles or another
// 	  series or saga which is property of Jeroen P. Broks.
// 	  This means that it may contain references to a story-line plus characters
// 	  which are property of Jeroen Broks. These references may only be distributed
// 	  along with an unmodified version of the game.
// 
// 	  As soon as you remove or replace ALL references to the storyline or character
// 	  references, or any termology specifically set up for the Phantasar universe,
// 	  or any other univers a story of Jeroen P. Broks is set up for,
// 	  the restrictions of this file are removed and will automatically become
// 	  zLib licensed (see below).
// 
// 	  Please note that doing so counts as a modification and must be marked as such
// 	  in accordance to the zLib license.
// 	  ===========================
// 
// 
// 	  zLib license terms:
// 	
// 	  This software is provided 'as-is', without any express or implied
// 	  warranty.  In no event will the authors be held liable for any damages
// 	  arising from the use of this software.
// 
// 	  Permission is granted to anyone to use this software for any purpose,
// 	  including commercial applications, and to alter it and redistribute it
// 	  freely, subject to the following restrictions:
// 	
// 	  1. The origin of this software must not be misrepresented; you must not
// 	     claim that you wrote the original software. If you use this software
// 	     in a product, an acknowledgment in the product documentation would be
// 	     appreciated but is not required.
// 	  2. Altered source versions must be plainly marked as such, and must not be
// 	     misrepresented as being the original software.
// 	  3. This notice may not be removed or altered from any source distribution.
// End License


#use "libs/xmath"
#use "libs/fittext"
#use "libs/sci/sys"
#use "script/use/link"
#use "libs/sci/events"
#use "libs/sci/graphics"
#use "script/use/anyway"
#use "Script/Use/Convert/RPG2Stat"
#use "Script/Data/Shops/MyData_ClassFile_Shops"

module 
	var fnt  = ObtainFont("BOXTEXT")
	var sfnt = ObtainFont("SYSFONT")
	var Store
	table Stock
	table StockItem
	
	get string StoreName
		return Store.StoreName
	end
	
	void LoadStore(string sh)
		//Store = NeilUse("Script/Data/Shops/"..sh)
		Lua.Scyndi.Use("Script/Data/Shops/"..sh)
		Store = Lua.Scyndi.Class[sh].ret
	end
	
	get int Cash
		return Aurina.Cash
	end
	
	void Sell(string CharTag,int slot)
		var ch := RPGChar[CharTag]
		string ittag := ch.Data[sprintf("INVITEM%d",slot)]
		int itamt    := ch.Stat[sprintf("INVAMNT%d",slot)]
		if ittag=="" || itamt<=0
			return
		end
		var it := Item["ITM_"..ittag]
		ch.Stat[sprintf("INVAMNT%d",slot)]--
		Aurina.Earn(it.itm_sellprice)
		CSayF("Sold %s from socket #%d from character %s",ittag,slot,CharTag) 		
	end

	void Flow(uBox,string CharTag,string situation)
		locextern itmod "Scyndi.Globals.itmod"
		itmod.Sell = itmod.Sell || Shop.Sell
		int x  := ubox.x + 40
		int y  := ubox.y + 10
		int w  := ubox.w - 50
		int rx := (ubox.x+ubox.w)-10
		int ry := (ubox.y+ubox.h)-10
		int pmx:= Events.MouseX
		int pmy:= Events.MouseY
		int mx := pmx-ubox.x
		int my := pmy-ubox.y
		string hoveritem=""
		int hoveri=0
		var hoverit=nil
		bool ml = Events.MouseHitLeft
		bool mr = Events.MouseHitRight
		Lua.assert(Store,"No store loaded")
		__red
		fnt.Text(StoreName,x,y)		
		for i=1,10
			var it := StockItem[i]
			int iy := y+20+(i*25)
			bool hover := pmx>ubox.x && pmx<ubox.x+ubox.h && pmy>iy && pmy<iy+25
			if it
				if hover
					hoveri=i
					hoverit=it
					hoveritem = Stock[i]
					Graphics.Color(0,255,255)
				else
					__skyblue
				end
				fnt.Text(it.Name,x,iy)
				if it.ITM_BuyPrice>Aurina.Cash
					__red
				elseif hover
					Graphics.Color(255,255,0)
				else
					__ember
				end
				sfnt.Text(sprintf("%d Credits",it.ITM_BuyPrice),rx,iy,1)
			end
		end
		//static number a
		locExtern a "Shop_Flow_Static_A"
		a = a || 0
		int col := math.floor(xmath.sin(a/10))
		a = (a+1)%3600
		Graphics.Color(255-col,col,0)
		sfnt.Text(sprintf("You now have %d credits",Cash),x,ry,0,1)
		if ml && itmod.citem!="" && pmx>ubox.x && pmx<ubox.x+ubox.w && pmy>ubox.y && Pmy<ubox.y+ubox.h && item["ITM_"..itmod.citem].itm_sellable && item["ITM_"..itmod.citem].itm_sellprice>0
				Aurina.Earn(item["ITM_"..itmod.citem].itm_sellprice)
				CSayF("Sold %s",itmod.citem) 
				itmod.citem=""
				itmod.rcitem=""
				itmod.rsitem=0		
		elseif hoverit
			__white
			FitText.Dark(sfnt,hoverit.Description,pmx+25,pmy+25)
			if Cash>hoverit.ITM_BuyPrice
				if ml 
					CSay("Left mouse button clicked while hovering! Are we bying something?")
					if itmod.citem==""
						CSayF("Bought %s => %s",hoveritem,right(hoveritem,len(hoveritem)-4))
						Aurina.Pay(hoverit.ITM_BuyPrice)
						CSayF("Paid %d credits",hoverit.ITM_BuyPrice)
						itmod.citem=right(hoveritem,len(hoveritem)-4)
						itmod.rcitem = "SHOP"
						itmod.rsitem = 0
					end
				elseif mr && Item.Give(hoveritem,CharTag)
					Aurina.Pay(hoverit.ITM_BuyPrice)
				end
			end
		end
	end
	
	Void ShopLoadSection()
		// Index for Stock metatable
		//var gStock(this,int s)
		ddef gStock
			plua this
			int s
			this,s = infinity
			if s<1 || s>10
				return nil
			end
			return left(Store["Stock"..s],(len(Store["Stock"..s]))-5)
		end
		// indx for StockItem metatable
		//var gStockItem(this,int s)
		ddef gStockItem
			plua this
			int s
			this,s = infinity
			if s<1 || s>10
				return nil
			end
			if prefixed(Stock[s],"*")
				return nil
			end
			return Item[Stock[s]]
		end
		Stock = Lua.setmetatable({},{["__index"]=gStock})
		StockItem = Lua.setmetatable({},{["__index"]=gStockItem})		
	end
	
Init
	Shop.ShopLoadSection()
end
