// License Information:
// src/Tricky Script/Script/Flow/FlowCombat.NeilBundle/Combat_Effect.neil
// Version: 21.03.03
// Copyright (C) 2021 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
Group CG_Effect

	bool HitCheck(Act,Tar)
		// TODO: Miss chance for Crystal's ARMS
		// Accuracy check on normal attacks (if applicable)
		if Act.Act.Dodgable
			// Original script from the original game. Dummied for reference purposes
			// local ach = Fighters[ag][ai].Tag
			// local tch = Fighters[tg][ti].Tag
			// local acc = RPGStat.Stat(ach,"END_Accuracy")
			// local eva = RPGStat.Stat(tch,"END_Evasion")
			// local hit = rand(0,acc) -- acc + rand(1,math.ceil(acc*.75))
			//local ddg = rand(1,eva) -- eva - rand(1,math.ceil(eva*.25))
			// return ddg>hit
			int acc = Act.Executor.Stats.Accuracy
			int eva = Tar.Stats.Evasion
			int hit = math.random(0,acc)
			int ddg = math.random(0,eva)
			// Original game did "true" if the attack was sucessfully dodged... But here I require "true" when the attack succesfully hit!
			CSayF("Attack on %s by %s - Accuracy roll %d/%d -- Evasion roll %d/%d",Tar.Tag,Act.Executor.Tag,hit,acc,ddg,eva)
			return (ddg<=hit)
		end
		return true
	end

	// Cure Status Changes
	bool Cure(Act,Tar) 
		// TODO: Code
		return false
	end
	
	readonly delegate rand = math.random
	
	bool Attack(Act,Tar)
		// Original Lua code for referrence
		// local chactor = FighterTag(ag,ai)
		// local data = pdata or {}
		// local tg,ti = ptg,pti 
		// CSay("tg = "..sval(tg).."; ti = "..sval(ti))
		// if not(tg and ti) then tg,ti = TargetFromAct(act) end
		// local chtarget = FighterTag(tg,ti)
		// local atkstat = data.atk or "Strength"
		// local defstat = data.def or "Defense"
		// local modifier = data.mod or 1
		// local critical = ({[true]=1,[false]=0})[data.critical==true] -- I have to do it this way, as 'nil' can be a value and would result into a crash.
		// local element = data.element or "Non-Elemental"
		// local atk = RPGStat.Stat(chactor,"END_"..atkstat) * modifier
		// local def = RPGStat.Stat(chtarget,"END_"..defstat)                              
		// local damage = atk + rand(0,round(atk*.75))
		// local defense = def + rand(0,round(def*.25))
		//if data.ignoredefense then defense=0 end
		// local totaldamage = damage - defense
		// if totaldamage<1 then totaldamage=1 end
		// if Fighters[tg][ti].Act=='GRD' and Fighters[tg][ti].Gauge>10000 then totaldamage = round( totaldamage * .75 ) end
		// Hurt(tg,ti,totaldamage,element)
		var Exe = Act.Executor
		var Data = Act.Act
		if Lua.type(data.AttackPower)!="number"
			CSayF("WARNING! DATA CORRUPTIOON! Attack power should be a number but is a %s containing value '%s'",Lua.type(data.AttackPower),Lua.tostring(data.AttackPower))
		end
		if data.AttackPower<=0
			return false
		end
		// TODO: Interception of attacks when Foxy's "Oops Sorry" is triggered, or when ExHuRU's "Protection Protocol" is triggered
		string element = data.attackelement
		if !element or element==""
			element = "Non-Elemental"
		end
		//int modifier = math.max(data.mod or 1,1)
		int modifier = math.max( (data.AttackPower || 1) / 100,1)		
		if Act.XPower
			modifier += 4-__skill
		end
		int atk = Exe.Stats[data.attackstat] * modifier
		int def = Tar.Stats[data.defensestat]
		int damage = atk + rand(0,round(atk*0.75))
		int defense = def + rand(0,round(def*0.25))
		int totaldamage = math.max(1,damage-defense)
		CSayF("Attack(%d,%d); Roll(%d,%d); Total(%d)",atk,def,damage,defense,totaldamage)
		if Tar.Guarding 
			totaldamage = round( totaldamage * .75 )
		end
		Tar.Pain(totaldamage,element)		
		return true
	end
	
	Bool CureOnAttack(Act,Tar)
		// TODO: Code
		return false
	end
	
	
	bool Heal(Act,Tar)
		// Please note that this is only for absolute and percent healing
		// After all, the stat based healing is an attack disguised as healing
		if Act.Act.Healing<=0
			return false
		end
		switch Act.Act.HealingType
			case "Absolute"
				Tar.Heal(Act.Act.Healing)
			case "Percent"
				int h = math.min(1,math.floor(Tar.MaxHP * (Act.Act.Healing/100)))
				Tar.Heal(h)
			default
				Lua.error("I do not know how to act on healing type: "..Act.Act.HealingType)
		end
		return true
	end
	
	bool Script(Act,Tar)
		// TODO: Script
		if Act.Act.ScriptEffect_Reference && Act.Act.ScriptEffect_Reference!=""
			delegate E = NeilUse("Script/Use/Combat/SpellEffect/"..Act.Act.ScriptEffect_Reference)
			bool success
			bool ret
			success,ret = Invoke(E,Act,Tar) 
			return success && ret
		end
		return false
	end
	
	// Cause status changes
	bool Cause(Act,Tar)
		// TODO: Code
		return false
	end
	
	void Effect(Act,Tar)
		CSayF("= Effect: %s; Target %s; Executor: %s",Act.Act.Name,Tar.Tag,Act.Executor.Tag)
		bool Hit = false
		if HitCheck(Act,Tar)
			Hit = Cure(Act,Tar) || Hit
			Hit = Heal(Act,Tar) || Hit
			Hit = Attack(Act,Tar) || Hit
			Hit = CureOnAttack(Act,Tar) || Hit
			Hit = Script(Act,Tar) || Hit
			Hit = Cause(Act,Tar) || Hit
		end
		if Hit
			if Act.CancelEffect
				Tar.NextAct= nil
			end
		else
			CSayF("Target %s has been missed for %s by %s",Tar.Tag,Act.Act.Name,Act.Executor.Tag)
			Tar.Hurt("Miss!")
		end
	end

	void EffectAll(Act)
		CSayF("Let's go to effect for '%s' by %s",Act.Act.Name,Act.Executor.Tag)
		for tar in Act.EachTarget
			Effect(Act,tar)
		end
	end

End

Return CG_Effect