// License Information:
// src/Tricky Script/Script/Flow/FlowCombat.NeilBundle/Combat_Foes.neil
// Version: 21.04.12
// Copyright (C) 2020, 2021 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

#use "libs/xmath"

class Combat_Foe extends Combat_Fighter

	readonly static int midx = math.floor(Screen.W/2)
	readonly static int midx4 = math.floor((Screen.W/2)/4)
	readonly static int midy = math.floor((Screen.H-120)/2)
	readonly static int midy4 = math.floor(((Screen.H-120)/2)/4)
	
	readonly string File
	readonly int Idx
	readonly var RawData
	readonly int Level
	
	// Make sure that pickpocket only works once.
	Bool StolenFrom = false
	
	get bool Boss
		return RawData.Boss
	end
	
	get int MaxIdx
		int ret
		for _,v in pairs(self.Fighters)
			if v.Team=="Foe"
				ret = math.max(ret,v.Idx)
			end
		end
		return ret
	end
	get bool Available
		// TODO: Automatically turn unavailable if an enemy is either dead or removed from battle
		if self.HP<=0 && self.scale<=0
			return false
		end
		if self.StatusChange.Gone
			return false
		end
		return true
	end
	
	get bool Targetable_Hero
		return Available and self.HP>0
	end
	get bool Targetable_Foe
		return Targetable_Hero and self.HP>0
		// On the moment this code was written a bug in Neil requires me to use "self" when using identifiers from the base class when extending classes
	end

	bool Pose(Act)
		static int PoseTime = 0
		PoseTime = (PoseTime + 1) % 125
		self.Negger = PoseTime>0
		return !self.Negger
	end
	
	// This will be used for the humanoid enemies or oder to match Wendicka & co.
	number Scale = 1
	
	int AltX = 0
	int AltY = 0
	
	get string Tag
		return sprintf("FOE_%d",Idx)
	end

	
	get string ImgFile
		if not RawData
			Lua.error("No raw data so I cannot retrieve the image file for foe: "..Tag)
		end
				// Cultist texture change
		static table Sex = {"Male","Female"}
		switch RawData.ImageFile:upper()
			case "*CULTIST"
				return "GFX/Combat/Fighters/Foe/Reg/Cultist "..Sex[math.random(1,#Sex)]..".png"
			case "*CULTISTLEADER"
				return "GFX/Combat/Fighters/Foe/Reg/Cultist Leader "..Sex[math.random(1,#Sex)]..".png"
			default
				return "GFX/Combat/Fighters/Foe/"..RawData.ImageFile
		end

	end
	var _Img
	get var Img
		
		if !_Img
			CSayF("Loading '%s' to image tag 'COMBAT_%s'",ImgFile,Tag)
			_Img = Image.Load(ImgFile,"COMBAT_"..Tag)
			_Img.HotBottomCenter()
		end
		return _Img
	end
	var _NegImg
	get var NegImg		
		if !_NegImg
			//_NegImg = Image.Negative(Img)
			_NegImg = Image.Load(Replace(ImgFile:upper(),".PNG",".NEGATIVE.PNG"),"COMBAT_"..Tag.."_NEG")
			_NegImg.HotBottomCenter()
		end
		return _NegImg
	end
	
	get string Team
		return "Foe"
	end
	
	get int X
		if AltX>0
			return AltX
		end
		int m=2-(idx%3)
		int p=math.floor(idx/3)+1
				
		return (midy4*p)+((midy4/4)*m)
	end
	get int Y
		if AltY>0
			return AltY
		end
		return ((idx%3)*Midy4)+midy
	end

	get bool TargetHover
		if not Img
			// needless crash prevention. It should NOT be possible this scenario is ever true
			return false
		end
		int HW = Img.W div 2
		bool ret = events.MouseY()<Y && events.MouseY()>Y-(Img.H) && Events.MouseX()>X-HW && Events.MouseX()<X+HW
		//CSayF("%s: Mouse(%d,%d) within (%d,%d) and (%d,%d) => %s",Tag,Events.MouseX(),Events.MouseY(),X-HW,Y-img.H,X+HW,Y,tostring(ret))
		return ret
	end
	
	get int W
		return Img.W
	end
	
	get Int Width
		return W
	end
	
	Get Int H
		return Img.H
	end
	
	Get Int Height
		return Img.H
	end
	
	static var Fighter
	
	get string TagLetter
		if idx<26
			return Chr(Idx+65)
		else
			return "?"
		end
	end
	
	get int Shilders
		return self.RawData.Shilders
	end
	
	bool _killedcheck = false
	
	get bool ExHuRU_UpFront
		for i=1,3
			if RPGParty[i]=="ExHuRU" || RPGParty[i]=="Rolf" || RPGParty[i]=="Johnson"
				return true
			end
		end
		return false
	end
	
	void CheckKilled()
		static int maxfactor = 350
		static int ngpcount = math.min(gv.gint.GameCycle,1)
		if self.HP>0
			return
		end
		scale-=0.01
		if self.Name:upper()=="FLIRMOUSE KING"
			for t,d in pairs(self.Fighters)
				if d.Team=="Foe"
					d.Char.Points.HP.Have = 0
				end
			end
		end
		if !_killedcheck
			CSay("Enemy killed!")
			_killedcheck=true
			Killed[self.File]++
			gv.vInt["COMBATSTAT.KILLS"]++
			do
				int L1 = math.random(0,Self.Level)
				int L2 = math.random(0,Party.AvgLevel*__skill) 
				CSayF("Aurina check Level(%d>%d=%s) Shilders(%d<=0=%s)",L1,L2,Lua.tostring(L1>L2),Shilders,Lua.tostring(Shilders<=0))    
				if L1>L2 && (Shilders<=0) 
					__aurinas++
					self.Hurt("Dropped Aurina",255, 180, 0)
				elseif L1*__skill*L2 && Shilders>0
					aurina.shilders+=Shilders
					self.Hurt(sprintf("Dropped %d shilders",Shilders),255, 180, 0)
				elseif math.random(1,(__skill*__skill)+1) && #RawData.ItemDrop>0
					int pm = math.random(1,3)
					int itn = math.random(1,#RawData.ItemDrop)
					plua itd = RawData.ItemDrop[itn]
					if itd && itd.LVL<=Self.Level && RPGParty[pm]!="" && Item.Give(itd.ITM,RPGParty[pm],itd.VLT)
						var Vinder = self.Fighters[RPGParty[pm]]
						Vinder.Hurt("Picks up "..Item[itd.ITM].Name.." dropped by enemy",180,255,0)
					end
				end				
			end
			if ExHuRU_UpFront
				CSay("ExHuRU or linked character upfront, so count the kill!")
				gv.gInt.ERJ_Kills++
			end
			scale = scale * 1.25
			// TODO: Kill count for ExHuRU, Rolf and Johnson
			// Experience
			for i=1,6
				if RPGParty[i] && RPGParty[i]!=""
					readonly string herotag = RPGParty[i]
					readonly var hero = self.Fighters[herotag]
					readonly var enemy = self
					// local herolevel = RPGStat.Stat(herotag,"Level")
					int gainexp = math.floor((enemy.level/hero.level)*maxfactor)
					bool allowexpbonus = math.random(1,10000)>(hero.level/2)*__skill
					int bonus = math.random(1,math.max(1,math.ceil(ngpcount/(2*__skill))))
					//if bonus<1 then bonus = 1 end
					//if bonus>100 then bonus=100 end
					bonus = math.max(1,math.min(100,bonus))
					if allowexpbonus 
						gainexp = gainexp * bonus 
					end
					// In the hard mode you will gain less experience for enemies you've met before. From cycle 5 there is a possibility this no longer counts. In cycle 10 it's definite. Getting to level 10,000 must still be TECHNICALLY possible.
					if __skill==3 and ngpcount>math.random(5,10) 
						//then 
						gainexp = gainexp - (killed[self.file]-1) 
					end 
					//if gainexp<0 or ((hero.level-enemy.level)>maxlvmargin[skill] and ngpcount<=rand(5,skill*5)) then gainexp=0 end
					if gainexp<0 || ((hero.level-enemy.level)>Caps.LevelMargin and ngpcount<=math.random(5,__skill*5)) 
						gainexp=0 
					end
					//if RPGStat.Points(herotag,"HP").Have==0 then
					if hero.HP==0
						//({
						switch __skill
							case 0
								//function() end,
								// No changes!
								case 1
								//function() gainexp = gainexp / 2 end,
								gainexp = gainexp div 2
								case 3
								//function() gainexp = 0 end})[skill]()
								gainexp = 0
						// switch --> skill
						end 
					// if hero dead
					end 
					//RPGStat.Points(herotag,"EXP").Inc(gainexp)
					hero.Experience += gainexp
					CSayF("%s gains %d experience points and now has %d experience points",hero.name,gainexp,hero.experience)
				// end if --> partymember	
				end
 			// end for --> through party
			end
		Lua.Neil.Globals.Combat_Hero.AllUpAP()
		// End if --> killed check
		// TODO: Aurina and/or item drop (and shilders for the Phantasar monsters)
		end
		
	// End function
	end
	
	bool Negger = false
	void Draw()
		// Circle = Placeholder for debugging
		// Graphics.Circle(X,Y,32)
		CheckKilled()
		Graphics.Scale(scale,scale)
		if Negger && ( (FPS.Ticks div 250) % 2) == 1
			NegImg.Draw(X,Y)
		else
			Img.Draw(X,Y)
		end
		Graphics.Scale(1,1)
		self.HurtShow()
	end
	
	void TIcon(int x,int y)
		static var fnt = ImageFont.Obtain("SYSFONT")
		fnt.DarkText(TagLetter .. ".",x,y)
	end
	
	get string AIName
		return RawData.AI
	end
	
	get var AI
		return NeilUse("Script/Use/Combat/AI/"..AIName)
	end
	
	readonly table AI_Actions
	
	void SetTarget(A)
		A = A || self.NextAct
		Lua.assert(A,"SetTarget: No action!")
		switch A.Act.Target
			case "OS"
				A.Targets_Tag[1] = self.Tag
				A.Targets_Tag[2] = nil
			case "1F"
				int TimeOut=10000
				int n
				repeat
					TimeOut--
					Lua.assert(TimeOut>0,"Foe picking hero timeout!")
					n = math.random(1,3)
					if TimeOut % 25 == 0
						CSayF("FOE - 1A - Timeout: %04d",TimeOut)
					end					
				loopwhile RPGParty[n]=="" || RPGParty[n]==nil || (!self.Fighters[RPGParty[n]].Targetable_Foe) 
				A.Targets_Tag[1] = RPGParty[n]
				A.Targets_Tag[2] = nil
			case "AF"
				for i=1,6
					A.Targets_Tag[i] = nil
				end
				for n=1,3
					if RPGParty[n]!="" && RPGParty[n]!=nil && (self.Fighters[RPGParty[n]].Targetable_Foe)
						A.Targets_Tag += RPGParty[n]
					end
				end
				Lua.assert(#A.Targets_Tag>0,"No targetable for foe to do AF-move!")
			case "1A"
				int i = 0
				repeat
					i++
				loopwhile self.Fighters["FOE_"..i]
				Lua.assert(i>0,"No targetable for foe to do AF-move!")
				int TimeOut=10000
				int n 			
				int MI = MaxIdx
				repeat
					n = math.random(0,MI)
					TimeOut--
					if TimeOut % 25 == 0
						CSayF("FOE - 1A - Timeout: %04d",TimeOut)
					end
					Lua.assert(TimeOut>0,"Foe picking foe timeout!")
				until self.Fighters["FOE_"..n].Targetable_Foe
				A.Targets_Tag[1] = "FOE_"..n
				A.Targets_Tag[2] = nil
			case "AA"
				for j=1,6
					A.Targets_Tag[j] = nil
				end				
				//int i=0
				int TimeOut=1000
				//while self.Fighters["FOE_"..i]
				for t,f in pairs(self.Fighters)
					Lua.assert(TimeOut>=0,"AA Target TimeOut!")
					TimeOut--
					//var F = self.Fighters["FOE_"..i]
					if F.Team=="Foe" && F.Targetable_Foe 
						A.Targets_Tag[#A.Targets_Tag+1] = F.Tag
						A.Targets_Tag[#A.Targets_Tag+1]=nil
						//i++
					end
				end
				Lua.assert(#A.Targets_Tag>0,"No targetable for foe to do AA-move!")
			case "EV"
				for i=1,6
					A.Targets_Tag[i] = nil
				end				
				for t,f in pairs(self.Fighters)
					if f.Targetable_Foe
						A.Targets_Tag[#A.Targets_Tag+1] = t
						A.Targets_Tag[#A.Targets_Tag+1]=nil
					end
				end
				Lua.assert(#A.Targets>0,"No targetable for foe to do EV-move! WTF is going on here?")
			default 
				Lua.error(self.Tag..".SetTarget(): Unknown Target Type: "..A.Act.Target)
		end
	end
	
	Constructor(string F,int Lvl)
		static int cnt
		File = F
		idx = cnt
		cnt++
		RawData = Lua.Neil.Use("Script/Data/Foe/"..F)
		Level = Lvl
		Fighter.Fighters[Tag] = self
		// Compile Foe into workable data during combat
		CSayF("Compiling Foe %d: %s (%s) to tag %s",idx,RawData.Name,F,Tag)
		RPGChar.Create(Tag,RawData.Name)
		var C = self.Char
		//C.Name = RawData.Name
		int ldif
		int lvmin = RawData.Stat.LevelRange[1]
		int lvmax = RawData.Stat.LevelRange[2]
		self.Gauge = Lua.math.random(200*__skill,3210/__skill)		
		
		// Code below is merely copied from the original Lua code
		// The field foe was replaced by self, although Neil doesn't need it
		// it was merely done to prevent confusion for myself.
		self.InitStats()
		for ckey,cvalue in spairs(RawData.Stat) 
			if cvalue!="LevelRange"
				int sint = math.abs(cvalue[2]-cvalue[1])
				int rng = math.abs(lvmax - lvmin)
				number sinc = sint / rng
				//--CSay("Compiling stat: "..ckey)
				if self.Level<lvmin 
					ldif = lvmin - self.Level
					int tstat = xmath.round(cvalue[1]-(sinc*ldif))
					if tstat<5 
						tstat = 5 
					end
					C.Stat["BASE_"..ckey] = tstat //RPGStats.DefStat(Foe.Tag,"BASE_"..ckey,tstat)
					CSay("Setting BASE_"..ckey.." (neg) => "..C.Stat["BASE_"..ckey])
				else   
					ldif = self.Level - lvmin
					C.Stat["BASE_"..ckey]=xmath.round(cvalue[1]+(sinc*ldif)) ////RPGStats.DefStat(Foe.Tag,"BASE_"..ckey,round(cvalue[1]+(sinc*ldif)))
					CSay("Setting BASE_"..ckey.." (pos) => "..C.Stat["BASE_"..ckey])       
				end       
				string formscript = "SUM:"..self.Tag
				for i1,v1 in ipairs( { "BASE_", "POWERUP_", "BUFF_", "END_"}) 
					//RPGChar.DefStat(Foe.Tag,v1..ckey,0)
					//--CSay("Added Stat: "..v1..ckey)
					if v1!="BASE_"
						C.Stat[v1..ckey] = 0
					end
					if v1!="END_"
						formscript += "."..v1..ckey
					end
				end
				//RPGChar.ScriptStat(Foe.Tag,"END_"..ckey,"Script/CharStats/General.lua","CALC_"..ckey)    
				RPGChar[Tag].StatScript["END_"..ckey] = formscript
				CSayF("Scripting stat %s for %s with script '%s' (%d=>%d)",ckey,tag,formscript,C.Stat["BASE_"..ckey],C.Stat["END_"..ckey])
			end
		end
		for element in each {"Dark","DarkHealing","Earth","Fire","Frost","Healing","Light","Lightning","Water","Wind" }
			C.Stat["ER_"..element] = RawData["EleRes_"..element]
		end
		C.Points.HP.MaxCopy="END_HP" //RPGStat.Points(Foe.Tag,"HP",1).MaxCopy = "END_HP"
		C.Points.HP.Have=C.Points.HP.Maximum //RPGStat.Points(Foe.Tag,"HP").Have = RPGStat.Points(Foe.Tag,"HP").Maximum
		self.HurtLijst = New LinkedList()
		AI_Actions = {}
		for A in Each(RawData.Acts)
			if lvl>=RawData.ActMinLevel[A]
				AI_Actions += A
			end
		end
	end
	
	static void AddFoe(string F,int lvl)
		var Foe = new Combat_Foe(F,lvl)
		CSayF("Added foe '%s' level %d on index %d",Foe.File,Foe.Level,Foe.Idx)
	end
end