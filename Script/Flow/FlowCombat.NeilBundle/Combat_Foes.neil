// License Information:
// src/Tricky Script/Script/Flow/FlowCombat.NeilBundle/Combat_Foes.neil
// Version: 21.01.21
// Copyright (C) 2020, 2021 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

#use "libs/xmath"

class Combat_Foe extends Combat_Fighter

	readonly static int midx = math.floor(Screen.W/2)
	readonly static int midx4 = math.floor((Screen.W/2)/4)
	readonly static int midy = math.floor((Screen.H-120)/2)
	readonly static int midy4 = math.floor(((Screen.H-120)/2)/4)
	
	readonly string File
	readonly int Idx
	readonly var RawData
	readonly int Level
	
	get bool Available
		// TODO: Automatically turn unavailable if an enemy is either dead or removed from battle
		return true
	end
	
	get bool Targetable_Hero
		return Available and self.HP>0
	end
	get bool Targetable_Foe
		return Targetable_Hero and self.HP>0
		// On the moment this code was written a bug in Neil requires me to use "self" when using identifiers from the base class when extending classes
	end

	
	// This will be used for the humanoid enemies or oder to match Wendicka & co.
	int Scale = 1
	
	int AltX = 0
	int AltY = 0
	
	get string Tag
		return sprintf("FOE_%d",Idx)
	end

	var _Img	
	get string ImgFile
		if not RawData
			Lua.error("No raw data so I cannot retrieve the image file for foe: "..Tag)
		end
		return "GFX/Combat/Fighters/Foe/"..RawData.ImageFile
	end
	get var Img
		if !_Img
			_Img = Image.Load(ImgFile,"COMBAT_"..Tag)
			_Img.HotBottomCenter()
		end
		return _Img
	end
		
	get string Team
		return "Foe"
	end
	
	get int X
		if AltX>0
			return AltX
		end
		int m=2-(idx%3)
		int p=math.floor(idx/3)+1
				
		return (midy4*p)+((midy4/4)*m)
	end
	get int Y
		if AltY>0
			return AltY
		end
		return ((idx%3)*Midy4)+midy
	end

	get bool TargetHover
		if not Img
			// needless crash prevention. It should NOT be possible this scenario is ever true
			return false
		end
		int HW = Img.W div 2
		bool ret = events.MouseY()<Y && events.MouseY()>Y-(Img.H) && Events.MouseX()>X-HW && Events.MouseX()<X+HW
		//CSayF("%s: Mouse(%d,%d) within (%d,%d) and (%d,%d) => %s",Tag,Events.MouseX(),Events.MouseY(),X-HW,Y-img.H,X+HW,Y,tostring(ret))
		return ret
	end
	
	
	static var Fighter
	
	get string TagLetter
		if idx<26
			return Chr(Idx+65)
		else
			return "?"
		end
	end
	
	void Draw()
		// Circle = Placeholder for debugging
		// Graphics.Circle(X,Y,32)
		Graphics.Scale(scale,scale)
		Img.Draw(X,Y)
		Graphics.Scale(1,1)
	end
	
	void TIcon(int x,int y)
		static var fnt = ImageFont.Obtain("SYSFONT")
		fnt.Text(TagLetter .. ".",x,y)
	end
	
	Constructor(string F,int Lvl)
		static int cnt
		File = F
		idx = cnt
		cnt++
		RawData = Lua.Neil.Use("Script/Data/Foe/"..F)
		Level = Lvl
		Fighter.Fighters[Tag] = self		
		// Compile Foe into workable data during combat
		CSayF("Compiling Foe %d: %s (%s) to tag %s",idx,RawData.Name,F,Tag)
		RPGChar.Create(Tag,RawData.Name)
		var C = self.Char
		//C.Name = RawData.Name
		int ldif
		int lvmin = RawData.Stat.LevelRange[1]
		int lvmax = RawData.Stat.LevelRange[2]
		self.Gauge = Lua.math.random(200*__skill,3210/__skill)
		// Code below is merely copied from the original Lua code
		// The field foe was replaced by self, although Neil doesn't need it
		// it was merely done to prevent confusion for myself.
		self.InitStats()
		for ckey,cvalue in spairs(RawData.Stat) 
			if cvalue!="LevelRange"
				int sint = math.abs(cvalue[2]-cvalue[1])
				int rng = math.abs(lvmax - lvmin)
				number sinc = sint / rng
				//--CSay("Compiling stat: "..ckey)
				if self.Level<lvmin 
					ldif = lvmin - self.Level
					int tstat = xmath.round(cvalue[1]-(sinc*ldif))
					if tstat<5 
						tstat = 5 
					end
					C["BASE_"..ckey] = tstat //RPGStats.DefStat(Foe.Tag,"BASE_"..ckey,tstat)
					CSay("Setting BASE_"..ckey.." (neg) => "..C.Stat["BASE_"..ckey])
				else   
					ldif = self.Level - lvmin
					C.Stat["BASE_"..ckey]=xmath.round(cvalue[1]+(sinc*ldif)) ////RPGStats.DefStat(Foe.Tag,"BASE_"..ckey,round(cvalue[1]+(sinc*ldif)))
					CSay("Setting BASE_"..ckey.." (pos) => "..C.Stat["BASE_"..ckey])       
				end       
				string formscript = "SUM:"..self.Tag
				for i1,v1 in ipairs( { "BASE_", "POWERUP_", "BUFF_", "END_"}) 
					//RPGChar.DefStat(Foe.Tag,v1..ckey,0)
					//--CSay("Added Stat: "..v1..ckey)
					if v1!="BASE_"
						C.Stat[v1..ckey] = 0
					end
					if v1!="END_"
						formscript += "."..v1..ckey
					end
				end
				//RPGChar.ScriptStat(Foe.Tag,"END_"..ckey,"Script/CharStats/General.lua","CALC_"..ckey)    
				RPGChar[Tag].StatScript["END_"..ckey] = formscript
				CSayF("Scripting stat %s for %s with script '%s' (%d=>%d)",ckey,tag,formscript,C.Stat["BASE_"..ckey],C.Stat["END_"..ckey])
			end
		end
		C.Points.HP.MaxCopy="END_HP" //RPGStat.Points(Foe.Tag,"HP",1).MaxCopy = "END_HP"
		C.Points.HP.Have=C.Points.HP.Maximum //RPGStat.Points(Foe.Tag,"HP").Have = RPGStat.Points(Foe.Tag,"HP").Maximum		
	end
	
	static void AddFoe(string F,int lvl)
		var Foe = new Combat_Foe(F,lvl)
		CSayF("Added foe '%s' level %d on index %d",Foe.File,Foe.Level,Foe.Idx)
	end
end