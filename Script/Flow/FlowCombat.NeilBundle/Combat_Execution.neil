// License Information:
// src/Tricky Script/Script/Flow/FlowCombat.NeilBundle/Combat_Execution.neil
// Version: 21.02.11
// Copyright (C) 2021 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

#macro _Announce 0
#macro _Stance 1
#macro _SpellAni 2
#macro _AblEffect 3

Module

	var Act
	int MyStage = _Announce
	var Targets
	int AnnounceCD
	
	string AnnounceText
	int AnnounceX
	var AnnounceIcon
	var AnnouncePortrait
	readonly var AnnounceFont = ImageFont.Obtain("BIGTEXT") 
	
	get var Executor
		return Act.Executor
	end
	
	void Fini()
		// This "Nil" definitions are to make sure some crucial data won't 
		// linger causing the garbage collector to bug.
		// Except maybe for 'Stage.Current' as that is just the result to the "IDLE" stage in the general combat flow.
		Act = Nil
		Stage.Current = Nil
		Targets = Nil
		AnnounceIcon = Nil
		AnnouncePortrait = Nil
	end
	
	void Reject(string Reason)
		static var Buzz = Audio.Obtain("BUZZ")
		Buzz.Play()
		Act.Executor.Hurt("Action Rejected!",255,0,0)
		Act.Executor.Hurt(Reason,255,0,0)
		CSayF("Action reject: %s",Reason)
		switch __skill
			case 1
				Act.Executor.Gauge=0
				if Act.Executor.Team=="Hero"
					Act.Executor.Gauge = 7500
				end
			case 2
				Act.Executor.Gauge=5000
			case 3
				if Act.Executor.Team=="Foe"
					Act.Executor.Gauge = 7500
				end
		end
		Stage.Current = nil
	end
	
	void CleanTargets()
		// Remove targets that have become invalid by the time ACT was reached.
		Targets = {}
		// pairs and not ipairs. I must make sure ALL targets are seen. The order doesn't matter
		for i,tag in pairs(Act.Targets_Tag)
			var tar = Act.Targets[i]
			if tar.Available && ( (Executor.Team=="Hero" && tar.Targetable_Hero) || (Executor.Team=="Foe" && tar.Targetable_Foe))
				Targets += tar
			end
		end
		// Stuff cleaned to prevent issues with SpellAnis and stuff
		// Act.Targets_Tag = {}
		for i,dat in ipairs(Targets)
			Act.Targets_Tag[i] = dat.Tag
			Act.Targets_Tag[i+1] = nil
		end
	end
	
	get int CountTargets
		return #Targets
	end
	
	void ComeToMe(SetAct)
		Act = SetAct
		Stage.Current = self
		CleanTargets()
		MyStage = _Announce
		if CountTargets<=0
			Reject("No more valid targets")
			return
		end
		if Act.Learning and Executor.Team=="Hero"
			Lua.error("Learning not yet supported!")
			// TODO: Announce learning by BoxText
			// TODO: Instantly cure blocking statuses to make sure the move is executed legally
			// TODO: Grant the EXP bonus tied to this character for learning a new move.
		end
		if Act.UseCommonAmmo
			if Executor.Ammo<=0
				Reject("Out of Ammo")
				return
			end
			Executor.Ammo--
		elseif Act.BurnAP>0
			if Executor.AP<Act.BurnAP
				Reject("Not enough AP")
				return
			end
			Executor.AP -= Act.BurnAP
		elseif Act.ConsumeItem>=0
			string socktag = sprintf("INVAMNT%d",Act.ConsumeItem)
			if Act.Executor.Char.Stat[socktag]<=0
				CSayF("%s: Socket %s appears to be set to %d and counts as empty!",Act.Executor.Tag,socktag,Act.Executor.Char.Stat[socktag])
				Reject("Empty inventory socket")
				return
			end
			Act.Executor.Char.Stat[socktag]--
		end
		AnnounceCD = 123
		AnnounceText = Act.Act.Name
		AnnounceX = (Screen.W div 2) - (AnnounceFont.TextWidth(AnnounceText) div 2)
		if Act.Act.Icon 
			//&& Act.Act.Icon!=""
			AnnounceIcon = Act.Act.Icon //= Image.LoadNew(Act.Act.Icon,"ABL_ICON_"..Act.Act.Icon)
		end
		if Executor.Team=="Hero"
			AnnouncePortrait = Image.Obtain("PORTRET_"..Executor.Tag)
		end
	end

	void Draw()
		switch MyStage
			case _Announce _AblEffect
				// Do Nothing at all.
			case _Stance
				// TODO: Bring hero in specific pose, or make the enemy "flicker" with it's "negative" counterpart
			case _SpellAni
				Act.SpellAni.Draw()
			default
				Lua.error("Combat.Execution.Draw: Unknown stage ("..MyStage..")")
		end
		if AnnouncePortrait
			AnnouncePortrait.Draw(AnnounceX-100,200)
		end
		AnnounceIcon.Draw(AnnounceX-25,200)
		Graphics.Color(0,180,255)
		AnnounceFont.DarkText(AnnounceText,AnnounceX,200,0,1)
	end
	
	string upper(string s)
		return s:upper()
	end
	
	void Update()
		switch MyStage
			case _Announce
				AnnounceCD--
				if AnnounceCD<=0
					MyStage = _Stance
				end
			case _Stance
				if Executor.Pose(Act)
					MyStage = _SpellAni
					if Act.SpellAni
						Act.SpellAni.Init(Act)
					else
						CSay("No spellani, so let's skip to the effect then!")
						MyStage = _AblEffect
					end
				end
			case _SpellAni
				Act.SpellAni.Update()
				if Act.SpellAni.Ended
					MyStage = _AblEffect
				end
			case _AblEffect
				// The true effect at last!
				CG_Effect.EffectAll(Act)
				Act.AllUpAP()
				if Act.Executor.Team=="Hero"
					Act.Executor.UpAP()
				end
				Act.Executor.NextAct=nil
				Act.Executor.Gauge=0
				if (Act.Executor.Team=="Hero")
					Act.Executor.State="IDLE"
				end
				if Act.Executor.Team=="Hero" && Prefixed(Act.ActTag,"ABL_")
					ablused[Executor.Tag]++
					gv.gInt["ABL.USED."..upper(Act.Executor.Tag).."."..upper(Act.ActTag) ]++
					if Act.ActivatePowerUp!="" 
						Act.Executor.Hurt("Activated Powerup: "..Act.ActivatePowerUp)
						Act.Executor.Char.List.ABL_POWERUP.Add = Act.ActTag.."."..Act.ActivatePowerUp
					end
				end
				AnnouncePortrait = nil
				Stage.Current=nil				
			default
				Fini()
		end
	end

End