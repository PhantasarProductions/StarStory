// License:
// 	  src/Script/Script/Flow/FlowCombat.ScyndiBundle/Combat_Heroes.scyndi
// 
// 	  Version: 25.01.20 VI
// 	
// 	  Copyright (C) 2020, 2021, 2025 Jeroen Petrus Broks
// 	
// 	  ===========================
// 	  This file is part of a project related to the Phantasar Chronicles or another
// 	  series or saga which is property of Jeroen P. Broks.
// 	  This means that it may contain references to a story-line plus characters
// 	  which are property of Jeroen Broks. These references may only be distributed
// 	  along with an unmodified version of the game.
// 
// 	  As soon as you remove or replace ALL references to the storyline or character
// 	  references, or any termology specifically set up for the Phantasar universe,
// 	  or any other univers a story of Jeroen P. Broks is set up for,
// 	  the restrictions of this file are removed and will automatically become
// 	  zLib licensed (see below).
// 
// 	  Please note that doing so counts as a modification and must be marked as such
// 	  in accordance to the zLib license.
// 	  ===========================
// 
// 
// 	  zLib license terms:
// 	
// 	  This software is provided 'as-is', without any express or implied
// 	  warranty.  In no event will the authors be held liable for any damages
// 	  arising from the use of this software.
// 
// 	  Permission is granted to anyone to use this software for any purpose,
// 	  including commercial applications, and to alter it and redistribute it
// 	  freely, subject to the following restrictions:
// 	
// 	  1. The origin of this software must not be misrepresented; you must not
// 	     claim that you wrote the original software. If you use this software
// 	     in a product, an acknowledgment in the product documentation would be
// 	     appreciated but is not required.
// 	  2. Altered source versions must be plainly marked as such, and must not be
// 	     misrepresented as being the original software.
// 	  3. This notice may not be removed or altered from any source distribution.
// End License


Module

#use "Libs/SCI/Sys"
#use "Libs/SCI/GINIE"
#use "Libs/SCI/Audio"
#use "Libs/SCI/Events"
#use "Libs/SCI/SString"
#use "Libs/SCI/Graphics"

#use "Script/Use/Link"
#use "Script/Use/Anyway"

#use "Script/Use/Convert/Flow"
#use "Script/use/Convert/ViesBah"
#use "Script/Use/Convert/RPG2Stat"


// In stead of re-using it, just dirty-link it!
// Only use this method yourself when you KNOW what you are doing!
locExtern Stage "Scyndi.Class.Stage"
locExtern Combat_Fighter "Scyndi.Class.Combat_Fighter"
locExtern FMenu "Scyndi.Class.FieldMenu"

class Combat_Hero extends Combat_Fighter

	readonly static int midx = math.floor(Graphics.W/2)
	readonly static int midx4 = math.floor((Graphics.W/2)/4)
	readonly static int midy = math.floor((Graphics.H-120)/2)
	readonly static int midy4 = math.floor(((Graphics.H-120)/2)/4)
		
	ReadOnly Var Me 
	
	string Tag
	string GITag
	var GIIMG
	table InputItems
	
	void TIcon(int x,int y)
		GIIMG = GIIMG || LoadNewImage(sPrintF("GFX/Combat/GaugeIcons/%s.png",Tag),GITag)
		GIIMG.Draw(x,y)
	end
	
	string _State = "Idle"
	
	
	get string State
		if RPGChar[Me.Tag].Points.HP.Have == 0
			return "Dead"
		else
			return _State
		end
	end
	
	set string State
		_State = value
	end
	
	bool Pose(Act)
		const int resettime = 62
		//static int time = 62
		locExtern time "__STATIC_COMBAT_81b6763a1aaf052b50adc6e9985e7ebc_CHero_Pose"
		time = time || 62
		string mypose := Act.Act.ABL_Pose
		if prefixed(Act.ActTag,"ITM_") 
			mypose = "Cast"
		elseif prefixed(Act.ActTag,"ARM_")
			mypose = "ARM"
		end
		switch mypose
			case "Attack"
				int s = 1
				if time<resettime div 2
					s = 2
				end
				State = "Attack." .. s
			case "Case"
				State = "Cast"
			case "ARM"
				State = "ARM"
				// This pose is unique to Crystal (or obvious reasons)
			default
				State = "Cast"
		end
		time --
		if time<=0
			time=resettime
			return true
		end
		return false
	end


	get int PartyIndex
		//for i=1,6
		for i=0,5
			if RPGParty[i]==Me.Tag
				return i
			end
		end
		return 0
	end
	
	get bool Available
		if Me.StatusChange.Gone
			return false
		end
		return PartyIndex>0 and PartyIndex<=3
	end
	get bool Targetable_Hero
		return Available
	end
	get bool Targetable_Foe
		return Targetable_Hero and self.HP>0
		// On the moment this code was written a bug in Neil requires me to use "self" when using identifiers from the base class when extending classes
	end
	
	get string Team
		return "Hero"
	end
	
	get int X
		return midx + (midx4*PartyIndex)
	end
	
	get int Y
		return midy + (midy4*PartyIndex)
	end
	
	
	readonly table Images
	get int H
		locExtern _self "self"
		return _self.GetImage.H * 2
	end
	
	Get int Height
		locExtern _self "self"
		return _self.GetImage.H * 2
	end
	
	get int W
		locExtern _self "self"
		return _self.GetImage.W * 2
	end
	
	get int Width
		locExtern _self "self"
		return _self.GetImage.W * 2
	end

	get bool TargetHover
		locExtern _self "self"
		if !_self.GetImage
			// needless crash prevention. It should NOT be possible this scenario is ever true
			return false
		end
		int HW = _self.GetImage.W 
		return events.MouseY<Y && events.MouseY>Y-(Images.IDLE.H*2) && Events.MouseX>X-HW && Events.MouseX<X+HW 
	end
	
	get int Level
		locExtern _self "self"
		return _self.Char.Stat.Level
	end
	
	get int Experience
		locExtern _self "self"
		return _self.Char.Points.EXP.Have
	end
	
	set int Experience
		locExtern _self "self"
		_self.Char.Points.EXP.Have = value
	end
	
	
	get var GetImage
		string S = Upper(State)
		if !Images[S]
			CSay("Getting combat sprite for "..Me.Tag.." in state "..State)
			var ret := LoadnewImage("GFX/Combat/Fighters/Hero/"..Me.Tag.."."..State..".png","CombatHero_"..Me.Tag.."_"..State)
			ret.HotBottomCenter()
			Images[S] = ret
		end
		return Images[S]
		//return ret
	end
		
	static get int AvgLevel
		int aantal = 0
		int totaal = 0
		for _,hro in pairs ( self.Fighters)
			if hro.Available && hro.Team=="Hero"
				aantal++
				totaal += hro.Level
			end
		end
		int ret := math.floor(totaal / aantal) 
		// CSayF("Totaal: %d, Aantal: %d, Average: %d",totaal, aantal, ret) // debug
		return ret
	end
	
	void Draw()
		Graphics.Scale(2,2)
		Images[State] = Images[State] or GetImage
		Images[State].Draw(X,Y)
		Graphics.Scale(1,1)
		self.HurtShow()
	end
	
	void UpAP()
		int inc=math.min(12 div __skill,1+math.floor(self.Char.Stats.Level/(25*__skill)))		
		self.AP+=inc
		if PartyIndex<3
			//for i=4,6
			for i=3,5
				if RPGParty[i] && RPGParty[i]!=""
					RPGChar[RPGParty[i]].Points.AP.Have+=inc
					if RPGParty[i]=="Crystal"
						number deler := inc/(__skill*50)
						RPGChar.Crystal.Points.HP.Have += math.ceil(deler*RPGChar.Crystal.Points.HP.Have)						
					end
				end
			end
		end
	end
	
	static void AllUpAP()
		for k,v in pairs(self.Fighters)
			if v.Team=="Hero"
				v.UpAP()
			end
		end
	end
	
	CONSTRUCTOR
		Me = Self
		Images = {}
		self.HurtLijst = New TLinkedList()
	end

end

group Stage_SelectTarget
	var Act
	var PInp
	var amFont
	//readonly table targets
	var Fighters
	
	void ClearTargets()
		table Kill = {}
		for k,_ in pairs(Act.targets_Tag)
			Kill += k
		end
		for k in each(Kill)
			//CSayF("Killing '%s'",tostring(k))
			Act.targets_Tag[k] = nil
		end
	end
	
	get var Targets_Tag
		return Act.Targets_Tag
	end
	
	void ComeToMe(Action)
		CSay("Player must select their target")
		Act = Action
		Stage.Current = self
		CSay("Stage changed!")
	end
	
	void Draw()
		locExtern fnt "FNT_23682639816498164"
		locExtern sys "FNT_53682639816498164"
		fnt = ObtainFont("BOXTEXT")
		sys = ObtainFont("SYSFONT")
		Graphics.Color(255,180,0)
		AmFont.Text(sprintf("%s: %s: Please select your target",Act.Executor.Name,Act.Act.Name),30,10)
		graphics.Color(255,0,0)
		AMFont.Text("X",5,10) // TODO: Click to cancel
		int al = Combat_Hero.AvgLevel
		for ttag in each(Act.Targets_Tag)
			plua tdat := Fighters[ttag]
			__white
			tdat.TIcon(tdat.x-25,tdat.y-50)
			int verschil := tdat.Level - al
			if tdat.Team=="Hero"
				__white
			elseif verschil<-10
				Graphics.Color(180,255,0)
			elseif verschil<0				
				Graphics.Color(0,255,0)
			elseif verschil==0
				Graphics.Color(255,255,255)
			elseif verschil>10
				Graphics.Color(255,0,0)
			elseif verschil>5
				Graphics.Color(255,200,0)
			else
				Graphics.Color(255,180,0)
			end
			String Lv = "Lv. "
			if ((__skill==3 && verschil>2) || (__skill==2 && verschil>6)) && tdat.Team=="Foe"
				Lv += "????"
			elseif Lv==10000
				lv += "MAX!"
			else
				Lv += sprintf("%04d",tdat.level)
			end
			//lv += tostring(verschil)
			fnt.DarkText(Lv,tdat.x,tdat.y-50)
			__white
			fnt.DarkText(tdat.Name,tdat.x+125,tdat.y-50)
			if __skill!=3 || tdat.Team=="Hero"
				__black
				Graphics.Rect(tdat.x-1,tdat.y-26,257,27)
				if tdat.Team=="Foe" && __skill==2 && Killed[tdat.File]<=0
					Graphics.Color(math.random(0,255),math.random(0,255),math.random(0,255))
					fnt.Text("?",tdat.x+127,tdat.y-12,2,2)
				else
					int b := math.floor( (tdat.HP/tdat.MaxHP) * 255 )
					Graphics.Color(255-b,b,0)
					Graphics.Rect(tdat.x,tdat.y-25,b,25)
				end
				__white
				If tdat.NextAct && tdat.gauge>10000
					//For i=1,#tdat.NextAct.Targets_Tag
					for i,_ in pairs(tdat.NextAct.Targets_Tag)
						tdat.NextAct.Targets[i].TIcon(tdat.x+((i-1)*20),tdat.Y+25)
					End
					Sys.DarkText(tdat.NextAct.Act.Name,tdat.x,tdat.Y+5)
				End
			end
		end
	end
	
	Void Update()
		Stage_SelectTarget.ClearTargets()
		int AllCount=0
		for ftag,fdat in pairs(Fighters)
			if fdat.Available and fdat.Targetable_Hero
				// debug
				// static var fnt = ObtainFont("BOXTEXT")
				// fnt.Text(sprintf("Tag: %s, (%d,%d)=>%dx%d Hover: %s ",fdat.Tag,fdat.X,fdat.Y,fdat.W,fdat.H,tostring(fdat.TargetHover)),fdat.x,fdat.y,2,2)				
				// end debug
				
				switch Act.Act.Target
					case "OS"
						Targets_Tag[1]=Act.Executor_Tag
						Targets_Tag[2]=nil
					case "EV"
						Targets_Tag += ftag
					case "AF"
						if fdat.Team=="Foe"
							AllCount++
							Targets_Tag[AllCount]=ftag
							Targets_Tag[AllCount+1]=nil
						end
					case "AA"
						if fdat.Team=="Hero"
							AllCount++
							Targets_Tag[AllCount]= ftag
							Targets_Tag[AllCount+1]=nil
						end
					case "1F"
						//CSayF("%s: Team: %s; Hover: %s",fdat.Tag,fdat.Team,tostring(fdat.TargetHover))
						if (fdat.Team=="Foe" || Act.Act.InDiscriminate) && fdat.TargetHover
							Targets_Tag[1] = ftag
							Targets_Tag[2] = nil
						end
					case "1A"
						if (fdat.Team=="Hero" || Act.Act.InDiscriminate) && fdat.TargetHover
							Targets_Tag[1] = ftag
							Targets_Tag[2] = nil
						end
					default
						Lua.error("Unknown targeting type: "..Act.Target)					
				end
			end
		end
		if Events.MouseHitRight || (Events.MouseHitLeft && Events.MouseX<50 && Events.MouseY<25)
			PInp.ComeToMe(Act.Executor.Tag)
		ElseIf Events.MouseHitLeft && len(Targets_Tag)>0
			Act.Executor.Gauge = 10001
			Stage.Current = nil
			if Act.ActTag=="ACT_SHOOT" || Act.ActTag=="ACT_ATTACK"
				if (!Lua.Scyndi.Class.Stage_PlayerInput.CheckLearn()) 
					if (Act.Executor.Tag=="Wendicka" || Act.Executor.Tag=="UniWendicka") && (!Act.Targets[1].Boss) && (math.random(0,Act.Targets[1].HP*__skill)<math.random(0,RPGChar.UniWendicka.Points.HP.Have))
						// HAH! Take that I'll kill ya!
						BoxText.Serial("COMBAT","Special."..Act.Executor.Tag,"FLOW_COMBAT")
						var oa = Act
						var a = new Class_Action(Act.Executor.Tag,"ACT_WENDICKA_DEATHBLOW")
						a.Targets_Tag[1] = oa.Targets_Tag[1]
						a.Targets_Tag[2] = nil
						Combat_Fighter.Fighters[Act.Executor.Tag].NextAct = a
					elseif Act.Executor.Tag=="Rolf" && math.random(1,(__skill+5)*__skill)==1
						// Feel the pain!
						BoxText.Serial("COMBAT","Special."..Act.Executor.Tag,"FLOW_COMBAT")
						var oa = Act
						var a = new Class_Action(Act.Executor.Tag,"ACT_ROLF_CRITICAL")
						a.Targets_Tag[1] = oa.Targets_Tag[1]
						a.Targets_Tag[2] = nil
						Combat_Fighter.Fighters[Act.Executor.Tag].NextAct = a
					end
				end				
			end
		end
		
	end
	
	//Constructor
	//	amFont = ObtainFont("BOXTEXT")		
	//end
end
Init
	Stage_SelectTarget.amfont = ObtainFont("BOXTEXT")
End

plua NeilUse(string a)
	Lua.Scyndi.Use(a)
	return Lua.Scyndi.Class[StripAll(a)]
end


group Stage_PlayerInput
	var Fighter
	var Fighters
	 var Top
	 Var Bottom
	 Var Item
	 Var Sides
	string Tag
	 var Signal
	 var ItFont
	 var AmFont
	int Height
	int PartyPos
	string Hover
	
	get var PWidth
		return Graphics.W/4
	end
	
	get var Hero
		return Fighter.Fighters[Tag]
	end
	
	get var MPos
		//return ((PartyPos-1)*PWidth)+math.floor(PWidth/2)-100
		return (PartyPos*PWidth)+math.floor(PWidth/2)-100
	end
	
	get int MX
		return events.mousex
	end
	
	get int MY
		return events.mousey
	end
	
	table ABL = {}
	Bool CheckLearn()
		if Tag=="Crystal" || Tag=="UniCrystal" || Tag=="Briggs"
			return false
		end
		ABL[Tag] = ABL[Tag] || NeilUse("Script/Data/Char/Abilities/Abl"..Tag)
		string NewABL=ABL[Tag].Learn
		if NewABL==""
			return false
		end
		var oa = Hero.NextAct
		var a := new Class_Action(Tag,"ABL_"..NewABL)
		Hero.NextAct = a
		a.Learning = true
		a.LearningABL = NewABL
		switch a.Act.Target
			case "OS" "1A"
				A.Targets_Tag[1] = self.Tag
				A.Targets_Tag[2] = nil
			case "1F"
				A.Targets_Tag[1] = oa.Targets_Tag[1]
				A.Targets_Tag[2] = nil
			case "AA"
				for i=1,3
					if RPGParty[i] && RPGParty[i]!=""
						A.Targets_Tag[i]=RPGParty[i]
					else
						A.Targets_Tag[i] = nil
					end
				end
				A.Targets_Tag[4] = nil
			case "AF" "EV"
				int i=0
				for ft,fd in pairs(Combat_Fighter.Fighters)
					if a.Act.Target=="EV" || fd.Team=="Foe"
						i++
						a.Targets_Tag[i]=ft
					end
				end
				a.Targets_Tag[i+1]=nil
			default
				Lua.error("Learning error: Unknown target type: "..a.Act.Target)
		end
		a.ActSpeed = 9000
		CSayF("As the learning requirements for %s's %s are met, a learning is in order!",Tag,NewABL)
		return true
	end
	
	Void DoShoot()
		var a
		a = new Class_Action(Tag,"ACT_SHOOT")
		Hero.NextAct = a
		a.UseCommonAmmo = true
		Stage_SelectTarget.ComeToMe(a)
		//CheckLearn()
	end
	
	Void DoAttack()
		var a
		a = new Class_Action(Tag,"ACT_ATTACK")
		Hero.NextAct = a
		Stage_SelectTarget.ComeToMe(a)
		//CheckLearn()
	end
	
	Void DoReload()
		var a
		a = new Class_Action(Tag,"ACT_RELOAD")
		Hero.NextAct = a
		Stage_SelectTarget.ComeToMe(a)
	end

	Void DoGuard()
		var a
		a = new Class_Action(Tag,"ACT_GUARD")
		Hero.NextAct = a
		Stage_SelectTarget.ComeToMe(a)
	end
	
	Void DoItem()
		FMenu.Go(Tag,"COMBAT_ITEMS")
	end
	
	Void DoAbility()
		FMenu.Go(Tag,"COMBAT_ABILITIES")
	end
	get var DoARMS
		return Stage_PlayerInput.DoAbility
	end
	Void DoSwitch()
		FMenu.Go(Tag,"COMBAT_SWITCH")
	end
	
	void ReturnCancel()
		Self.ComeToMe(Tag,true)
		Flow.GoToFlow("COMBAT")
	end
	
	Void ReturnItem(string ItTag,int Socket)
		var a
		CSayF("Player picked item %s from socket #%d",ItTag,Socket)
		a = new Class_Action(Tag,ItTag)
		a.ConsumeItem = Socket
		Stage_SelectTarget.ComeToMe(a)
		Flow.GoToFlow("COMBAT")
	End
	
	
	Void ReturnAbility(string AblTag,int APCost,string ActivatePowerUp)
		var a
		//Bool PwUp(string atag,string PU)
		ddef PwUp
			String atag
			String PU
			atag,PU = infinity
			return a.Executor.Char.List.ABL_POWERUP.Has(atag.."."..(Upper(PU)))
		end
		a = new Class_Action(Tag,"ABL_"..AblTag)
		a.BurnAP = APCost
		a.XPower = PwUp(abltag,"DblPower")
		a.CancelEffect = PwUp(abltag,"Cancel")
		a.ActivatePowerUp = ActivatePowerUp
		if PwUp(AblTag,"Instant")
			a.XActSpeed = 10000
		elseif PwUp(AblTag,"DblSpeed")
			a.XActSpeed = 2
		end
		Stage_SelectTarget.ComeToMe(a)
		Flow.GoToFlow("COMBAT")
	end
	
	Void ReturnARM(string ablTag)
		var a 
		a = new Class_Action(Tag,"ARM_"..ablTag)
		a.UseARMAmmo = true
		a.ActSpeed += RPGChar.Crystal.Stat["ARM.WEIGHT."..ablTag]
		Stage_SelectTarget.ComeToMe(a)
		Flow.GoToFlow("COMBAT")
	end
	
	Void ReturnSwitch(string NewChar)
		//Hero.Gauge=0
		Tag=NewChar
		Combat_Fighter.Fighters[NewChar].Gauge=9500+(300 div __skill)
		for fuck,you in spairs(Combat_Fighter.Fighters)
			CSayF("Time Gauge: %s => %05d",fuck,you.Gauge)
		end
		Stage.Current=nil
		Flow.GoToFlow("COMBAT")
	end
	
	Void ComeToMe(String ToTag,nosignal)
		Tag = ToTag
		Stage.Current = self
		if !NoSignal
			Signal.Play()
		end
		Height = len(Hero.InputItems) * 52
		PartyPos = 0
		for i=1,3
			if RPGParty[i]==ToTag
				PartyPos = i
			end
		end
		Lua.assert(PartyPos!=0,"Party member " .. ToTag .. " not found on front row!")
	End
	
	Void Draw()
		int by := Graphics.H-228
		int sy := by - Height
		__white
		Bottom.Draw(MPos,by)
		Sides.Stretch(MPos,sy,200,Height)
		Top.Draw(MPos,sy-16)
		Hover = ""
		for i,cmd in ipairs(Hero.InputItems)
			__white
			//int iy := sy+((i-1)*52)
			int iy := sy+(i*52)
			Item.Draw(MPos+12,iy)
			Graphics.Color(0,180,255)
			if (cmd=="Reload" && Hero.Ammo==Hero.AmmoMax) || (cmd=="Shoot" && Hero.Ammo==0)
				Graphics.Color(0,80,150)
			elseif MX>MPos && MX<MPos+200 && MY>iy && MY<iy+52
				Hover = cmd
				Graphics.Color(0,255,255)
			end
			itFont.Text(cmd,mPos+100,sy+((i-1)*52)+26,2,2)
			if cmd=="Shoot"
				__black
				amFont.Text(sprintf("%d/%d",Hero.Ammo,Hero.AmmoMax),mpos+100,by+20,2,0)
				if Hero.Char.Points.Ammo.Maximum==0
					Hero.Char.Points.Ammo.Maximum=6
					Hero.Ammo=6
				end
			end
		end	
	End
	
	Void Update()
		if Events.MouseHitLeft && Hover!=""
			self["Do"..Hover]()
		end
	End
	
end
Init
	//Constructor
		Stage_PlayerInput.itFont = ObtainFont("BIGTEXT")
		Stage_PlayerInput.amFont = ObtainFont("BOXTEXT")
		Stage_PlayerInput.Signal = Audio.Obtain("SIGNAL")
		For PI In Each (NewArray("TOP","BOTTOM","ITEM","SIDES"))
			Stage_PlayerInput[PI] = ObtainImage("COMBAT_PLAYINPUT_"..PI)
			// self[PI]=ObtainImage("COMBAT_PLAYINPUT_"..PI)
		End
		//Stage_SelectTarget.PInp = self
		Stage_SelectTarget.PInp = Stage_PlayerInput
	//end
end

void HurtXenobi()
	Static Table M = {0.20,0.10,0.05}
	If RPGChar.Xenobi.Points.HP.Have<RPGChar.Xenobi.Points.HP.Maximum*M[__skill]
		RPGChar.Xenobi.Points.AP.Have = RPGChar.Xenobi.Points.AP.Maximum
	End
end


Int MaxBuf = 3000 div __skill
Void HurtJohnson()
	Var HP = RPGChar.Johnson.Points.HP
	If HP.Have<=0
		CSay("Ignore! Johnson has fallen!")
		Return
	End
	Int Verschil := HP.Maximum - HP.Have
	//Static Int MaxBuf = 3000 div __skill
	Int Buf := math.max(1,Verschil div (__skill * 2000))
	If RPGChar.Johnson.Stat.BUFF_Agility >=MaxBuf
		Return
	End
	RPGChar.Johnson.Stat.BUFF_Agility += Buf
	CSayF("Johnson's speed went up with %d => %d => %d",Buf,RPGChar.Johnson.Stat.BUFF_Agility,RPGChar.Johnson.Stat.END_Agility)
	Lua.Neil.Globals.Combat_Time.CalcHighSpeed()
End

//module 
	var Fighters
	void Compile()
		CSay("Setting up hero party")
		//for i=1,6
		for i=0,5
			if RPGParty[i] and RPGParty[i]!=""
				string T = RPGParty[i]
				CSayF("Adding hero: %s",T)
				var H = new Combat_Hero() 
				H.Tag = T; CSayF("= Tagged: %s",T)
				H.GITag = sPrintF("GAUGEICON_HERO_%s",T); CSayF("= Gauge Icon Tag: %s",H.GITag)
				Fighters.Add(H) CSayF("= Added to Fighter register!")
				CSayF("= Party index: %d",H.PartyIndex)
				CSayF("= Available:   %s",tostring(H.Available))
				CSayF("= Tag:         %s",H.Tag)
				CSayF("= Team:        %s",H.Team)
				CSayF("= Position     (%d,%d)",H.X,H.Y)
				if __skill < 3
					H.Ammo = H.Char.Points.Ammo.Maximum
				end
				H.InitStats()
				H.Gauge = Lua.math.random(900/__skill,9000/__skill)
				//H.InputItems = Lua.Neil.Use("Script/Data/Char/CombatMenu/"..T..".Neil")
				locExtern CmbMenu "_____AllCombatMemuItemsForPlayers_bfe83c2c1bc60ff733b28bfa4d09512a"
				CmbMenu = CmbMenu || GINIE.LoadNew("Data/Combat/CombatCommands.ini","COMBATMENUITEMSFORPLAYERS_BFE83C2C1BC60FF733B28BFA4D09512A")
				//H.InputItems = Lua.Neil.Use("Script/Data/Char/CombatMenu/"..T)
				H.InputItems = CmbMenu.List("CombatMenu",T)
				Switch T
					Case "Xenobi"
						H.HurtResponse = HurtXenobi
					Case "Johnson"
						H.HurtResponse = HurtJohnson
					Default					
				End
			end
		end
	end
//end
