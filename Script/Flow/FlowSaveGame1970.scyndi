// License:
// 	  src/Script/Script/Flow/FlowSaveGame1970.scyndi
// 
// 	  Version: 25.02.01 XXIX
// 	
// 	  Copyright (C) 2021, 2025 Jeroen Petrus Broks
// 	
// 	  ===========================
// 	  This file is part of a project related to the Phantasar Chronicles or another
// 	  series or saga which is property of Jeroen P. Broks.
// 	  This means that it may contain references to a story-line plus characters
// 	  which are property of Jeroen Broks. These references may only be distributed
// 	  along with an unmodified version of the game.
// 
// 	  As soon as you remove or replace ALL references to the storyline or character
// 	  references, or any termology specifically set up for the Phantasar universe,
// 	  or any other univers a story of Jeroen P. Broks is set up for,
// 	  the restrictions of this file are removed and will automatically become
// 	  zLib licensed (see below).
// 
// 	  Please note that doing so counts as a modification and must be marked as such
// 	  in accordance to the zLib license.
// 	  ===========================
// 
// 
// 	  zLib license terms:
// 	
// 	  This software is provided 'as-is', without any express or implied
// 	  warranty.  In no event will the authors be held liable for any damages
// 	  arising from the use of this software.
// 
// 	  Permission is granted to anyone to use this software for any purpose,
// 	  including commercial applications, and to alter it and redistribute it
// 	  freely, subject to the following restrictions:
// 	
// 	  1. The origin of this software must not be misrepresented; you must not
// 	     claim that you wrote the original software. If you use this software
// 	     in a product, an acknowledgment in the product documentation would be
// 	     appreciated but is not required.
// 	  2. Altered source versions must be plainly marked as such, and must not be
// 	     misrepresented as being the original software.
// 	  3. This notice may not be removed or altered from any source distribution.
// End License

Module

#use "Libs/SCI/Sys"
#use "Libs/SCI/SGFile"
#use "Libs/SCI/Events"
#use "Libs/SCI/Graphics"


#use "Libs/Dim2Lib"

#use "Script/use/Link"
#use "Script/Use/Anyway"
#use "Script/Use/Misc/PSaveGame"

#use "Script/Use/Convert/Flow"

#macro maxsg 999

#macro _LOCATE x,y = 
#macro _REV fg,bg = 2,127
#macro _NORM bg,fg = 2,127
#macro _BOLD bg,fg = 2,255

class Pos
	int ch
	int fg
	int bg
end


	
extern Write "Scyndi.Class.FSG1970.__Write"

group FSG1970
	var Scr = new Dim2("var",80,25)
	//var Fnt = Image.LoadNew("GFX/PC Font/Font0.jpbf","PC-Font")
	table Fnt = {}
	var Mouse = ObtainImage("MOUSE")
	
	int x = 0
	int y = 0
	int fg = 127
	int bg = 2
	int scroll = 0
	
	int pmx
	int pmy
	
	
	get int MX
		return Events.MouseX
	end
	get int MY
		return Events.MouseY
	end
	
#region Fake the old XT computer routines
	void Cls70(string hoezo="")
		Scr.Clear()
		x=0
		y=0
		if hoezo!=""
			CSayF("FSG1970.Cls70: %s",hoezo)
		end
	end
	
	void PutChar(int Ch,int ax,int ay)
		var P := Scr.GetValue(ax,ay)	
		if !P
			P = new Pos()
			Scr.SetValue(ax,ay,P)
			//CSayF("PutChar.Create(%02d,%02d,%03d.%02x)",ax,ay,ch,ch)
		end
		P.ch = Ch
		P.fg = fg
		P.bg = bg
	end
	
	
	void __Write(string A)
		for i=1,len(A)
//		#if oldmethod
//			if !Scr.GetValue(x,y)
//				Scr.SetValue(x,y,new Pos())
//			end
//		#endif

			int byt := Lua.string.byte(Mid(A,i,1))
			if byt==10
				x=0
				y=(y+1)%25
			else
	//			#if oldmethod
//				var P = Scr.GetValue(x,y)
//				P.ch = byt
//				P.fg = fg
//				P.bg = bg/
//				#fi
				self.PutChar(byt,x,y)
				x++
				if x>=80
					x=0
					y=(y+1)%25
				end
			end					
		end
	end
	
	
	void WriteLn(string A)
		Write(A.."\n")
	end
	
	//void WriteF(string fmt,a,b,c,d,e,f,g,h,i,j,k,l,m,o,p,q,r,s,t,u,v,w,x,y,z)
	//	Write(sprintf(fmt,a,b,c,d,e,f,g,h,i,j,k,l,m,o,p,q,r,s,t,u,v,w,x,y,z))
	void Writef(String fmt,infinity)
		Write(sprintf(fmt,infinity))
	end
	
	void DrawScreen()
		Graphics.Cls()
		//int s = (Graphics.H - 100) div 9
		int s = math.min( (Graphics.H - 100) div 25,Graphics.W div 80 )
		pmx = mx div s
		pmy = my div s
		for ix,iy,ic in Scr.Serial
			//CSayF("Drawing (%d,%d)...",ix,iy) // DEBUG ONLY!!!
			if ic
				bg=ic.bg
				fg=ic.fg
				if MX>=ix*s && MX<(ix+1)*s && MY>=iy*s && MY<(iy+1)*s
					bg=ic.fg
					fg=ic.bg
				end
				Graphics.Color(0,bg,0)
				Graphics.Rect(ix*s,iy*s,s,s)
				Graphics.Color(0,fg,0)
				// Graphics.Line(ix*s,iy*s,(ix+1)*s,(iy+1)*s) // DEBUG ONLY
				//Fnt.Stretch(ix*s,iy*s,s,s,ic.ch)
				if !Fnt[ic.ch]
					switch ic.ch
						case 0
							CSayF("PC: Loading character %03d/%08X > %s",ic.ch,ic.ch,"NULL")
						case '"'
							CSayF("PC: Loading character %03d/%08X > %s",ic.ch,ic.ch,"DOUBLE QUOTE!")
						default
							CSayF("PC: Loading character %03d/%08X > %s",ic.ch,ic.ch,chr(ic.ch))
					end
				end
				Fnt[ic.ch] = Fnt[ic.ch] || LoadNewImage(sprintf("GFX/PC Font/Font.jpbf/%08X.png",ic.ch),sprintf("PCFNT%02X:%03d",ic.ch,ic.ch))
				Fnt[ic.ch].Stretch(ix*s,iy*s,s,s)
			else
				Graphics.Color(0,2,0)
				//Graphics.Color(0,0,255)
				if MX>=ix*s && MX<(ix+1)*s && MY>=iy*s && MY<(iy+1)*s
					Graphics.Color(0,127,0)
				end				
				Graphics.Rect(ix*s,iy*s,s,s	)		
			end			
		end
		Party.Boxes()
		if MY>Graphics.H-100
			Mouse.Draw(MX,MY)
		end
	end
	
	Bool Boot(reset)
		static int b = 0
		if reset
			FSG1970.Cls70()
			CSay("Boot - RESET!")
			b=0
			return false
		end
		//CSayF("%03d 'KB' checked! -> real value %04d",math.min(512,b),b)
		if b>1200
			if b>1290
				return true
			end
			FSG1970.Cls70()
			b++
			FSG1970.DrawScreen()
			return false
		end
		x,y=0,0
		FSG1970.WriteLn("Narcissus - Computer systems")
		FSG1970.WriteF("%4d KB Checked",math.min(512,b))
		FSG1970.DrawScreen()
		//Graphics.Flip()
		//FPS.WaitMinTicks()
		//FPS.Sleep(2)		
		b+=8
		return false
	End
#endregion
	
#region Get Savegame Info	
	table GetSlot(int i,reset)	
		static table slots = {}		
		if reset
			slots[i]=nil
			return nil
		end
		if !slots[i]
			CSayF("Retrieving slot: %d",i)
			table h := GetHeader(i)
			table nr
			nr.have = h && h.Map!=nil
			nr.header = h
			slots[i] = nr
			// print(Serialize("SaveGameSlots",slots))
		end
		return slots[i]
	end
#endregion

	
	void SGFlow()	
		bool Click = Events.MouseHitLeft
		//Dev.ToConsole()
		if !FSG1970.Boot()
			return
		end
		_Locate 5,1
		_Rev
		Write("STAR STORY - SAVE GAME")
		_Norm
		for i=scroll,math.min(scroll+20,maxsg)
			table slot := self.GetSlot(i)
			int sy = 3+(i-scroll)
			_locate 5,sy
			if sy==pmy && pmx<75
				_Bold
				if Click
					//FSG1970.Cls70()
					CLs()
					FSG1970.WriteLn("Saving...")
					FSG1970.DrawScreen()
					Graphics.Flip()
					Events.Poll()
					PerformSaveGame(GetSGFileName(i))
					Flow.GoToFlow("FIELD")
					self.GetSlot(i,true) // Resets slot to force a reload!
					return
				end
			else
				_Norm
			end
			if slot.have				
				FSG1970.WriteF("%s - %s lv %d",slot.header.Map,slot.header.Protagonist,slot.header.ProtaLevel)
			else
				Write("---")
			end
		end
		FSG1970.PutChar(30,79, 0)
		FSG1970.PutChar(31,79,24)
		FSG1970.PutChar('X',79,10)
		FSG1970.DrawScreen()
		if Click && pmx==79
			switch pmy
				case 0
					scroll = math.max(0,scroll-1)
					FSG1970.Cls70()
				case 10
					Flow.GoToFlow("FIELD")
				case 24
					scroll = math.min(maxsg,scroll+1)
					FSG1970.Cls70()
				default
			end
		end
		QuitRequest()
	end
	
	Void _Constructor()
		//var s
		//s = SaveGame.LoadIndieString("Star Story - Scroll")
		s := (SGFile.FileExists("Star Story - Scroll") && SGFile.LoadString("Star Story - Scroll")) || "0"
		CSayF("Getting scroll: %s",lua.tostring(s))
		scroll = lua.tonumber(s || "0") || 0
	end
end

global delegate MainFlow 
Init
	FSG1970._Constructor()
	MainFlow = FSG1970.SGFlow
End

