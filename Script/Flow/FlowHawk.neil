// License Information:
// **********************************************
// 
// src/Tricky Script/Script/Flow/FlowHawk.neil
// (c) Jeroen Broks, 2021, All Rights Reserved.
// 
// This file contains material that is related
// to a storyline that is which is strictly
// copyrighted to Jeroen Broks.
// 
// This file may only be used in an unmodified
// form with an unmodified version of the
// software this file belongs to.
// 
// You may use this file for your study to see
// how I solved certain things in the creation
// of this project to see if you find valuable
// leads for the creation of your own.
// 
// Mostly this file comes along with a project
// that is for most part released under an
// open source license and that means that if
// you use that code with this file removed
// from it, you can use it under that license.
// Please check out the other files to find out
// which license applies.
// This file comes 'as-is' and in no possible
// way the author can be held responsible of
// any form of damages that may occur due to
// the usage of this file
// 
// 
// **********************************************
// 
// version: 21.05.27
// End License Information

#use "Script/Use/Anyway"
#use "Script/Use/Misc/Box"

#undef CleanUp

Class HData
	string Name
	string Map
	string Layer
	string Spot
		
	Constructor(string N,M,L,S)
		Name  = N
		Map   = M
		Layer = L
		Spot  = S
	end
end

group flHawk

	var Mouse = Image.Obtain("MOUSE")
	var ScreenBox = new Box(0,0,Screen.W,Screen.H-128,false)
	Var Font = ImageFont.Obtain("BOXTEXT")
	
	table HawkData = {}
	String World = ""
	
	void Save()
		string ret = "Init\n\tflHawk.HawkData = {}\n\n"
		
		for world,wlist in spairs(HawkData)
			ret += sprintf("\tflHawk.HawkData[\"%s\"] = {}\n",World)
			for node,nd in spairs(wlist)
				switch node
					case "ARRIVE"
						ret += sprintf("\tflHawk.HawkData[\"%s\"][\"%s\"] = \"%s\"\n",World,node,nd)
					case "DISABLED"
						ret += sprintf("\tflHawk.HawkData[\"%s\"][\"%s\"] = %s\n",World,node, Lua.tostring(nd))
					default
						ret += sprintf("\tflHawk.HawkData[\"%s\"][\"%s\"] = new HData(\"%s\",\"%s\",\"%s\",\"%s\")\n",World,node, nd.Name,nd.Map,nd.Layer,nd.Spot)
				end
			end
		end
		ret += "end"
		SaveGame.Data["HAWK.NEIL"] = ret
	end
	
	void Load()
		if SaveGame.HasData("HAWK.NEIL")
			NeilDoString(SaveGame.Data["HAWK.NEIL"])
		else
			HawkData = {}
		end
		HawkData.Physillium = HawkData.Physillium || { ["ARRIVE"]="ARRIVE_PHYSILLIUM" }
		HawkData.Physilium = nil // nullifies the effect of an old bug (world misspelling)
	end
	
	void Add(string spot,string World,string N,string M,string L)
		string node = sprintf("%s.%s.%s",M,L,spot):upper()
		HawkData[World] = HawkData[World] or {}
		HawkData[World].ZZZ = HawkData[World].ZZZ || new HData("<- Back","","")  
		HawkData[World][node] = new HData(N,M,L,spot)
	end
	
	Void AllowYsperon(Bool V)
		HawkData.Ysperon.DISABLED = !V
	End
	
	Void ArriveEvent(string World,string E)
		HawkData[World] = HawkData[World] or {}
		HawkData[World].ARRIVE=E
	End
	
	Void TheGreatReset()
		CSay("The Great Reset!")
		HawkData = { ["Physilium"] = { ["ARRIVE"]="ARRIVE_PHYSILLIUM" } }
	End
		
	Constructor
		HawkData.Physilium = HawkData.Physilium || { ["ARRIVE"]="ARRIVE_PHYSILLIUM" }
	end
	
	get int mx
		return Events.MouseX()
	end
	
	get int my 
		return Events.MouseY()
	end
	
	get bool ml
		return Events.MouseHitLeft()
	end
	
	void GoSpace()
		int wy=20
		for w,d in spairs(HawkData)
			if d.DISABLED
				Graphics.Color(0,105,180)
			elseif my>wy && my<wy+25
				__Cyan
				if ml
					// debug
					// for k,v in spairs(d)
					//	CSayF("%s %s = %s",Lua.type(v),k,Lua.tostring(v))
					// end
					// end debug
					if d.ARRIVE && d.ARRIVE!=""
						CSayF("Schedule: %s",d.ARRIVE)
						Schedule.Add(d.ARRIVE)
						d.ARRIVE=nil
						CSay("Back to field for the scheduled actions!")
						State.GoToFlow("FIELD")
						CSay("Break off the normal event!")
						return
					end
					World=w
				end
			else
				__SkyBlue
			end
			Font.Text(w,40,wy)
			wy+=30			
		end
	end
	
	void GoWorld()
		int ty = 100
		__red
		Font.Text(World,40,40)
		for node,ndata in spairs(HawkData[World])
			if node!="ARRIVE" && node!="DISABLED"
				if my>ty && my<ty+25
					__Cyan
					if node=="ZZZ"
						__Yellow
					// Node ZZZ
					end
					if ml
						if node=="ZZZ"
							World=""
						// Node ZZZ
						else
							Map.GoToMap(NData.Map,NData.Layer,"Trans.Spot."..NData.Spot)
							State.GoToFlow("FIELD")
						// Node ZZZ Else
						end
					// ML
					end
				// Else Mouse Check
				else
					if node=="ZZZ"
						__Ember						
					else
						__SkyBlue
					// ZZZ
					end
				// Mouse Check
				end
				Font.Text(ndata.Name,40,ty)
				ty+=30
			// Node check
			end
		// For loop
		end
	// Method
	end
	
	void Flow()
		Dev.ToConsole()
		ScreenBox.Draw()
		if World==""
			GoSpace()
		else
			GoWorld()
		end
		// Party
		Party.Boxes()
		// Mouse
		Mouse.Draw(mx,my)		
	end

end

Global Delegate Apollo_Flow = flHawk.Flow

#if CleanUp
Global Void CONSOLE_OnlyLostPlanet()
	Table Kill = {}
	For k,_ in pairs(flHawk.HawkData)
		CSayF(Lua.type(k).." "..Lua.tostring(k))
		if k!="The Lost Planet"
			Kill += k
			CSay("Gonna kill: "..k)
		end
	end
	For victim in Each(Kill)
		CSayF("Killing: "..Lua.tostring(victim))
		flHawk.HawkData[victim]=nil
	End
End
#fi