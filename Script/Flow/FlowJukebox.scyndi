// License:
// 	  src/Script/Script/Flow/FlowJukebox.scyndi
// 
// 	  Version: 25.02.12 XV
// 	
// 	  Copyright (C) 2021, 2025 Jeroen Petrus Broks
// 	
// 	  ===========================
// 	  This file is part of a project related to the Phantasar Chronicles or another
// 	  series or saga which is property of Jeroen P. Broks.
// 	  This means that it may contain references to a story-line plus characters
// 	  which are property of Jeroen Broks. These references may only be distributed
// 	  along with an unmodified version of the game.
// 
// 	  As soon as you remove or replace ALL references to the storyline or character
// 	  references, or any termology specifically set up for the Phantasar universe,
// 	  or any other univers a story of Jeroen P. Broks is set up for,
// 	  the restrictions of this file are removed and will automatically become
// 	  zLib licensed (see below).
// 
// 	  Please note that doing so counts as a modification and must be marked as such
// 	  in accordance to the zLib license.
// 	  ===========================
// 
// 
// 	  zLib license terms:
// 	
// 	  This software is provided 'as-is', without any express or implied
// 	  warranty.  In no event will the authors be held liable for any damages
// 	  arising from the use of this software.
// 
// 	  Permission is granted to anyone to use this software for any purpose,
// 	  including commercial applications, and to alter it and redistribute it
// 	  freely, subject to the following restrictions:
// 	
// 	  1. The origin of this software must not be misrepresented; you must not
// 	     claim that you wrote the original software. If you use this software
// 	     in a product, an acknowledgment in the product documentation would be
// 	     appreciated but is not required.
// 	  2. Altered source versions must be plainly marked as such, and must not be
// 	     misrepresented as being the original software.
// 	  3. This notice may not be removed or altered from any source distribution.
// End License


Script

#use "Libs/SCI/Sys"
#use "Libs/SCI/Events"
#use "Libs/SCI/SString"
#use "Libs/SCI/Graphics"
#use "Libs/SCI/InterVar"

#use "Libs/Music"
#use "Libs/LinkedList"

#use "Script/Data/General/JukeData"

#use "Script/Use/Link"
#use "Script/Use/Anyway"

#use "Script/Use/Convert/Flow" 


ReadOnly Var ButtonUp = ObtainImage("UP")
ReadOnly Var ButtonDown = ObtainImage("DOWN")
ReadOnly Var Mouse = ObtainImage("MOUSE")
ReadOnly Var Font  = ObtainFont("BOXTEXT")
ReadOnly Var Head  = ObtainFont("BIGTEXT")
ReadOnly Var FSys  = ObtainFont("SYSFONT")

int ReturnTo = 0
global const int ReturnMain  = 1
global const int ReturnHawk  = 2

Var Playing = nil


#region ExtraItemsClass
Class XItems
	Static Var Lijst = new TLinkedList()
	Static Int SY = 0
	ReadOnly Int _Y
	ReadOnly Delegate Action
	ReadOnly Delegate Allowed
	ReadOnly String Caption
	
	Get Int Y
		Return Graphics.H - 30 - _Y
	End
	
	Constructor(string AC, Act, Allw)
		Action  = Act
		Allowed = Allw
		Caption = AC
		_Y = SY
		SY += 30
	End
End
Init
	// Quit
	//Bool Always()
	dDef Always
		Return True
	End
	//Void Quit()
	dDef Quit
		Switch ReturnTo
			Case 1
				Flow.Current="MAINMENU"
				Music.Play("Music/Introduction/Introduction.ogg")
			Case 2
				Flow.Current="FIELD"
				MapScript.MapMusic()
			Default
				Lua.Error("Unknown Return!")
		End
	End
	XItems.Lijst.AddLast( new XItems("Back",Quit,Always) )
	
	// Set to Hawk
	//Bool AlHawk()
	dDef AlHawk
		Return ReturnTo==2 && Playing!=nil && gstring.Hawk_Music!=Playing.File
	End
	//Void StHawk()
	dDef StHawk
		gstring.Hawk_Music=Playing.File
	End
	XItems.Lijst.AddLast(new XItems("Set as Hawk tune",StHawk,AlHawk) )
	
	// Website
	//Void GoSite()
	dDef GoSite
		Sys.OpenURL(Playing.Site)
	End
	//Bool AlSite()
	dDef AlSite
		Return Playing!=nil && Playing.Site!=""
	End
	XItems.Lijst.AddLast(new XItems("Visit artist's website",GoSite,AlSite) )
End	
#endregion



Init
	Lua.ReturnMain  = ReturnMain
	Lua.ReturnHawk = ReturnHawk
End

Table License

Void Play(Track)
	Playing = Track
	Music.Play(Track.File)
	License = {}
	Table LicChop = XSplit(Playing.License," ")
	Int i = 0
	For W in Each(LicChop)
		If !License[i]
			License[i]=W
		Else
			if FSys.Width(License[i].." "..W)<Graphics.W Div 2
				License[i]+=" "..W
			Else
				i++
				License[i]=W
			End
		End
	End
End

Global Void Arrival(int i)
	ReturnTo = i
End

Int Scroll
Global Void MainFlow()
	//Static Int Scroll = 0
	Int Y   = 40 - Scroll
	Int MX  = Events.MouseX
	Int MY  = Events.MouseY
	Bool ML = Events.MouseHitLeft
	// Header
	__Red
	Head.Text("Jukebox",Graphics.W Div 4,0,2,0)
	// Track list
	For JukeTrack,JukeLink In JukeData.Lijst.Each
		If Y>40 && Y<Graphics.H-40
			__Ember
			If MX<(Graphics.W div 2)-32 && MY>Y && MY<Y+25
				__Yellow
				IF ML
					Play(JukeTrack)
					CSayF("User chose to play: %s",JukeTrack.Title)
				END
			End	
			Font.Text(Ternary(Font.Width(JukeTrack.Title)<Graphics.W div 2,JukeTrack.Title,Left(JukeTrack.Title,20).."..."),5,Y)
		End
		Y+=25
	End
	// Scrolling
	If Scroll>0
		__ember
		If MY<64 && MX<Graphics.W div 2 && MX>(Graphics.W div 2)-32
			__yellow
			If ML
				Scroll = math.max(32,Scroll - 32)
			End
		End
		
		ButtonUp.Draw((Graphics.W div 2) - 32,5)
	End
	If Y>Graphics.H-50
		__ember
		If MY>Graphics.H-40 && MX<Graphics.W div 2 && MX>(Graphics.W div 2)-32
			__yellow
			If ML
				Scroll += 32
			End
		End
		ButtonDown.Draw((Graphics.W div 2) - 32,Graphics.H - 40)
	End
	// Track Info
	If Playing
		Static Int X = Graphics.W Div 2
		__SkyBlue
		Head.Text("Playing:",X,40)
		Head.Text("Artist:",X,100)
		Head.Text("License:",X,160)
		__Ember
		Ternary(Font.Width(Playing.Title) <Graphics.W Div 2,Font,FSys).Text(Playing.Title,X,75)
		Ternary(Font.Width(Playing.Artist)<Graphics.W Div 2,Font,FSys).Text(Playing.Artist,X,135)
		//FSys.Text(Playing.License,X,195)
		For i,l In Pairs(License)
			FSys.Text(l,X,195+(i*25))
		End
	End
	// Extra Menu
	For XI in XItems.Lijst.Each
		If XI.Allowed()
			__SkyBlue
			If MX>Graphics.W Div 2 && MY>XI.Y && MY<XI.Y+30
				__Cyan
				If ML
					XI.Action()
				End
			End
			Font.Text(XI.Caption,(Graphics.W div 4) * 3,XI.Y,2,0)
		End
	End
	// Mouse
	__White
	Mouse.Draw(MX,MY)
	// debug
	//Dev.ToConsole()
	QuitRequest()
End
