// License Information:
// src/Tricky Script/Script/Flow/FlowShoot.neil
// Version: 21.06.29
// Copyright (C) 2021 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

#use "Script/Use/Anyway" 

ReadOnly Var Font = ImageFont.Obtain("BOXTEXT")
ReadOnly var Mouse = Image.Obtain("MOUSE")

Class Basis
	Abstract Void Draw()
	Abstract Void Update()
	
	Void Arrive()
	End
	
	Static Table Stages = {}
	Static String Stage = {}
	
	Static Void GoStage(string s)
		s = s:upper()
		Basis.Stage = s
		Lua.assert(Basis.Stages[s],"No Blockshooter stage named: "..s)
		Basis.Stages[s].Arrive()
	End
	
	Static Void NewStage(string s,o)
		Stages[s:upper()]=o
	End
	
	Static Get Bool ML
		Return Events.MouseHitLeft()
	End
	
	Static Get Int MY
		Return Events.MouseY()
	End

	Static Get Int MX
		Return Events.MouseX()
	End
	
	Static Int ProjSiz
	
End

Class Explain Extends Basis
	Table Text
	
	
	Constructor
		Self.ProjSiz = 16
		For i In Each{32,64,128,256}
			If i*20<Screen.W-200
				Self.ProjSiz = i
			End
		End
		Text = {}
		Text += sPrintF("A block is stationed on a grid by %dx%d per tile",Self.ProjSiz,Self.ProjSiz)
		Text += "The goal is to guess its x-axis min 1, max 20"
		Text += "You enter this x-axis and press enter and a"
		Text += "projecttile will be shot on this same value"
		Text += "and destroy the block."
		Text += ""
		Text += "You get 10 blocks, the goal is to hit as many"
		Text += "as possible"
		Text += ""
		Text += "* Hit any key or click to continue *"
	End
	
	Void Draw()
		For i,v in Pairs(Text)
			__SkyBlue
			If Prefixed(v,"*")
				__Ember
			End
			Font.Text(v,10,i*30)
		End
		__White
	End
	
	Void Update()
		If self.ML
			self.GoStage("Game")
			Return
		End
		For i=1,255
			If Events.KeyHit(i)
				self.GoStage("Game")
				Return
			End
		End
	End

End

Class Game Extends Basis

	Static Int Shot
	Static Int Hit
	Static Int Miss
	Static Int ProjPos
	Static Int ShotPos
	
	
	Void Draw()
		__Ember
		Graphics.Rect(0,0,Screen.W,Screen.H)
	End
	
	Void Update()
		Shot = 0
		Hit = 0
		Miss = 0
		Self.GoStage("Enter")
	End
	
	Static Void ShowProjectile()
		__SkyBlue
		Graphics.Rect((ProjPos-1)*Self.ProjSiz,0,Self.ProjSiz,Self.ProjSiz)
	End
	
End

Class Enter Extends Basis
	String Sht
	Int Hover = 0
	
	Void Arrive()
		Game.Shot++
		Sht = ""
		Game.ProjPos = Math.random(1,20)
	End
	
	Void Draw()
		String PS = SprintF("%d> Postion cannon: ",Game.Shot)
		Int PSW = Font.TextWidth(PS)
		Game.ShowProjectile()
		Hover = 0
		For i=1,20
			Int y = i*30
			__Ember
			If Self.MY>y && Self.MY<y+30 && Self.MX>Screen.W-150
				__Yellow
				Hover=i
			End
			Font.Text(sPrintF("%02d",i),Screen.W - 10,y,1,0)
		End		
		__SkyBlue
		Font.Text(PS,5,Screen.H,0,1)
		__Ember
		Font.Text(Sht.."_",6+PSW,Screen.H,0,1)
	End
	
	Void Update()
		For i=0,9
			If Events.KeyHit(i+48)
				Bool Allow
				Switch i
					Case 0
						Allow = Sht=="1" || Sht=="2"
					Default
						Allow = Sht=="1" || Sht==""
				End
				If Allow
					Sht+=Chr(i+48)
				End
			End
		End
		If Events.KeyHit(8) 
			Switch #Sht
				Case 0
					// Do Nothing
				Case 1
					Sht=""
				Case 2
					Sht=Left(Sht,1)
				Default
					// Huh?
			End
			// Dirty, yet effective! 
		End
		If Events.KeyHit(13) && Sht!=""			
			Game.ShotPos=Lua.tonumber(Sht)
			Basis.GoStage("Shoot")
		End
		If Basis.ML && Hover>0
			Game.ShotPos=Hover
			Basis.GoStage("Shoot")
		End
	End
End

Class Shoot Extends Basis
	Static Int PY
	
	Static Get Int PX
		Return (Game.ShotPos-1) * Basis.ProjSiz
	End
	
	Static Get Int PS
		Return Basis.ProjSiz
	End
	
	Void Arrive()
		PY = Screen.H
	End
	
	Delegate Line = Graphics.Line
	
	Void Draw()
		__Ember
		// Top
		Line(PX + (PS div 2),PY,PX,PY+PS) 
		Line(PX + (PS div 2),PY,PX+PS,PY+PS) 
		// Left
		Line(Px,PY+PS,Px,PY+(PS*4))
		// Right
		Line(Px+PS,PY+PS,Px+PS,PY+(PS*4))
		// Bottom
		Line(PX,PY+(PS*4),PS+PX,PY+(PS*4))
		// Block
		Game.ShowProjectile()
	End
	
	Void Update()
		PY-=2
		If PY<=0
			If Game.ShotPos == Game.ProjPos
				Game.Hit++
				Basis.GoStage("Hit")
			Else
				Game.Miss++
				Basis.GoStage("Enter")
			End
		End		
	End
End

Class Hit Extends Basis

	ReadOnly Var Ontploffing = Audio.LoadNew("Audio/Scenario/Explosion.ogg","ONTPLOFFING")
	Bool Flits
	int CD
	
	Void Arrive()
		Ontploffing.Play()
		CD = math.random(5,10)
	End
	
	Get Int B2I		
		If Flits
			return 255
		Else
			return 0
		End
	End
	
	Void Draw()
		Graphics.Color(B2I,0,0)
		Graphics.Rect(0,0,Screen.W,Screen.H)
		Graphics.Color(255-B2I,0,0)
		Font.Text("** HIT **",Shoot.PX + (Shoot.PS div 2),Shoot.PS div 2,2,2)
	End
	
	Void Update()
		Flits = !Flits
		CD--
		If CD<=0
			Basis.GoStage("Enter")
		End
	End
	
End


Global Void Apollo_Flow()
	Basis.Stages[Basis.Stage].Draw()
	Basis.Stages[Basis.Stage].Update()
	__White
	Mouse.Draw(Basis.MX,Basis.MY)
	Dev.ToConsole()
End

Init
	Basis.NewStage("Explain",new Explain())
	Basis.NewStage("Enter",new Enter())
	Basis.NewStage("Game",new Game())
	Basis.NewStage("Shoot",new Shoot())
	Basis.NewStage("Hit",new Hit())
	Basis.GoStage("Explain")
End