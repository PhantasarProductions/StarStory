// License:
// 	  src/Script/Script/Flow/MiniGame/MemoryAnhysbys.scyndi
// 
// 	  Version: 25.01.29 VIII
// 	
// 	  Copyright (C) 2015, 2021, 2025 Jeroen Petrus Broks
// 	
// 	  ===========================
// 	  This file is part of a project related to the Phantasar Chronicles or another
// 	  series or saga which is property of Jeroen P. Broks.
// 	  This means that it may contain references to a story-line plus characters
// 	  which are property of Jeroen Broks. These references may only be distributed
// 	  along with an unmodified version of the game.
// 
// 	  As soon as you remove or replace ALL references to the storyline or character
// 	  references, or any termology specifically set up for the Phantasar universe,
// 	  or any other univers a story of Jeroen P. Broks is set up for,
// 	  the restrictions of this file are removed and will automatically become
// 	  zLib licensed (see below).
// 
// 	  Please note that doing so counts as a modification and must be marked as such
// 	  in accordance to the zLib license.
// 	  ===========================
// 
// 
// 	  zLib license terms:
// 	
// 	  This software is provided 'as-is', without any express or implied
// 	  warranty.  In no event will the authors be held liable for any damages
// 	  arising from the use of this software.
// 
// 	  Permission is granted to anyone to use this software for any purpose,
// 	  including commercial applications, and to alter it and redistribute it
// 	  freely, subject to the following restrictions:
// 	
// 	  1. The origin of this software must not be misrepresented; you must not
// 	     claim that you wrote the original software. If you use this software
// 	     in a product, an acknowledgment in the product documentation would be
// 	     appreciated but is not required.
// 	  2. Altered source versions must be plainly marked as such, and must not be
// 	     misrepresented as being the original software.
// 	  3. This notice may not be removed or altered from any source distribution.
// End License


// This is just a translation, or a "port" from LAURA II to Apollo
// With maybe a few adaptions here and there.
// The original file was created in 2015, hence the original copyright year.
// In 2021 the Neil "port" was made for Apollo
// In 2025 the game and this the second "port" but now to Scyndi for SCI was
// made.


// Definitions
// skill = Sys.Val(Var.C("%SKILL"))

Script

#use "Libs/SCI/Sys"
#use "Libs/SCI/Audio"
#use "Libs/SCI/Events"
#use "Libs/SCI/Graphics"

#use "Script/Use/Link"
#use "Script/Use/Anyway"

#use "Script/Use/Convert/Flow"

readonly var rand = math.random
readonly var SFX = Audio.Load("Audio/SFX/Memory/MemEffect.ogg")
readonly var GoedSFX = Audio.Load("Audio/SFX/MBOX1.ogg")
//readonly delegate Flip = Graphics.Flip

readonly var Font = ObtainFont("BIGTEXT")

void DarkText(string txt,int x, int y)
	Font.DarkText(txt,x,y)
end

table col = {}
Init
	// 1
    col += { ["R"]=255, ["G"]=  0, ["B"]=  0}
    // 2
    col += { ["R"]=255, ["G"]=255, ["B"]=  0}
    // 3
    col += { ["R"]=  0, ["G"]=  0, ["B"]=255}
    // 4
    col += { ["R"]=255, ["G"]=150, ["B"]=  0} 
    // 5
    col += { ["R"]=180, ["G"]=  0, ["B"]=255} 
    // 6
    col += { ["R"]=  0, ["G"]=255, ["B"]=  0}
    // 7
    col += { ["R"]=255, ["G"]=  0, ["B"]=  0}
    // 8
    col += { ["R"]=255, ["G"]=255, ["B"]=  0} 
    // 9
    col += { ["R"]=  0, ["G"]=  0, ["B"]=255} 
    // 10
    col += { ["R"]=255, ["G"]=150, ["B"]=  0}
    // 11
    col += { ["R"]=180, ["G"]=  0, ["B"]=255} 
    // 12
    col += { ["R"]=  0, ["G"]=255, ["B"]=  0} 
End

//series = ({
table series
table allseries
table aseries = {}
Init
	allSeries = {}
	allSeries["#001"] = { [1]={2,5}, [2]={3,6}, [3]={5,8} }
	allSeries["#003"] = { [1]={3,7}, [2]={4,9}, [3]={6,10} }
    series = allseries[Map.Layer][__skill]
    sl = series[1]
end    
           
table rowY = ({{250},{125,375},{125,250,375}})[__skill]           
           
var sl 

readonly var Tile = LoadImage("GFX/MiniGames/AnhysbysMemory/Tile.png","MEMTILEFORYANHYSBYS")

// And the actual game itself
Var CSeries
Void MakeSeries(serlen)
	CSeries = CSeries || {}
	if __skill==3 
		CSeries = {} 
	end
	sl = sl || serlen || 1
	repeat
		CSeries[Len(CSeries)]=rand(1,__skill*4)
	until Len(CSeries)>=sl
	ASeries = {}
End         

Bool DrawPuzzle(light,allowclick)
	Graphics.Cls() //Image.Cls()
	//local x,y,clicked
	int x
	int y
	bool clicked
	//local mx,my=MouseCoords()
	int  mx = Events.MouseX
	int  my = Events.MouseY
	bool ml = Events.MouseHitLeft
	for i=0,(__skill*4)-1 
    	y = math.ceil(i/4)
    	x = i - ((y-1)*4)
    	__White
    	clicked = (allowclick!=nil && allowclick!=false) && ml && mx>(x*125) && mx<(x*125)+100 && my>rowY[y] && my<rowY[y]+100
    	if clicked 
    		ASeries[Len(ASeries)] = i
    		//SFX('Audio/SFX/Memory/MemEffect.ogg')
    		SFX.Play()
    	end 
    	if clicked || i==light  
    		Graphics.Color(col[i].R,col[i].G,col[i].B) 
    	end
    	//Image.Show(Tile,(x*125),rowY[y])
    	Tile.Draw((x*125),rowY[y])
    end
    Party.Boxes() //ShowParty()
    //Dev.ToConsole()
    return clicked
end

void TimeSleep(int a)
	for i=1,a
		Sys.Sleep(1)
		Events.Poll()
	end
end

void DoeHetEvenVoor()
	for light in each(CSeries)
		DrawPuzzle()
		Flip() 
		TimeSleep(500)
		DrawPuzzle(light)
		SFX.Play() //SFX('Audio/SFX/Memory/MemEffect.ogg'); 
		Flip()
		TimeSleep(500)
		DrawPuzzle()
		Flip() 
		TimeSleep(500)
    end
    DrawPuzzle() //; -- Prevent last tile quickly lighting up again, causing confusion.    
end  

void KillYourself()
	//LAURA.Flow("FIELD")
	// Image.Free(Tile)
	//MS.Destroy("MINIGAME")
	Tile.Kill()	
	State.GoToFlow("FIELD")
end


Void CheckPuzzle()
	if Len(ASeries)==0 
		return 
	end
	for i=0,Len(ASeries)-1 
    	if ASeries[i]!=CSeries[i] 
    		DarkText("OOPS! That's not right!",400,250,2,2,255,0,0)
    		DarkText("Let's try that again!"  ,400,350,2,2,255,0,0)
    		Flip()
    		TimeSleep(2500)
    		DoeHetEvenVoor()
    		ASeries = {}
    		return
       end
    end
    if Len(ASeries)>=Len(CSeries)
    	sl = sl + 1
    	if sl>series[2] 
    		//-- Sys.Error("Puzzle Solved not yet implemented!")
    		GoedSFX.Play() //SFX("Audio/SFX/MBOX1.ogg")
    		Schedule.Add("Open_PD") //MS.Run("MAP","Open_PD")
    		KillYourself()
    	else
    		MakeSeries()
    		DoeHetEvenVoor()
    	end
    end    
end

//function MAIN_FLOW()
ReadOnly Var Mouse = ObtainImage("MOUSE")
global void MainFlow()	
	plua c = DrawPuzzle(false,true)
	CheckPuzzle()
	//ShowMouse()
	Mouse.Draw( Events.MouseX , Events.MouseY )
	Flip()
	if c 
		TimeSleep(500) 
	end
end

Init
	//function GALE_OnLoad()
	MakeSeries(series[1])
	DoeHetEvenVoor()
	//MINI("Repeat the sequence",0,180,255)
end
//--[[
//function GALE_OnUnload() CSay("Mini-game destroyed")
//end]]
