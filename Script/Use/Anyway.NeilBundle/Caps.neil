// License Information:
// **********************************************
// 
// src/Tricky Script/Script/Use/Anyway.NeilBundle/Caps.neil
// (c) Jeroen Broks, 2020, 2021, All Rights Reserved.
// 
// This file contains material that is related
// to a storyline that is which is strictly
// copyrighted to Jeroen Broks.
// 
// This file may only be used in an unmodified
// form with an unmodified version of the
// software this file belongs to.
// 
// You may use this file for your study to see
// how I solved certain things in the creation
// of this project to see if you find valuable
// leads for the creation of your own.
// 
// Mostly this file comes along with a project
// that is for most part released under an
// open source license and that means that if
// you use that code with this file removed
// from it, you can use it under that license.
// Please check out the other files to find out
// which license applies.
// This file comes 'as-is' and in no possible
// way the author can be held responsible of
// any form of damages that may occur due to
// the usage of this file
// 
// 
// **********************************************
// 
// version: 21.02.25
// End License Information
module

	readonly int InventorySockets
	readonly int InventorySocketRow
	readonly int InventoryMaxStack
	readonly int InventoryMaxVaultStack
	
	readonly int NeedExp
	
	get int MaxCash
		switch __skill
			case 1
				return 2000000000
			case 2
				return  500000000
			case 3
				return  100000000
			default
				// Cheater!
				return          1
		end
	end
	
	get int Cycle
		return math.max(1,gv.gint.GameCycle)
	end
	
	set int Cycle
		gv.gint.GameCycle = math.max(1,value)
	end
	
	int LvCycle(int a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z)
		plua work = { a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z }
		return math.min(10000,work[math.max(1,math.min(Cycle,#work))])
	end
	
	get int LevelMargin
		switch __skill
			case 1
				return 10000
			case 2
				return 10
			case 3
				return 5
			default
				return 0
		end
	end
	
	get int LevelCap
		static var LC
		switch __skill
			case 1
				LC = LC || { 250, 500, 1000, 5000, 10000 } //, -- Easy Mode
			case 2
				LC = LC || { 200, 400, 750,  4500, 7500, 10000} //, -- Medium Mode
			case 3
				LC = LC || { 150, 300, 500,  3000, 5000, 6000, 10000} //-- Hard Mode
			default
				Lua.error("Cap skill error!")
		end
		return LC[math.min(Cycle,#LC)]
	end

	CONSTRUCTOR
		// case 0 is to prevent bugs during the main menu, new game and load game setups
		switch __skill
			case 1 0
				InventorySockets = 100         //-- Max sockets
				InventorySocketRow = 10        //-- Max number of sockets per row
				InventoryMaxStack = 25         //-- Max number of items that may be stacked on a socket
				InventoryMaxVaultStack = 500   //-- Max number of items that may be stacked on a vault socket (where each (unique) item just has one socket)
				NeedExp = 1750                 //-- How much experience points does it take to gain a level?
			case 2
				InventorySockets = 50
				InventorySocketRow = 10
				InventoryMaxStack = 10
				InventoryMaxVaultStack = 250
				NeedExp = 5000
			case 3
				InventorySockets = 25
				InventorySocketRow = 5
				InventoryMaxStack = 1
				InventoryMaxVaultStack = 100
				NeedEXP = 10000
			default
				Lua.error("Unknown skill setting while defining caps")
		end
	end

end