// License Information:
// src/Tricky Script/Script/Use/Link.NeilBundle/Items_h.neil
// Version: 21.05.26
// Copyright (C) 2020, 2021 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
table TrueItem

void LdItems()
	State.LoadNew("SUB_ITEMS","Script/Subs/SubItems.neil")
end

Global Void JwlRecalc(string char)
	LdItems()
	State.Call("SUB_ITEMS","JewelRecalc",sprintf("\"%s\"",char))
End

void MkTrueItem(string it)
	it = it:upper()
	if TrueItem[it]
		return
	end
	LdItems()
	table m
	m.__index = var(s,string k)
		k = k:upper()
		switch k
			case "ICON" "ICONFILE"
				string f = ISGET.String("SUB_ITEMS","lua.tostring(ItemBaseGet(\""..it.."\",\"ICON\"))")
				if k=="ICONFILE"
					return f
				end
				var ret = Image.LoadNew(f,"ITEM__"..it)
				ret.HotBottomCenter()
				return ret
			case "ABL_AP" "ABL_SPEED" "ABL_APCUT" "ABL_DBLSPEED" "ABL_INSTANT" "ABL_CANCEL" "ABL_DBLPOWER" "ACTSPEED" "ATTACKPOWER" "HEALING" "ITM_SELLPRICE" "ITM_BUYPRICE" "ITM_SHILDERPRICE" "APRECOVER"
				return ISGET.Int("SUB_ITEMS","ItemBaseGet(\""..it.."\",\""..k.."\")")
			case "ARM_HIT_PROCENT" "GRANTEXP"
				// Just a block, as the previous one got too big...
				// Figures.
				return ISGET.Int("SUB_ITEMS","ItemBaseGet(\""..it.."\",\""..k.."\")")
			case "INDISCRIMINATE" "ITM_SELLABLE" "DODGABLE" "USECOMBAT" "USEFIELD"
				return ISGET.Bool("SUB_ITEMS","ItemBaseGet(\""..it.."\",\""..k.."\")")
			case ".HASMEMBER"
				bool Check(m)
					return ISGET.Bool("SUB_ITEMS","ItemMemberCheck(\""..it.."\",\"".. m.."\")")
				End
				Return Check
			default
				if prefixed(k,"CAUSE") || prefixed(k,"CURE") || prefixed(k,"PERMABUFF")
					return ISGET.Bool("SUB_ITEMS","ItemBaseGet(\""..it.."\",\""..k.."\")")
				end
				if Prefixed(k,"BUFF_")
					return ISGET.Int("SUB_ITEMS","ItemBaseGet(\""..it.."\",\""..k.."\")")
				end
				return ISGET.String("SUB_ITEMS","lua.tostring(ItemBaseGet(\""..it.."\",\""..k.."\"))")			
		end
	end
	
	void nindex(s,string k,v)
		lua.error( "Item data base is read-only, so I cannot assign " .. tostring(v) .. " to " .. k .." in " .. it )
	end
	m.__newindex = nindex
	TrueItem[it] = lua.setmetatable({},m)
end

bool GiveItem(string it,string ch,allowvault)
	plua ret = ISGET.Bool("SUB_ITEMS",sprintf("S_GiveItem(\"%s\",\"%s\")",it,ch))
	if (!ret) && allowvault
		Lua.Neil.Globals.Vault.Store(it)
	end
	return ret
end

quickmeta Item

	newindex
		lua.error("The table 'Item' is READ-ONLY")
	end
	
	index
		if Key:upper()=="GIVE" || Key:upper()=="GIVEITEM"
			return GiveItem
		end
		MkTrueItem(key)
		return TrueItem[key:upper()]
	end

end

group Vault
	void Store(string TItem,int amm=1)
		LdItems()
		State.Call("SUB_ITEMS","StoreVault",sprintf("\"%s\",%d",TItem,amm))
	end
	void Remove(string TItem,int amm=1)
		LdItems()
		State.Call("SUB_ITEMS","StoreVault",sprintf("\"%s\",%d",TItem,0-amm))
	end
	int Has(string key)
		LdItems()
		return ISGET.Int("SUB_ITEMS",sprintf("GetVault(\"%s\")",key))
	end
	get table Contents
		LdItems()
		string c = ISGet.String("SUB_ITEMS","VaultContents()") 
		//print("Contents received:",c)
		return Split(c,";")
	end
	get delegate Each
		int i=0
		table c = Contents		
		var Ret()
			i++
			if i>#c 
				return nil
			end
			return c[i]
		end
		return Ret
	end
	get string Script
		LdItems()
		return ISGet.String("SUB_ITEMS","VaultScript()") 
	end
	void Save()
		LdItems()
		SaveGame.Data["Vault.neil"] = Script
	end
	void Reset()
		LdItems()
		State.Call("SUB_ITEMS","VaultReset","nil")
	end
end