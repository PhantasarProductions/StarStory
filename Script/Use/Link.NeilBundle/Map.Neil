// License Information:
// src/Tricky Script/Script/Use/Link.NeilBundle/Map.Neil
// Version: 20.09.27
// Copyright (C) 2020 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
global table MapScript

module
	get delegate CSayF
		static delegate ret = Lua.Neil.Globals.CSayF
		return ret
	end

	void Call(string func,para)
		string p 
		switch type(para)
			case "nil"
				p = "nil"
			case "string"
				p = "\""..para.."\""
			case "boolean" "number"
				p = tostring(para)
			case "table"
				for i,pr in ipairs(para)
					if i!=1
						p += ","
					end
					p += pr
				end
			default
				Lua.error("Untransferrable type: "..type(para))
		end
		State.Call("FLOW_FIELD",func,p)
	end
	
	void MCall(string func,a,b,c,d,e,f,g,h)
		string pr
		for i,p in ipairs {a,b,c,d,e,f,g,h}
			if i>1 
				pr += ", "
			end
			switch lua.type(p)
				case "string"
					pr += "\""..p.."\""
				case "number" "boolean"
					pr += tostring(p)
				default
					lua.error("Illegal MCall type "..lua.type(p))
			end
		end
		State.Call("FLOW_FIELD",func,pr)
	end
	
	void ActorMoveTo(string actor,a,b)
		MCall("FldMap.ActorMoveTo",Actor,a,b)
	end
	
	void MoveTo(a,b)
		MCall("FldMap.ActorMoveTo","PLAYER",a,b)
	end
	
	set string Layer
		Print("= Going to Layer: "..value)
		Call("FldMap.SetMember",{"\"Layer\"","\""..value.."\""})
	end
		
	void Spawn(string actor,string spot)
		CSayF("Spawning actor '%s' on spot '%s'",actor,spot)
		Call("FldMap.CurLayer.Spawn",{"\""..actor.."\"","\""..spot.."\""})
	end
		
	void SetObjField(string obj,string field,value)
		plua v = lua.tostring(value)
		if lua.type(value)=="string"
			v = "\""..value.."\""
		end
		Call("FldMap.SetObjField",{"\""..obj.."\"","\""..field.."\"",v})
	end
	
	void SpawnPlayer(string spot)
		Spawn("PLAYER",spot)
	end

	void LoadMap(string Map)
		if ApolloState.Name=="MAPSCRIPT"
			MCall("GrSchedule.Add","LOAD:"..Map)
		else
			Call("FieldMap.LoadMap",Map)
		end
	end
	
	void Load(string Map)
		LoadMap(Map)
	end
	
	void Script(string script,string para="nil")
		CSayF("Executing MapScript: %s(%s)",Script,para)
		State.Call("MAPSCRIPT","MScript."..script,para)
	end
	
	void Schedule(string func)
		CSayF("Scheduled: %s",func)
		State.Call("FLOW_FIELD","GrSchedule.Schedule","\""..func.."\"")
	end
	
	void ReMap()
		Call("FldMap.KthuraMap.ReMap","nil")
	end
	
	set bool AutoScroll
		Call("FldMap.SetAutoScroll",value)
	end
	
	get bool AutoScroll
		return ISGET.Bool("FLOW_FIELD","FldMap.AutoScroll")
	end
	
	void Kill(string ObjTag,perma)
		MCall("FLDMap.Kill",ObjTag,perma==true)
	end
	
	void SG()
		MCall("SGMap","nil")
	end
	
	CONSTRUCTOR
		table m
		m = {}
		delegate idx(s,string key)
			void f(para)
				para = para || "nil"
				Script(key,para)
			end
			return f
		end
		m.__index = idx
		Lua.setmetatable(MapScript,m)
	end
	
end