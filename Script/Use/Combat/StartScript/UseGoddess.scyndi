// License:
// **********************************************
// 
// src/Script/Script/Use/Combat/StartScript/UseGoddess.scyndi
// (c) Jeroen Broks, 2021, 2025, All Rights Reserved.
// 
// This file contains material that is related
// to a storyline that is which is strictly
// copyrighted to Jeroen Broks.
// 
// This file may only be used in an unmodified
// form with an unmodified version of the
// software this file belongs to.
// 
// You may use this file for your study to see
// how I solved certain things in the creation
// of this project to see if you find valuable
// leads for the creation of your own.
// 
// Mostly this file comes along with a project
// that is for most part released under an
// open source license and that means that if
// you use that code with this file removed
// from it, you can use it under that license.
// Please check out the other files to find out
// which license applies.
// 
// This file comes 'as-is' and in no possible
// way the author can be held responsible of
// any form of damages that may occur due to
// the usage of this file
// 
// 
// **********************************************
// 
// 
// version: 25.02.12 XVI
// 
// End License


module

#use "Libs/XMath"

#use "Libs/SCI/Sys"
#use "Libs/SCI/Graphics"

#use "Script/Use/Anyway"

#use "Script/Use/Convert/Flow"
#use "Script/Use/Convert/RPG2Stat"

locExtern Combat_Fighter "Scyndi.Class.Combat_Fighter"
locExtern Screen "Scyndi.Class.Graphics"

Var FGoddess

QuickMeta GDrone
	Index
		If Lua.type(key)=="string" && Upper(key)=="EACH"
			int i = 0
			//Var Ret()
			dDef Ret
				i++
				If i>__skill*3
					return nil,nil
				End
				Return Combat_Fighter.Fighters[sprintf("FOE_%d",i)],i
			End
			Return Ret
		End
		Return Combat_Fighter.Fighters[sprintf("FOE_%d",key)]
	End
End

Table Degs = {}

Void Goddess_AI_Reset(_Foe)
	//_Foe.AI_Actions 
	CSayF("Resetting abilities for %s(%s) level %d",_Foe.Tag,_Foe.Name,_Foe.Level)
	
	for A in Each(_Foe.RawData.Acts)
		if !_Foe.RawData.ActMinLevel[A]
			CSayF("Warning! Action '%s' has a nil value!\007",A)
		elif !_Foe.level
			Lua.error(sprintf("Creating foe '%s' but it appears to have a nil value for a level!",_Foe.Tag))
		elif _Foe.level>=_Foe.RawData.ActMinLevel[A]
			_Foe.AI_Actions += A
		end
	end
End

Void InitGoddess()
	FGoddess = Combat_Fighter.Fighters.FOE_0
	FGoddess.AltX = Graphics.W Div 4
	FGoddess.AltY = (Graphics.H - 100) Div 2
	Table StatTotal
	For ch in Each{[0]="Wendicka","Crystal","Foxy","Xenobi","Johnson","Yirl"}
		For S in Each{[0]="Strength","Defense","Will","Resistance","Agility","Accuracy","HP"}
			StatTotal[S] = (StatTotal[S] || 0) + RPGChar[ch].Stat["END_"..S]
		End
	End
	For key,value in pairs(StatTotal)
		Number modifier = 6
		If __skill==3 
			modifier=5 // Goddess slightly stronger in the Hard Mode, yes.
		End
		If key=="HP" 
			modifier=({1,0.75,0.25})[__skill]
		End
		// HP should be handled differently
		number mkvalue := math.floor(value/modifier)
		Lua.assert(mkvalue==mkvalue,sprintf("Init Goddess stat %s created a NaN. (%d / %1.2f)",key,value,modifier))
		CSayF("Stat %s > %d / %1.2f = %d",key,value,modifier,mkvalue)
		FGoddess.Char.Stat["BASE_"..key] = mkvalue
	End
	Var HP = FGoddess.Char.Points.HP
	HP.Maximum = FGoddess.Char.Stat["BASE_HP"]
	HP.Minimum = 1 // Special Script should ignite in the Godess' case.
	HP.Have = HP.Maximum
	RPGPureChar.Wendicka.LinkStat("Level",FGoddess.Tag,"Level")
	CSayF("Goddess level: %05d (Wendicka: %05d)",RPGPureChar[FGoddess.Tag].Stat.Level,RPGPureChar.Wendicka.Stat.Level)
	Goddess_AI_Reset(FGoddess)
	// Drone init
	For Drone,i in GDrone.Each
		RPGPureChar.Wendicka.LinkStat("Level",Drone.Tag,"Level")
		Degs[i]=i*(360 div (__skill*3))
		Drone.AltX = Screen.W Div 4
		Drone.AltY = 0-(i*50)
		For key,value in pairs(StatTotal)
			Drone.Char.Stat["BASE_"..key] = value div (18 div __skill)
		End
		Drone.Char.Stat.BASE_HP = math.max(Drone.Char.Stat.BASE_HP,20)
		Drone.Char.Points.HP.Maximum = 10
		Drone.Char.Points.HP.Minimum = Drone.Char.Points.HP.Maximum
		Drone.Char.Points.HP.Have = Drone.Char.Points.HP.Maximum		
		Goddess_AI_Reset(Drone)
	End

End

Void RetGoddess()
	Static Bool DoneInit
	If !DoneInit
		InitGoddess()
		DoneInit=True
	End
	If FGoddess.Char.Points.HP.Have<=1
		Flow.GoToFlow("FIELD")
		Return
	End
	For Drone,i in GDrone.Each
		//If Drone.AltY<FGoddess.Y-227
		//	Drone.AltY++
		//Else
			Degs[i] = Degs[i] || 0
			If (i%2==0)
				Degs[i] = (Degs[i]-1)%360
			Else
				Degs[i] = (Degs[i]+1)%360
			End
			Drone.AltX = math.floor(XMath.Sin(Degs[i])*255)+FGoddess.X
			Drone.AltY = math.floor(XMath.Cos(Degs[i])*150)+FGoddess.Y-128
			Drone.Char.Points.HP.Have = Drone.Char.Points.HP.Maximum
		//End
	End
End

Init
	CSay("Goddess subscript loaded and running!")
end

//Return RetGoddess
