// License Information:
// src/Tricky Script/Script/Use/Misc/PSaveGame.neil
// Version: 21.02.23
// Copyright (C) 2020, 2021 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

void MakeHeader()
	string r = "Map:"..gvStr.MapTitle.."\n"
	r += "Cycle:"..gv.vInt.Cycle.."\n"
	r += "Difficulty:"..({"Easy","Casual","Hard"})[gv.vInt.skill].."\n"
	r += "Saved:"..gv.vInt.Saved.."\n"
	table protagonists
	string protagonist
	string protaname
	for i=1,6
		string ch = RPGParty[i]
		if ch and ch!=""
			protagonists[ch]=true
		end
	end
	if protagonists.Wendicka
		protagonist = "Wendicka"
		protaname = "Wendicka"
	elseif protagonists.UniWendicka
		protagonist = "UniWendicka"
		protaname = "Wendicka"
	else
		protagonist = "Crystal"
		protaname = "Crystal"
	end
	r +="Protagonist:"..protaname.."\n"
	r +="ProtaLevel:"..RPGChar[protagonist].Stat.Level.."\n"
	SaveGame.Data.Head = r
end

global void PerformSaveGame(string f)
	GV.vInt.Saved++
	GV.vInt.Cycle = math.max(1,GV.vInt.Cycle)
	CSayF("Saving: %s",f)
	SaveGame.Clear()
	SaveGame.Assign(f)
	SaveGame.Data["*PARTY"] = "YES"
	GV.Save()
	Map.SG()
	Vault.Save()
	Ach.Save()
	Hawk.Save()
	MakeHeader()
	SaveGame.Save()	
end

global bool PerformLoadGame(string f)
	static var tfnt
	CSay("Clearing SaveGame buffer")
	SaveGame.Clear()
	SaveGame.Assign(f)
	CSayF("Loading: %s",f)
	//try
		// Load in general
		SaveGame.Load()
		// Game Vars (must be first, as some data I need later is in there!
		CSayF("Parsing Game Vars")
		NeilDoString(SaveGame.Data["GAMEVARS.NEIL"],"SG:GameVars.Neil")
		// Map
		CSay("Loading Field Flow")
		Flow.Load("FIELD","Script/Load/LoadField.neil")
		CSay("Parsing Permakills")
		State.Call("FLOW_FIELD","LGMap","nil")		
		if SaveGame.HasData("VAULT.NEIL")
			CSay("Loading vault data")
			NeilDoString(SaveGame.Data["VAULT.NEIL"],"SG:Vault.Neil")
		else
			CSay("No vault data, hopefully everything's fine!")
		end
		Ach.Load()
		Hawk.Load()
	//catch e
	if false
		//for k in each { "MESSAGE", "TRACEBACK", "COUNT", "INFO" }
		//	CSayF("Exception: '%s' = %s",k,tostring(e[k]))
		//end
		Graphics.Cls()
		__red
		tfnt = tfnt or ImageFont.Obtain("SYSFONT")
		tfnt.Draw("The savegame file you tried to load appears to be corrupted!",0,0)
		__ember
		tfnt.Draw("Click to continue...",0,40)
		Graphics.Flip()
		repeat
			Events.Poll()
		until Events.MouseHitLeft
		return false
	end
	// Lua.error("Loading game not yet implemented. Working on it!")
	return true
end


global string GetSGFileName(int i)
	return SPRINTF("Star Story - Saved Game.%03d",i)
end

global table GetHeader(int i)
	table ret
	string h = SaveGame.GetHeader(GetSGFileName(i))
	cout("<SaveGame Header ",i,">\n",h,"\n</SaveGame Header>\n")
	table lines = Split(h,"\n")
	for _,line in ipairs(lines)
		cout("Parse> ",line,"\n")
		table chopped = Split(line,":")
		print(Serialize("chopped",chopped),#chopped)
		if #chopped==2
			ret[chopped[1]] = chopped[2]
		end
	end
	print(Serialize("SG"..i,ret))
	return ret
end