// License Information:
// src/Tricky Script/Script/Use/Link.NeilBundle/Party.Neil
// Version: 21.05.14
// Copyright (C) 2020, 2021 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

#macro __AUTOSTAT RPGChar[ch].Stat["BUFF_"..Stat]


void LoadPartySub()
	State.LoadNew("PARTY","Script/Subs/SubParty.Neil")
end


bool BxsL = false
module

	void CSay(string f)
		Lua.Neil.Globals.CSay(f)
	end

	void CallBack(int i,string char)
		// This function is only to be called by the Party Sub
		// It will look to what the flow in question had in mind for that 
		// action... it it has any at all.
		//CSayF("Clicked with button %d on character %s",i,char)
		//CSay(sprintf("Party.CallBack(%d,\"%s\")",i,char))
		if GlobalExists("PartyClick")
			// I had to bypass the identifier checker. Normally I wouldn't do this :)
			Lua.Neil.Globals.PartyClick(i,char)
		// else
		//CSayF("No PartyClick found!")
		end
	end
	
	get Int AvgLevel
		int tl
		int nc
		for i=1,6
			if RPGParty[i] && RPGParty[i]!=""
				nc++
				tl+=RPGChar[RPGParty[i]].Stat.Level
			end
		end
		return tl div nc
	end

	void Boxes(char)
		if !BxsL
			// This approach is most of all to avoid speed issues
			State.LoadNew("PARTY","Script/Subs/SubParty.Neil")
		end
		State.Call("PARTY","SubParty.Boxes","\""..(char or "Nobody").."\"")
	end

	void NewChar(string char,int level, string AltName="")
		LoadPartySub()
		State.Call("PARTY","SubParty.NewChar",Sprintf("\"%s\",%d,\"%s\"",char,level,altname))
	end
	
	void GrabLevel(string char,int level)
		LoadPartySub()
		State.Call("PARTY","SubParty.GrabLevel",sprintf("\"%s\",%d",char,level))
	end
	
	void ReloadARMS()
		for a in RPGChar.Crystal.List.ARM.Each
			var p = RPGChar.Crystal.Points["ARM.AMMO."..a]
			p.Have = p.Maximum
			Lua.Neil.Globals.CSayF("Reloading Crystal's %s -> %d/%d",a,p.Have , p.Maximum)
		end
	end
	
	void Recover(string ch="")
		if ch==""
			for i=1,6
				if RPGParty[i] && RPGParty[i]!=""
					self.Recover(RPGParty[i])
				end
			end
			return
		end
		RPGChar[ch].Points.HP.Have = RPGChar[ch].Points.HP.Maximum
		switch Lua.Neil.Globals.gv.gint.Skill
			case 1
				RPGChar[ch].Points.AP.Have = RPGChar[ch].Points.AP.Maximum
			case 2 3
				RPGChar[ch].Points.AP.Have = 0
			default
				Lua.error("Unknown skill setting! "..Lua.tostring(Lua.Neil.Globals.gv.gint.Skill))
		end
		if ch=="Crystal"
			ReloadARMS()
		end
		for stat in each  {"Strength","Defense","Will","Resistance","Agility","Accuracy","Evasion","HP","AP"}
			RPGChar[ch].Stat["BUFF_"..stat] = 0
		end
	end
	
	void GiveEXP(int experience,string ch="")
		if ch==""
			for i=1,6
				if RPGParty[i] && RPGParty[i]!=""
					self.GiveEXP(experience,RPGParty[i])
				end
			end
			return
		end
		RPGChar[ch].Points.EXP.Have += experience
	end
	
	Void NoDeath()
		for i=1,6
			if RPGParty[i] && RPGParty[i]!=""
				RPGChar[RPGParty[i]].Points.HP.Have = math.max(1,RPGChar[RPGParty[i]].Points.HP.Have)
			end
		end
	end
	
	Void AutoBuffExpire()
		Static Table Stats = {"Strength","Defense","Will","Resistance","Agility","Accuracy","Evasion","HP","AP"}
		For ch in Each(RPGChar.All)
			Bool Foe = prefixed(ch,"FOE_")			
			For Stat in Each(Stats)
				//RPGChar[ch].Stat["BUFF_"..Stat]
				If RPGChar[ch].Points.HP.Have == 0
					__AUTOSTAT = 0
				End
				Switch Lua.Neil.Globals.gv.gint.skill
					Case 1
						If __AUTOSTAT>0 && Foe
							__AUTOSTAT = math.max(0,__AUTOSTAT-5)
						ElseIf __AUTOSTAT>0
							__AUTOSTAT--
						ElseIf __AUTOSTAT<0 && (!Foe)
							__AUTOSTAT= math.min(0,__AUTOSTAT+5)
						End
					Case 2
						If __AUTOSTAT>0
							__AUTOSTAT = math.max(0,__AUTOSTAT-2)
						ElseIf __AUTOSTAT<0
							__AUTOSTAT = math.max(0,__AUTOSTAT+2)
						End
					Case 3
						If __AUTOSTAT<0 && Foe
							__AUTOSTAT = math.max(0,__AUTOSTAT+5)
						ElseIf __AUTOSTAT<0
							__AUTOSTAT++
						ElseIf __AUTOSTAT>0 && (!Foe)
							__AUTOSTAT= math.min(0,__AUTOSTAT-5)
						End
					Default
						Lua.error("AutoBuffExpire - Skill Error "..Lua.Neil.Globals.gv.gint.skill)
				End
			End
		End
	End
	
end