// License:
// 	  src/Script/Script/Use/Link.ScyndiBundle/Items_h.scyndi
// 
// 	  Version: 25.02.23
// 	
// 	  Copyright (C) 2020, 2021, 2024, 2025 Jeroen Petrus Broks
// 	
// 	  ===========================
// 	  This file is part of a project related to the Phantasar Chronicles or another
// 	  series or saga which is property of Jeroen P. Broks.
// 	  This means that it may contain references to a story-line plus characters
// 	  which are property of Jeroen Broks. These references may only be distributed
// 	  along with an unmodified version of the game.
// 
// 	  As soon as you remove or replace ALL references to the storyline or character
// 	  references, or any termology specifically set up for the Phantasar universe,
// 	  or any other univers a story of Jeroen P. Broks is set up for,
// 	  the restrictions of this file are removed and will automatically become
// 	  zLib licensed (see below).
// 
// 	  Please note that doing so counts as a modification and must be marked as such
// 	  in accordance to the zLib license.
// 	  ===========================
// 
// 
// 	  zLib license terms:
// 	
// 	  This software is provided 'as-is', without any express or implied
// 	  warranty.  In no event will the authors be held liable for any damages
// 	  arising from the use of this software.
// 
// 	  Permission is granted to anyone to use this software for any purpose,
// 	  including commercial applications, and to alter it and redistribute it
// 	  freely, subject to the following restrictions:
// 	
// 	  1. The origin of this software must not be misrepresented; you must not
// 	     claim that you wrote the original software. If you use this software
// 	     in a product, an acknowledgment in the product documentation would be
// 	     appreciated but is not required.
// 	  2. Altered source versions must be plainly marked as such, and must not be
// 	     misrepresented as being the original software.
// 	  3. This notice may not be removed or altered from any source distribution.
// End License

Module

#use "Libs/SCI/Sys"
#use "Libs/SCI/GINIE"
#use "Libs/SCI/SString"
#use "Libs/SCI/Graphics"

plua G_ItemClass = GINIE.Load("Data/IAA/MyData_ClassFile_IAA.ini","CLASS_IAA")

table TrueItem={}

void LdItems()
	Sys.LoadNewState("SUB_ITEMS","Script/Subs/SubItems.lbc")
end

Global Void JwlRecalc(string char)
	LdItems()
	//Sys.Call("SUB_ITEMS","JewelRecalc",sprintf("\"%s\"",char))
	Sys.Call("SUB_ITEMS","JewelRecalc",char)
End


void __item_nindex(s,string k,v)
	lua.error( "Item data base is read-only, so I cannot assign " .. tostring(v) .. " to " .. k) // .." in " .. it )
end

void MkTrueItem(string it)
	it = upper(it)
	if TrueItem[it]
		return
	end
	LdItems()
	table m
	//m.__index = var(s,string k)
	locextern rec "s._rec"
	ddef __item_index	
		args:=newArray(infinity)
		s:=args[0]		
		string k := Upper(args[1]) //= k:upper()		
		switch k
			case "ICON" "ICONFILE"
				//string f = ISGET.String("SUB_ITEMS","lua.tostring(ItemBaseGet(\""..it.."\",\"ICON\"))")				
				string f:= s._gin.value(s._rec,"ICON")
				if k=="ICONFILE"
					return f
				end
				ret := LoadNewImage(f,"ITEM__"..it)
				ret.HotBottomCenter()
				return ret
			case "SHORTNAME"
				shrt:=s._gin.value(rec,"SHORTNAME")
				long:=s._gin.value(rec,"NAME")
				return Ternary(shrt=="",long,shrt)
			case "ABL_AP" "ABL_SPEED" "ABL_APCUT" "ABL_DBLSPEED" "ABL_INSTANT" "ABL_CANCEL" "ABL_DBLPOWER" "ACTSPEED" "ATTACKPOWER" "HEALING" "ITM_SELLPRICE" "ITM_BUYPRICE" "ITM_SHILDERPRICE" "APRECOVER"
				//return ISGET.Int("SUB_ITEMS","ItemBaseGet(\""..it.."\",\""..k.."\")")
				return s._gin.intvalue(rec,k)
			case "ARM_HIT_PROCENT" "ARM_WEIGHT" "ARM_XPOWER" "ARM_MAXAMMO" "GRANTEXP"
				// Just a block, as the previous one got too big...
				// Figures.
				//return ISGET.Int("SUB_ITEMS","ItemBaseGet(\""..it.."\",\""..k.."\")")
				return s._gin.intvalue(rec,k)
			case "INDISCRIMINATE" "ITM_SELLABLE" "DODGABLE" "USECOMBAT" "USEFIELD"
				//return ISGET.Bool("SUB_ITEMS","ItemBaseGet(\""..it.."\",\""..k.."\")")
				return s._gin.boolvalue(rec,k)
			case ".HASMEMBER"
				//bool Check(m)
				//	return ISGET.Bool("SUB_ITEMS","ItemMemberCheck(\""..it.."\",\"".. m.."\")")
				//End
				//Return Check
				ddef Check
					String m:=infinity
					//Lua.error(sprintf("Not yet sure how to handle .HASMEMBER for IAA database. it='%s' m='%s'",it,m))
					String T:=Upper(G_ItemClass.Value("Class",m))
					return T=="INTEGER" || T=="STRING" || T=="BOOLEAN" || T=="INT"
				end
				return Check
				//Lua.error("IAA database does not yet have the .HASMEMBER check in order!")
			default
				if prefixed(k,"CAUSE") || prefixed(k,"CURE") || prefixed(k,"PERMABUFF")
					//return ISGET.Bool("SUB_ITEMS","ItemBaseGet(\""..it.."\",\""..k.."\")")
					Return s._gin.boolvalue(rec,k)
				end
				if Prefixed(k,"BUFF_") || Prefixed(k,"ARM_PRICE_")
					//return ISGET.Int("SUB_ITEMS","ItemBaseGet(\""..it.."\",\""..k.."\")")
					Return s._gin.intvalue(rec,k)
				end
				//return ISGET.String("SUB_ITEMS","lua.tostring(ItemBaseGet(\""..it.."\",\""..k.."\"))")
				return s._gin.value(rec,k)
		end
	end	
	m.__newindex = __item_nindex
	m.__index    = __item_index
	TrueItem[it] = lua.setmetatable({["_gin"]=GINIE.LoadNew("Data/IAA/"..it..".ini","IAA__"..it),["_rec"]="Rec:"..it},m)
end

bool GiveItem(string it,string ch,allowvault)
	//Lua.error("Give item needs a slight overhaul!")
	//plua ret = ISGET.Bool("SUB_ITEMS",sprintf("S_GiveItem(\"%s\",\"%s\")",it,ch))
	//if (!ret) && allowvault
	//	Lua.Neil.Globals.Vault.Store(it)
	//end
	//return ret
	ldItems();
	ret := Sys.Call("SUB_ITEMS","S_GiveItem",it,ch)
	if (!ret) && allowvault
		Lua.Scyndi.Class.Vault.Store(it)
	end	
	return ret
end

quickmeta Item

	newindex
		lua.error("The table 'Item' is READ-ONLY")
	end
	
	index
		if Upper(key)=="GIVE" || Upper(key)=="GIVEITEM"
			return GiveItem
		end
		MkTrueItem(key)
		return TrueItem[Upper(key)]
	end

end

group Vault
	void Store(string TItem,int amm=1)
		LdItems()
		//Sys.Call("SUB_ITEMS","StoreVault",sprintf("\"%s\",%d",TItem,amm))
		Sys.Call("SUB_ITEMS","StoreVault",TItem,amm)
	end
	void Remove(string TItem,int amm=1)
		LdItems()
		//Sys.Call("SUB_ITEMS","StoreVault",sprintf("\"%s\",%d",TItem,0-amm))
		Sys.Call("SUB_ITEMS","StoreVault",TItem,0-amm)
	end
	int Has(string key)
		LdItems()
		//return ISGET.Int("SUB_ITEMS",sprintf("GetVault(\"%s\")",key))
		//Lua.error("Vault.Has() will be taken care of later!")
		return Sys.Call("SUB_ITEMS","GetVault",key)
	end
	get table Contents
		LdItems()
		//Lua.error("Vault.Contents will be taken care of later!")
		//string c = ISGet.String("SUB_ITEMS","VaultContents()")
		string c = Sys.Call("SUB_ITEMS","VaultContents")
		//print("Contents received:",c)
		return XSplit(c,";")		
	end
	get delegate Each
		int i:=-1
		table c := Contents		
		//var Ret()
		ddef Ret
			i++
			if i>=len(c) 
				return nil
			end
			return c[i]
		end
		return Ret
	end
	
	// Used to be called "Script", but since Script is a keyword now.
	get string VaultScript
		LdItems()
		Lua.error("VaultScript will be taken care of later!")
		//return ISGet.String("SUB_ITEMS","VaultScript()") 
	end
	void Save()
		LdItems()
		Lua.error("Saving Vault.neil will be taken care of later")
		//SaveGame.Data["Vault.neil"] = VaultScript
	end
	void Reset()
		LdItems()
		Sys.Call("SUB_ITEMS","VaultReset","nil")
	end
end
