// License:
// **********************************************
// 
// src/Script/Script/Use/Anyway.ScyndiBundle/Aurina.Scyndi
// (c) Jeroen Broks, 2021, 2024, All Rights Reserved.
// 
// This file contains material that is related
// to a storyline that is which is strictly
// copyrighted to Jeroen Broks.
// 
// This file may only be used in an unmodified
// form with an unmodified version of the
// software this file belongs to.
// 
// You may use this file for your study to see
// how I solved certain things in the creation
// of this project to see if you find valuable
// leads for the creation of your own.
// 
// Mostly this file comes along with a project
// that is for most part released under an
// open source license and that means that if
// you use that code with this file removed
// from it, you can use it under that license.
// Please check out the other files to find out
// which license applies.
// 
// This file comes 'as-is' and in no possible
// way the author can be held responsible of
// any form of damages that may occur due to
// the usage of this file
// 
// 
// **********************************************
// 
// 
// version: 24.12.30
// 
// End License


module

#use "Libs/SCI/Audio"
#use "Libs/SCI/InterVar"

#use "Script/Use/Anyway.ScyndiBundle/Algemeen"



plua ChaChingSound

	void ChaChing()
		ChaChingSound = ChaChingSound || Audio.LoadNew("Audio/Shopping/ChaChing.ogg","CHACHING")
		ChaChingSound.Play()
	end

	readonly var G = Lua.Scyndi.Globals
	
	get int Have
		return gInt.Aurinas
	end
	
	set int Have
		if value>gInt.Aurinas && math.random(1,5*__skill)==1
			gint.AurinaRate++
		end			
		gInt.Aurinas = value
	end
	
	get int Rate
		switch gInt.Skill
			case 1
				GInt.AurinaRate = math.max(500,GInt.AurinaRate)
			case 2
				GInt.AurinaRate = math.max(100,GInt.AurinaRate)
			case 3
				GInt.AurinaRate = math.max(5,GInt.AurinaRate)
			default
				Lua.error("Aurina rate skill fuck up error!")
		end
		return GInt.AurinaRate
	end
	
	set int Rate
		GInt.AurinaRate = math.min(value,g.caps.maxaurinarate)
	end
	
	get int AurinaCredits
		return Rate*Have
	end
	
	get int Cash
		return GInt.Cash
	end
	
	set int Cash
		GInt.Cash = math.min(G.Caps.MaxMoney,value)
	end
	
	void Verzilver()
		// Needed for the boxtext!		
		gstring.AURINAS           = sprintf("%4d",Have)
		gstring.AURINARATE        = sprintf("%4d",Rate)
		gstring.AURINACREDITS     = sprintf("%6d",AurinaCredits)
		GInt.AURINASEXCHANGED += Have
		Cash += AurinaCredits		
		Have = 0
		ChaChing()
	end
	
	get int Spent4Rate
		return GInt.AurinaSpent4rate
	end
	
	set int Spent4Rate
		LocExtern rinc "Aurina_Static_Local_Rinc_Spent4Rate"
		//static int 
		rinc = rinc || 100*(10^__skill)
		GInt.AurinaSpent4rate = value
		while GInt.AurinaSpent4rate>rinc
			GInt.AurinaSpent4rate-=rinc
			Rate ++
		end
	end
	
	get int Earned4Rate
		return GInt.AurinaEarned4rate
	end

	set int Earned4Rate
		//static int rinc = 123*(10^__skill)
		LocExtern rinc "Aurina_Static_Local_Rinc_Earned4Rate"
		rinc = rinc || 123*(10^__skill)
		GInt.AurinaEarned4rate = value
		while GInt.AurinaEarned4rate>rinc
			GInt.AurinaEarned4rate-=rinc
			Rate ++
		end
	end

	
	bool Pay(int amount)
		if amount<0
			Lua.error("Negative payment requested!")
		elseif amount>Cash
			return false
		end
		cash-=amount
		Spent4Rate+=amount
		gint.TotalCashSpent+=amount
		ChaChing()
		return true
	end
	
	void Earn(int amount)
		if amount<0
			Lua.error("Negative earning requested!")
		end
		cash+=amount
		Earned4Rate+=amount
		ChaChing()
	end
	
	get int Shilders	
		return g.gint.Shilders
	end
	set int Shilders
		gbool.Shilder1st=true
		gint.Shilders=value
	end
	
//end
