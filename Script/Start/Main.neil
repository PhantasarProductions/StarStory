// License Information:
// src/Tricky Script/Script/Start/Main.neil
// Version: 21.02.22
// Copyright (C) 2020, 2021 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
#macro wh_Image 1
#macro wh_Font 2
#macro wh_Audio 3

var Loading

class LAsset

	readonly string File
	readonly string Tag
	readonly int what
	readonly var data
	

	static table Lijst

	CONSTRUCTOR(string F,string T,int w)
		File = F
		Tag = T
		what = w
		Lijst += self
	end
	
	static void C(string F,string T,int w,data)
		var a 
		a = new LAsset(F,T,W)
		// Woe of a language still in development!
	end
end


// Testing if the file is actually compiled correctly at all and running
init
	FPS.MinTicks=25;
	Print("Wendicka Lovejoy says 'Hello'")
	Print("Apollo is running in "..Core.Platform)
	
	Events.HideMouse();


	// Configure loading assets
	LAsset.C("GFX/Loading/Graphic.png","LOADING",wh_Image) // Must always be first
	LAsset.C("Fonts/Robotica.18.jfbf","BOXTEXT",wh_Font)
	LAsset.C("Fonts/Robotica.35.jfbf","BIGTEXT",wh_Font)
	LAsset.C("Fonts/SysFont.jfbf","SYSFONT",wh_Font,true)
	LAsset.C("GFX/Cursor/Default.png","MOUSE",wh_Image)
	LAsset.C("GFX/BoxText/Corner.png","BTHOEK",wh_Image)
	LAsset.C("GFX/Save/Up.png","UP",wh_Image)
	LAsset.C("GFX/Save/Down.png","DOWN",wh_Image)
	LAsset.C("GFX/StatusBar/Icons/Items.png","ICO_ITEMS",wh_Image)
	LAsset.C("GFX/StatusBar/Icons/Abilities.png","ICO_ABILITIES",wh_Image)
	LAsset.C("GFX/StatusBar/Icons/Order.png","ICO_SWITCH",wh_Image)
	LAsset.C("GFX/FieldIcons/Achievements.png","ICO_ACHIEVEMENTS",wh_image)
	LAsset.C("GFX/FieldIcons/Quit.png","ICO_QUIT",wh_image)
	LAsset.C("GFX/StatusBar/LevelUp.png","LEVEL_UP",wh_image)
	LAsset.C("GFX/Combat/PlayerInput/Bottom.png","COMBAT_PLAYINPUT_BOTTOM",wh_Image)
	LAsset.C("GFX/Combat/PlayerInput/Item.png","COMBAT_PLAYINPUT_ITEM",wh_Image)
	LAsset.C("GFX/Combat/PlayerInput/Sides.png","COMBAT_PLAYINPUT_SIDES",wh_Image)
	LAsset.C("GFX/Combat/PlayerInput/Top.png","COMBAT_PLAYINPUT_TOP",wh_Image)	
	//LAsset.C("GFX/Field/Encounter.png","FLDFOE",wh_image)
	//LAsset.C("GFX/Field/Boss.png","FLDBOSS",wh_image)
	for elem in each {"Dark", "Earth", "Fire", "Frost", "Light", "Lightning", "Water"}
		LAsset.C("GFX/Elements/"..elem..".png","ELEM_"..(elem:upper()),wh_image)
	end
	for status in each { "Block",  "Damned", "Death", "Disease", "Paralysis", "Poison", "Will" }
		LAsset.C("GFX/StatusChanges/"..status..".png","STATUS_"..(status:upper()),wh_image)
	end
	LAsset.C("GFX/StatusBar/ItemSocket.png","ITEM_SOCKET",wh_image)
	LAsset.C("GFX/StatusScreen/Trash.png","TRASH",wh_image)
	LAsset.C("GFX/StatusScreen/Use.png","USE",wh_image)
	LAsset.C("GFX/Combat/TimeGauge.png","COMBAT_TIMEGAUGE",wh_image)
	LAsset.C("GFX/Combat/HeroTimePointer.png","COMBAT_POINTHERO",wh_image)
	LAsset.C("GFX/Combat/FoeTimePointer.png","COMBAT_POINTFOE",wh_image)
	LAsset.C("Audio/SFX/Transporter/Beam.ogg","BEAM",wh_Audio)
	LAsset.C("Audio/Raw/145438__soughtaftersounds__old-music-box-5.ogg","AUDIO_LEVELUP",wh_Audio)
	LAsset.C("Audio/Raw/145434__soughtaftersounds__old-music-box-1.ogg","SOLVED",wh_Audio)
	LAsset.C("Audio/SFX/Alg/Buzz.wav","BUZZ",wh_Audio)
	LAsset.C("Audio/SFX/Signal.ogg","SIGNAL",wh_Audio)


	// Loading assets
	int m=#LAsset.Lijst
	for i,LA in ipairs(LAsset.Lijst)
		Events.Poll()
		Graphics.Cls()
		Graphics.Color(255,255,255)
		if Loading
			Loading.Draw((Screen.W/2)-(Loading.Width/2),(Screen.H/2)-(Loading.Height/2))
		end
		Graphics.Color(65,65,65)
		Graphics.Rect(0,Screen.H-50,Screen.W,50)
		Graphics.Color(0,180,255)
		Graphics.Rect(0,Screen.H-50,math.floor( (i/m) * Screen.W ),50)
		Graphics.Color(255,255,255)
		Graphics.Flip()
		Events.Poll()
		printf("%5d/%5d: Loading ",i,m)
		switch LA.what
			case wh_Image
				cout("image ",LA.File," to ",LA.Tag)
				var I =  Image.Load(LA.File,LA.Tag)
				Loading = Loading or I
			case wh_Font
				cout("font ",LA.File," to ",LA.Tag)
				ImageFont.Load(LA.File,LA.Tag).Fixed = LA.data==true
			case wh_Audio
				cout("audio ",LA.File," to ",LA.Tag)
				Audio.Load(LA.File,LA.Tag)
			default
				print("ERROR!")
				lua.error("Unknown loader switch ("..LA.what..")")
		end
		print();
	end


	// Chaining to main menu
	Flow.Load("MAINMENU","Script/Flow/FlowMain.neil")
	Flow.Current="MAINMENU"		
end